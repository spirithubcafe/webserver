@page "/search"
@layout PublicLayout

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Search Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">Search Coffee Products</h1>
            <p class="mt-2 text-gray-600">Find your perfect coffee from our collection</p>
        </div>

        <!-- Search Bar -->
        <div class="mb-8">
            <div class="relative max-w-2xl mx-auto">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <input @bind="searchQuery" @oninput="OnSearchInput" type="search" placeholder="Search for coffee beans, equipment, accessories..." 
                       class="block w-full pl-10 pr-3 py-4 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-orange-500 focus:border-orange-500 text-lg">
            </div>
        </div>

        <div class="lg:grid lg:grid-cols-4 lg:gap-x-8">
            <!-- Filters Sidebar -->
            <aside class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-8">
                    <h2 class="text-lg font-medium text-gray-900 mb-6">Filters</h2>

                    <!-- Category Filter -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Category</h3>
                        <div class="space-y-2">
                            @foreach (var category in categories)
                            {
                                <label class="flex items-center">
                                    <input @onchange="(e) => ToggleCategoryFilter(category.Id, (bool)e.Value!)" type="checkbox" class="rounded border-gray-300 text-orange-600 focus:ring-orange-500">
                                    <span class="ml-2 text-sm text-gray-700">@category.Name</span>
                                    <span class="ml-auto text-xs text-gray-500">(@category.Count)</span>
                                </label>
                            }
                        </div>
                    </div>

                    <!-- Price Range Filter -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Price Range (OMR)</h3>
                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input @onchange="(e) => SetPriceRange(0, 5)" name="price" type="radio" class="text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">Under 5 OMR</span>
                            </label>
                            <label class="flex items-center">
                                <input @onchange="(e) => SetPriceRange(5, 10)" name="price" type="radio" class="text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">5 - 10 OMR</span>
                            </label>
                            <label class="flex items-center">
                                <input @onchange="(e) => SetPriceRange(10, 25)" name="price" type="radio" class="text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">10 - 25 OMR</span>
                            </label>
                            <label class="flex items-center">
                                <input @onchange="(e) => SetPriceRange(25, 50)" name="price" type="radio" class="text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">25 - 50 OMR</span>
                            </label>
                            <label class="flex items-center">
                                <input @onchange="(e) => SetPriceRange(50, 1000)" name="price" type="radio" class="text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">Over 50 OMR</span>
                            </label>
                        </div>
                        
                        <!-- Custom Price Range -->
                        <div class="mt-4 space-y-2">
                            <label class="block text-xs font-medium text-gray-700">Custom Range</label>
                            <div class="flex space-x-2">
                                <input @bind="customMinPrice" type="number" placeholder="Min" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-orange-500 focus:border-orange-500">
                                <input @bind="customMaxPrice" type="number" placeholder="Max" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-orange-500 focus:border-orange-500">
                            </div>
                            <button @onclick="ApplyCustomPriceRange" class="w-full px-3 py-2 text-xs bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors">
                                Apply
                            </button>
                        </div>
                    </div>

                    <!-- Availability Filter -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Availability</h3>
                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input @bind="showInStockOnly" type="checkbox" class="rounded border-gray-300 text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">In stock only</span>
                            </label>
                            <label class="flex items-center">
                                <input @bind="showOnSaleOnly" type="checkbox" class="rounded border-gray-300 text-orange-600 focus:ring-orange-500">
                                <span class="ml-2 text-sm text-gray-700">On sale only</span>
                            </label>
                        </div>
                    </div>

                    <!-- Brand Filter -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-900 mb-3">Brand</h3>
                        <div class="space-y-2">
                            @foreach (var brand in brands)
                            {
                                <label class="flex items-center">
                                    <input @onchange="(e) => ToggleBrandFilter(brand.Name, (bool)e.Value!)" type="checkbox" class="rounded border-gray-300 text-orange-600 focus:ring-orange-500">
                                    <span class="ml-2 text-sm text-gray-700">@brand.Name</span>
                                    <span class="ml-auto text-xs text-gray-500">(@brand.Count)</span>
                                </label>
                            }
                        </div>
                    </div>

                    <!-- Clear Filters -->
                    <button @onclick="ClearAllFilters" class="w-full px-4 py-2 text-sm text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                        Clear All Filters
                    </button>
                </div>
            </aside>

            <!-- Products Grid -->
            <main class="mt-8 lg:mt-0 lg:col-span-3">
                <!-- Sort and Results Info -->
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
                    <div class="text-sm text-gray-500">
                        Showing @filteredProducts.Count of @totalProducts products
                        @if (!string.IsNullOrEmpty(searchQuery))
                        {
                            <span>for "@searchQuery"</span>
                        }
                    </div>
                    <div class="mt-4 sm:mt-0 flex items-center space-x-4">
                        <label for="sort" class="text-sm font-medium text-gray-700">Sort by:</label>
                        <select @bind="sortOption" id="sort" class="border border-gray-300 rounded-md text-sm focus:ring-orange-500 focus:border-orange-500">
                            <option value="relevance">Relevance</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="name">Name A-Z</option>
                            <option value="newest">Newest First</option>
                            <option value="rating">Highest Rated</option>
                        </select>
                    </div>
                </div>

                @if (filteredProducts.Any())
                {
                    <!-- Products Grid -->
                    <div class="grid grid-cols-1 gap-y-10 sm:grid-cols-2 gap-x-6 lg:grid-cols-3 xl:gap-x-8">
                        @foreach (var product in filteredProducts)
                        {
                            <div class="group relative bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow">
                                <!-- Product Image -->
                                <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden bg-gray-200 group-hover:opacity-75 transition-opacity">
                                    <img src="@product.ImageUrl" alt="@product.Name" class="w-full h-48 object-cover object-center">
                                    
                                    <!-- Quick Actions -->
                                    <div class="absolute top-3 right-3 flex flex-col space-y-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                        <button @onclick="() => ToggleFavorite(product.Id)" class="p-2 rounded-full bg-white/80 backdrop-blur-sm text-gray-600 hover:bg-white hover:text-red-500 transition-colors">
                                            <svg class="h-4 w-4" fill="@(product.IsFavorite ? "currentColor" : "none")" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                                            </svg>
                                        </button>
                                        <button @onclick="() => QuickView(product.Id)" class="p-2 rounded-full bg-white/80 backdrop-blur-sm text-gray-600 hover:bg-white hover:text-orange-500 transition-colors">
                                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                            </svg>
                                        </button>
                                    </div>

                                    @if (product.IsOnSale)
                                    {
                                        <div class="absolute top-3 left-3">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                Sale
                                            </span>
                                        </div>
                                    }
                                </div>

                                <!-- Product Info -->
                                <div class="p-4">
                                    <div class="flex justify-between items-start mb-2">
                                        <div class="flex-1">
                                            <h3 class="text-sm font-medium text-gray-900">
                                                <a href="/products/@product.Id" class="hover:text-orange-600 transition-colors">
                                                    @product.Name
                                                </a>
                                            </h3>
                                            <p class="mt-1 text-sm text-gray-500">@product.Brand</p>
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center justify-between mb-3">
                                        <div class="flex items-center">
                                            @if (product.IsOnSale && product.OriginalPrice > product.Price)
                                            {
                                                <span class="text-lg font-semibold text-red-600 mr-2">
                                                    @product.Price.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                                </span>
                                                <span class="text-sm text-gray-500 line-through">
                                                    @product.OriginalPrice.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-lg font-semibold text-gray-900">
                                                    @product.Price.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                                </span>
                                            }
                                        </div>
                                        @if (product.IsInStock)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                In Stock
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                Out of Stock
                                            </span>
                                        }
                                    </div>

                                    <!-- Rating -->
                                    <div class="flex items-center mb-3">
                                        <div class="flex items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                @if (i <= product.Rating)
                                                {
                                                    <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                                                        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                                    </svg>
                                                }
                                                else
                                                {
                                                    <svg class="w-4 h-4 text-gray-300 fill-current" viewBox="0 0 20 20">
                                                        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                                    </svg>
                                                }
                                            }
                                        </div>
                                        <span class="ml-2 text-sm text-gray-600">(@product.ReviewCount)</span>
                                    </div>

                                    <!-- Add to Cart Button -->
                                    @if (product.IsInStock)
                                    {
                                        <button @onclick="() => AddToCart(product.Id)" 
                                                class="w-full bg-orange-600 border border-transparent rounded-md py-2 px-4 text-sm font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                                            Add to Cart
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="() => NotifyWhenAvailable(product.Id)"
                                                class="w-full bg-gray-200 border border-gray-300 rounded-md py-2 px-4 text-sm font-medium text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors">
                                            Notify When Available
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="mt-12 flex justify-center">
                        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                            <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <span class="sr-only">Previous</span>
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                            <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">1</button>
                            <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-orange-50 text-sm font-medium text-orange-600">2</button>
                            <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">3</button>
                            <button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <span class="sr-only">Next</span>
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </nav>
                    </div>
                }
                else
                {
                    <!-- No Results -->
                    <div class="text-center py-16">
                        <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <h3 class="mt-6 text-xl font-medium text-gray-900">No products found</h3>
                        <p class="mt-2 text-gray-500">Try adjusting your search or filter criteria to find what you're looking for.</p>
                        <div class="mt-8">
                            <button @onclick="ClearAllFilters" class="bg-orange-600 border border-transparent rounded-md shadow-sm py-3 px-6 text-base font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                                Clear All Filters
                            </button>
                        </div>
                    </div>
                }
            </main>
        </div>
    </div>
</div>

@code {
    private string searchQuery = "";
    private string sortOption = "relevance";
    private decimal? customMinPrice = null;
    private decimal? customMaxPrice = null;
    private bool showInStockOnly = false;
    private bool showOnSaleOnly = false;

    private List<ProductCategory> categories = new();
    private List<ProductBrand> brands = new();
    private List<SearchProduct> allProducts = new();
    private List<SearchProduct> filteredProducts = new();
    private HashSet<int> selectedCategoryIds = new();
    private HashSet<string> selectedBrands = new();
    private decimal? minPrice = null;
    private decimal? maxPrice = null;
    private int totalProducts = 0;

    protected override void OnInitialized()
    {
        LoadData();
        ApplyFilters();
    }

    private void LoadData()
    {
        // TODO: Load from actual services/APIs
        categories = new List<ProductCategory>
        {
            new ProductCategory { Id = 1, Name = "Coffee Beans", Count = 15 },
            new ProductCategory { Id = 2, Name = "Equipment", Count = 8 },
            new ProductCategory { Id = 3, Name = "Accessories", Count = 12 },
            new ProductCategory { Id = 4, Name = "Gift Sets", Count = 5 }
        };

        brands = new List<ProductBrand>
        {
            new ProductBrand { Name = "SpirithubCofe", Count = 10 },
            new ProductBrand { Name = "Premium Roasters", Count = 8 },
            new ProductBrand { Name = "Arabian Coffee Co.", Count = 6 },
            new ProductBrand { Name = "Mountain Blend", Count = 4 }
        };

        allProducts = new List<SearchProduct>
        {
            new SearchProduct { Id = 1, Name = "Ethiopian Yirgacheffe", Brand = "SpirithubCofe", Price = 4.900m, OriginalPrice = 5.200m, CategoryId = 1, ImageUrl = "https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=400&h=400&fit=crop&crop=center", IsInStock = true, IsOnSale = true, Rating = 5, ReviewCount = 24 },
            new SearchProduct { Id = 2, Name = "Colombian Supremo", Brand = "Premium Roasters", Price = 5.200m, CategoryId = 1, ImageUrl = "https://images.unsplash.com/photo-1587734195503-904fca47e0df?w=400&h=400&fit=crop&crop=center", IsInStock = true, Rating = 4, ReviewCount = 18 },
            new SearchProduct { Id = 3, Name = "Espresso Machine", Brand = "Premium Roasters", Price = 299.000m, CategoryId = 2, ImageUrl = "https://images.unsplash.com/photo-1611854779393-1b2da9d400ac?w=400&h=400&fit=crop&crop=center", IsInStock = false, Rating = 5, ReviewCount = 32 },
            new SearchProduct { Id = 4, Name = "Coffee Mug Set", Brand = "Arabian Coffee Co.", Price = 8.500m, CategoryId = 3, ImageUrl = "https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=400&h=400&fit=crop&crop=center", IsInStock = true, Rating = 4, ReviewCount = 12 }
        };

        totalProducts = allProducts.Count;
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ToggleCategoryFilter(int categoryId, bool isSelected)
    {
        if (isSelected)
            selectedCategoryIds.Add(categoryId);
        else
            selectedCategoryIds.Remove(categoryId);
        
        ApplyFilters();
    }

    private void ToggleBrandFilter(string brand, bool isSelected)
    {
        if (isSelected)
            selectedBrands.Add(brand);
        else
            selectedBrands.Remove(brand);
        
        ApplyFilters();
    }

    private void SetPriceRange(decimal min, decimal max)
    {
        minPrice = min;
        maxPrice = max;
        ApplyFilters();
    }

    private void ApplyCustomPriceRange()
    {
        if (customMinPrice.HasValue && customMaxPrice.HasValue)
        {
            minPrice = customMinPrice.Value;
            maxPrice = customMaxPrice.Value;
            ApplyFilters();
        }
    }

    private void ApplyFilters()
    {
        filteredProducts = allProducts.Where(p =>
            (string.IsNullOrEmpty(searchQuery) || p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
            (!selectedCategoryIds.Any() || selectedCategoryIds.Contains(p.CategoryId)) &&
            (!selectedBrands.Any() || selectedBrands.Contains(p.Brand)) &&
            (!minPrice.HasValue || p.Price >= minPrice.Value) &&
            (!maxPrice.HasValue || p.Price <= maxPrice.Value) &&
            (!showInStockOnly || p.IsInStock) &&
            (!showOnSaleOnly || p.IsOnSale)
        ).ToList();

        ApplySorting();
        StateHasChanged();
    }

    private void ApplySorting()
    {
        filteredProducts = sortOption switch
        {
            "price-low" => filteredProducts.OrderBy(p => p.Price).ToList(),
            "price-high" => filteredProducts.OrderByDescending(p => p.Price).ToList(),
            "name" => filteredProducts.OrderBy(p => p.Name).ToList(),
            "newest" => filteredProducts.OrderByDescending(p => p.Id).ToList(),
            "rating" => filteredProducts.OrderByDescending(p => p.Rating).ToList(),
            _ => filteredProducts.ToList()
        };
    }

    private void ClearAllFilters()
    {
        searchQuery = "";
        selectedCategoryIds.Clear();
        selectedBrands.Clear();
        minPrice = null;
        maxPrice = null;
        customMinPrice = null;
        customMaxPrice = null;
        showInStockOnly = false;
        showOnSaleOnly = false;
        sortOption = "relevance";
        
        ApplyFilters();
    }

    private void ToggleFavorite(int productId)
    {
        var product = filteredProducts.FirstOrDefault(p => p.Id == productId);
        if (product != null)
        {
            product.IsFavorite = !product.IsFavorite;
            // TODO: Update favorite status via API
        }
    }

    private void QuickView(int productId)
    {
        // TODO: Open quick view modal
    }

    private void AddToCart(int productId)
    {
        // TODO: Add to cart via API
    }

    private void NotifyWhenAvailable(int productId)
    {
        // TODO: Set up notification for product availability
    }

    public class ProductCategory
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int Count { get; set; }
    }

    public class ProductBrand
    {
        public string Name { get; set; } = "";
        public int Count { get; set; }
    }

    public class SearchProduct
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Brand { get; set; } = "";
        public decimal Price { get; set; }
        public decimal OriginalPrice { get; set; }
        public int CategoryId { get; set; }
        public string ImageUrl { get; set; } = "";
        public bool IsInStock { get; set; }
        public bool IsOnSale { get; set; }
        public bool IsFavorite { get; set; }
        public int Rating { get; set; }
        public int ReviewCount { get; set; }
    }
}