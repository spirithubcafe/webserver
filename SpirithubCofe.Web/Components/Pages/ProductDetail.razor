@page "/product/{id:int}"
@page "/product/{slug}"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using SpirithubCofe.Application.DTOs
@using SpirithubCofe.Domain.Entities
@using SpirithubCofe.Web.Services
@using SpirithubCofe.Web.Components.Shared
@using System.ComponentModel.DataAnnotations

@* Component Injections *@
@inject ProductService ProductService
@inject CartService CartService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ToastService ToastService
@inject IStringLocalizer<ProductDetail> Loc
@rendermode InteractiveServer

@inject ProductService ProductService
@inject ReviewService ReviewService
@inject CartService CartService
@inject ToastService ToastService
@inject IStringLocalizer<Resources> Loc
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<!-- PageTitle removed due to compilation issues -->

@if (isLoading)
{
    <div class="flex justify-center items-center min-h-screen">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
    </div>
}
else if (product == null)
{
    <div class="container mx-auto px-4 py-8">
        <div class="text-center">
            <div class="mb-8">
                <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m16 0l-2-2m-16 2l2-2"/>
                </svg>
            </div>
            <h1 class="text-2xl font-bold text-gray-800 mb-4">@Loc["ProductNotFound"]</h1>
            <p class="text-gray-600 mb-6">@Loc["ProductNotFoundDescription"]</p>
            <a href="/products" 
               class="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-white bg-amber-600 hover:bg-amber-700 transition-colors">
                @Loc["BackToProducts"]
            </a>
        </div>
    </div>
}
else
{
    <!-- Breadcrumb -->
    <nav class="bg-gray-50 px-4 py-3">
        <div class="container mx-auto">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
                <li>
                    <a href="/" class="hover:text-amber-600">@Loc["Home"]</a>
                </li>
                <li>
                    <a href="/products" class="hover:text-amber-600">@Loc["Products"]</a>
                </li>
                <li class="text-gray-400">@GetLocalizedProductName()</li>
            </ol>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Product Images -->
            <div>
                <!-- Main Image -->
                <div class="relative mb-4">
                    <img src="@currentImagePath" 
                         alt="@GetLocalizedText(product.ImageAlt, product.ImageAltAr)"
                         class="w-full h-96 object-cover rounded-lg cursor-pointer shadow-lg"
                         @onclick="OpenImageModal" />
                    
                    @if (product.IsOrganic)
                    {
                        <div class="absolute top-4 left-4">
                            <div class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                </svg>
                                @Loc["Organic"]
                            </div>
                        </div>
                    }

                    @if (product.IsFairTrade)
                    {
                        <div class="absolute top-4 right-4">
                            <div class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                                @Loc["FairTrade"]
                            </div>
                        </div>
                    }

                    @if (product.IsFeatured)
                    {
                        <div class="absolute top-16 right-4">
                            <div class="bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-medium">
                                @Loc["Featured"]
                            </div>
                        </div>
                    }
                </div>

                <!-- Thumbnail Gallery -->
                @if (product.GalleryImages?.Any() == true)
                {
                    <div class="grid grid-cols-4 gap-2 mt-4">
                        @foreach (var image in product.GalleryImages.Take(4))
                        {
                            <img src="@image.ImagePath" 
                                 alt="@image.AltText"
                                 class="w-full h-20 object-cover rounded cursor-pointer border-2 @(currentImagePath == image.ImagePath ? "border-amber-500" : "border-gray-200")"
                                 @onclick="() => SelectImage(image.ImagePath)" />
                        }
                    </div>
                }
            </div>

            <!-- Product Info -->
            <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-4">@GetLocalizedProductName()</h1>
                
                <!-- Rating & Reviews -->
                @if (reviewsResponse != null)
                {
                    <div class="flex items-center mb-4">
                        <div class="flex items-center mr-4">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <svg class="w-5 h-5 @(i <= reviewsResponse.AverageRating ? "text-yellow-400" : "text-gray-300")" 
                                     fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                </svg>
                            }
                        </div>
                        <span class="text-sm text-gray-600">
                            @reviewsResponse.AverageRating.ToString("F1") (@reviewsResponse.TotalCount @Loc["Reviews"])
                        </span>
                    </div>
                }
                
                <div class="mb-6">
                    <span class="text-sm text-gray-500">@Loc["SKU"]: @product.Sku</span>
                </div>

                <!-- Price -->
                <div class="mb-6">
                    @if (selectedVariant != null)
                    {
                        <div class="flex items-baseline space-x-2">
                            @if (selectedVariant.DiscountPrice.HasValue && selectedVariant.DiscountPrice > 0)
                            {
                                <span class="text-2xl font-bold text-red-600">@selectedVariant.DiscountPrice.Value OMR</span>
                                <span class="text-lg text-gray-500 line-through">@selectedVariant.Price OMR</span>
                            }
                            else
                            {
                                <span class="text-2xl font-bold text-gray-900">@selectedVariant.Price OMR</span>
                            }
                        </div>
                    }
                    else
                    {
                        var defaultVariant = product.Variants?.FirstOrDefault(v => v.IsDefault) ?? product.Variants?.FirstOrDefault();
                        if (defaultVariant != null)
                        {
                            <span class="text-2xl font-bold text-gray-900">@defaultVariant.Price OMR</span>
                        }
                    }
                </div>

                <!-- Variants -->
                @if (product.Variants?.Any() == true)
                {
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-3">@Loc["Size"]:</label>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                            @foreach (var variant in product.Variants.Where(v => v.IsActive).OrderBy(v => v.DisplayOrder).ThenBy(v => v.Weight))
                            {
                                <button type="button"
                                        @onclick="() => SelectVariant(variant)"
                                        class="p-4 border rounded-lg text-left transition-all duration-200 @(selectedVariant?.Id == variant.Id ? "border-amber-500 bg-amber-50 ring-2 ring-amber-200" : "border-gray-300 bg-white hover:bg-gray-50 hover:border-gray-400")">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <div class="font-medium text-gray-900">
                                                @variant.Weight @variant.WeightUnit
                                            </div>
                                            @if (variant.StockQuantity <= variant.LowStockThreshold && variant.StockQuantity > 0)
                                            {
                                                <div class="text-xs text-orange-600 mt-1">
                                                    @Loc["LowStock"] (@variant.StockQuantity @Loc["Remaining"])
                                                </div>
                                            }
                                            else if (variant.StockQuantity <= 0)
                                            {
                                                <div class="text-xs text-red-600 mt-1">
                                                    @Loc["OutOfStock"]
                                                </div>
                                            }
                                        </div>
                                        <div class="text-right">
                                            @if (variant.DiscountPrice.HasValue && variant.DiscountPrice > 0)
                                            {
                                                <div class="text-lg font-bold text-red-600">
                                                    @variant.DiscountPrice.Value OMR
                                                </div>
                                                <div class="text-sm text-gray-500 line-through">
                                                    @variant.Price OMR
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-lg font-bold text-gray-900">
                                                    @variant.Price OMR
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    @if (selectedVariant?.Id == variant.Id)
                                    {
                                        <div class="mt-2 flex items-center text-amber-600 text-xs">
                                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                            @Loc["Selected"]
                                        </div>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                }

                <!-- Quick Info -->
                <div class="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg mb-6">
                    @if (!string.IsNullOrEmpty(product.Origin))
                    {
                        <div>
                            <h4 class="font-medium text-gray-800 mb-1">@Loc["Origin"]</h4>
                            <p class="text-sm text-gray-600">@product.Origin</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(product.RoastLevel))
                    {
                        <div>
                            <h4 class="font-medium text-gray-800 mb-1">@Loc["RoastLevel"]</h4>
                            <p class="text-sm text-gray-600">@product.RoastLevel</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(product.Process))
                    {
                        <div>
                            <h4 class="font-medium text-gray-800 mb-1">@Loc["Process"]</h4>
                            <p class="text-sm text-gray-600">@product.Process</p>
                        </div>
                    }

                    @if (product.Intensity.HasValue)
                    {
                        <div>
                            <h4 class="font-medium text-gray-800 mb-1">@Loc["Intensity"]</h4>
                            <div class="flex items-center">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <div class="w-3 h-3 rounded-full mr-1 @(i <= product.Intensity.Value ? "bg-amber-400" : "bg-gray-300")"></div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <!-- Add to Cart Button -->
                @{
                    var isOutOfStock = selectedVariant?.StockQuantity <= 0;
                    var isButtonDisabled = isAddingToCart || isOutOfStock;
                }
                <button type="button" 
                        @onclick="AddToCart"
                        disabled="@isButtonDisabled"
                        class="w-full px-6 py-3 rounded-md font-medium transition-colors flex items-center justify-center @(isOutOfStock ? "bg-gray-400 text-white cursor-not-allowed" : "bg-amber-600 text-white hover:bg-amber-700") @(isButtonDisabled ? "opacity-50 cursor-not-allowed" : "")">
                    @if (isAddingToCart)
                    {
                        <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        <span>@Loc["Adding"]...</span>
                    }
                    else if (isOutOfStock)
                    {
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <span>@Loc["OutOfStock"]</span>
                    }
                    else
                    {
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l1.5-6m7.5 0v6a2 2 0 11-4 0V7a2 2 0 114 0z"/>
                        </svg>
                        <span>@Loc["AddToCart"]</span>
                    }
                </button>

                <!-- Stock Information -->
                @if (selectedVariant != null)
                {
                    <div class="mt-2 text-sm text-gray-600 text-center">
                        @if (selectedVariant.StockQuantity <= 0)
                        {
                            <span class="text-red-600 font-medium">@Loc["OutOfStock"]</span>
                        }
                        else if (selectedVariant.StockQuantity <= selectedVariant.LowStockThreshold)
                        {
                            <span class="text-orange-600">@Loc["OnlyLeft"]: @selectedVariant.StockQuantity @Loc["Items"]</span>
                        }
                        else if (selectedVariant.StockQuantity <= 10)
                        {
                            <span class="text-green-600">@selectedVariant.StockQuantity @Loc["InStock"]</span>
                        }
                        else
                        {
                            <span class="text-green-600">@Loc["InStock"]</span>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Tabs Section -->
        <div class="border-b border-gray-200">
            <nav class="-mb-px flex space-x-8">
                <button type="button" 
                        @onclick="() => activeTab = TabType.Details"
                        class="py-2 px-1 border-b-2 font-medium text-sm @(activeTab == TabType.Details ? "border-amber-500 text-amber-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300")">
                    @Loc["ProductDetails"]
                </button>
                <button type="button" 
                        @onclick="() => activeTab = TabType.Reviews"
                        class="py-2 px-1 border-b-2 font-medium text-sm @(activeTab == TabType.Reviews ? "border-amber-500 text-amber-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300")">
                    @Loc["Reviews"] (@(reviewsResponse?.TotalCount ?? 0))
                </button>
                <button type="button" 
                        @onclick="() => activeTab = TabType.Shipping"
                        class="py-2 px-1 border-b-2 font-medium text-sm @(activeTab == TabType.Shipping ? "border-amber-500 text-amber-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300")">
                    @Loc["Shipping"]
                </button>
            </nav>
        </div>

        <!-- Tab Content -->
        <div class="py-8">
            @if (activeTab == TabType.Details)
            {
                <div class="prose max-w-none">
                    <h3 class="text-xl font-semibold mb-4">@Loc["ProductDetails"]</h3>
                    @if (!string.IsNullOrEmpty(GetLocalizedText(product.Description, product.DescriptionAr)))
                    {
                        <div class="mb-6">
                            @((MarkupString)GetLocalizedText(product.Description, product.DescriptionAr)!)
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(GetLocalizedText(product.Notes, product.NotesAr)))
                    {
                        <div class="mb-6">
                            <h4 class="text-lg font-medium mb-2">@Loc["AdditionalNotes"]</h4>
                            @((MarkupString)GetLocalizedText(product.Notes, product.NotesAr)!)
                        </div>
                    }

                    <!-- Product Specifications -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
                        <div>
                            <h4 class="text-lg font-medium mb-4">@Loc["Specifications"]</h4>
                            <dl class="space-y-2">
                                @if (!string.IsNullOrEmpty(product.Origin))
                                {
                                    <div class="flex">
                                        <dt class="font-medium text-gray-900 w-1/3">@Loc["Origin"]:</dt>
                                        <dd class="text-gray-700">@product.Origin</dd>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(product.RoastLevel))
                                {
                                    <div class="flex">
                                        <dt class="font-medium text-gray-900 w-1/3">@Loc["RoastLevel"]:</dt>
                                        <dd class="text-gray-700">@product.RoastLevel</dd>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(product.Process))
                                {
                                    <div class="flex">
                                        <dt class="font-medium text-gray-900 w-1/3">@Loc["Process"]:</dt>
                                        <dd class="text-gray-700">@product.Process</dd>
                                    </div>
                                }
                                @if (product.Altitude.HasValue)
                                {
                                    <div class="flex">
                                        <dt class="font-medium text-gray-900 w-1/3">@Loc["Altitude"]:</dt>
                                        <dd class="text-gray-700">@product.Altitude.Value m</dd>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(product.Variety))
                                {
                                    <div class="flex">
                                        <dt class="font-medium text-gray-900 w-1/3">@Loc["Variety"]:</dt>
                                        <dd class="text-gray-700">@product.Variety</dd>
                                    </div>
                                }
                            </dl>
                        </div>

                        <div>
                            <h4 class="text-lg font-medium mb-4">@Loc["Features"]</h4>
                            <ul class="space-y-2">
                                @if (product.IsOrganic)
                                {
                                    <li class="flex items-center">
                                        <svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                        @Loc["Organic"]
                                    </li>
                                }
                                @if (product.IsFairTrade)
                                {
                                    <li class="flex items-center">
                                        <svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                        @Loc["FairTrade"]
                                    </li>
                                }
                                @if (product.IsFeatured)
                                {
                                    <li class="flex items-center">
                                        <svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                        @Loc["Featured"]
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
            else if (activeTab == TabType.Reviews)
            {
                <div>
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold">@Loc["CustomerReviews"]</h3>
                        <button type="button" 
                                @onclick="OpenReviewModal"
                                class="px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700 transition-colors">
                            @Loc["WriteReview"]
                        </button>
                    </div>

                    @if (reviewsResponse != null)
                    {
                        <!-- Rating Summary -->
                        <div class="bg-gray-50 rounded-lg p-6 mb-8">
                            <div class="flex items-center justify-between">
                                <div>
                                    <div class="text-3xl font-bold text-gray-900">@reviewsResponse.AverageRating.ToString("F1")</div>
                                    <div class="flex items-center mt-1">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <svg class="w-5 h-5 @(i <= reviewsResponse.AverageRating ? "text-yellow-400" : "text-gray-300")" 
                                                 fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                            </svg>
                                        }
                                    </div>
                                    <div class="text-sm text-gray-600 mt-1">@reviewsResponse.TotalCount @Loc["ReviewsTotal"]</div>
                                </div>

                                <!-- Rating Breakdown -->
                                <div class="space-y-2">
                                    @for (int rating = 5; rating >= 1; rating--)
                                    {
                                        var count = reviewsResponse.RatingBreakdown.GetValueOrDefault(rating, 0);
                                        var percentage = reviewsResponse.TotalCount > 0 ? (count * 100.0 / reviewsResponse.TotalCount) : 0;
                                        
                                        <div class="flex items-center text-sm">
                                            <span class="w-3">@rating</span>
                                            <svg class="w-4 h-4 text-yellow-400 mx-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                            </svg>
                                            <div class="w-32 bg-gray-200 rounded-full h-2 mx-2">
                                                <div class="bg-yellow-400 h-2 rounded-full" style="width: @(percentage)%"></div>
                                            </div>
                                            <span class="w-10 text-right">@count</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Reviews List -->
                        @if (reviewsResponse.Reviews.Any())
                        {
                            <div class="space-y-6">
                                @foreach (var review in reviewsResponse.Reviews)
                                {
                                    <div class="border-b border-gray-200 pb-6 last:border-b-0">
                                        <div class="flex items-start justify-between mb-2">
                                            <div>
                                                <h4 class="font-medium text-gray-900">@review.CustomerName</h4>
                                                <div class="flex items-center mt-1">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <svg class="w-4 h-4 @(i <= review.Rating ? "text-yellow-400" : "text-gray-300")" 
                                                             fill="currentColor" viewBox="0 0 20 20">
                                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                        </svg>
                                                    }
                                                </div>
                                            </div>
                                            <span class="text-sm text-gray-500">@review.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(review.Title))
                                        {
                                            <h5 class="font-medium text-gray-900 mb-2">@review.Title</h5>
                                        }
                                        
                                        <p class="text-gray-700">@review.Content</p>
                                    </div>
                                }
                            </div>

                            @if (reviewsResponse.CurrentPage < reviewsResponse.TotalPages)
                            {
                                <div class="text-center mt-8">
                                    <button type="button" 
                                            @onclick="LoadMoreReviews"
                                            class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors">
                                        @Loc["LoadMoreReviews"]
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                </svg>
                                <h3 class="mt-2 text-sm font-medium text-gray-900">@Loc["NoReviews"]</h3>
                                <p class="mt-1 text-sm text-gray-500">@Loc["BeFirstReview"]</p>
                                <div class="mt-6">
                                    <button type="button" 
                                            @onclick="OpenReviewModal"
                                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-amber-600 hover:bg-amber-700">
                                        @Loc["WriteFirstReview"]
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
            else if (activeTab == TabType.Shipping)
            {
                <div>
                    <h3 class="text-xl font-semibold mb-6">@Loc["ShippingInformation"]</h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div>
                            <h4 class="text-lg font-medium mb-4">@Loc["DeliveryOptions"]</h4>
                            <div class="space-y-4">
                                <div class="flex items-start">
                                    <svg class="w-6 h-6 text-green-500 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                    </svg>
                                    <div>
                                        <h5 class="font-medium">@Loc["StandardDelivery"]</h5>
                                        <p class="text-sm text-gray-600">@Loc["StandardDeliveryDesc"]</p>
                                    </div>
                                </div>
                                
                                <div class="flex items-start">
                                    <svg class="w-6 h-6 text-blue-500 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                    <div>
                                        <h5 class="font-medium">@Loc["ExpressDelivery"]</h5>
                                        <p class="text-sm text-gray-600">@Loc["ExpressDeliveryDesc"]</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div>
                            <h4 class="text-lg font-medium mb-4">@Loc["ShippingPolicy"]</h4>
                            <div class="prose prose-sm max-w-none text-gray-600">
                                <ul>
                                    <li>@Loc["FreeShippingOver50"]</li>
                                    <li>@Loc["ProcessingTime"]</li>
                                    <li>@Loc["TrackingProvided"]</li>
                                    <li>@Loc["InsuredShipping"]</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<!-- Image Modal -->
@if (showImageModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-75" @onclick="CloseImageModal">
        <div class="relative max-w-4xl max-h-full">
            <img src="@currentImagePath" 
                 alt="@GetLocalizedText(product?.ImageAlt, product?.ImageAltAr)"
                 class="max-w-full max-h-full object-contain" />
            <button type="button" 
                    @onclick="CloseImageModal"
                    class="absolute top-4 right-4 text-white hover:text-gray-300">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
    </div>
}

<!-- Review Modal -->
@if (showReviewModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">@Loc["WriteReview"]</h3>
                    <button type="button" @onclick="CloseReviewModal" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(reviewSubmissionError))
                {
                    <div class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
                        <p class="text-red-800 text-sm">@reviewSubmissionError</p>
                    </div>
                }

                <EditForm Model="reviewSubmission" OnValidSubmit="SubmitReview">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <!-- Rating -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">@Loc["Rating"] *</label>
                            <div class="flex space-x-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    int rating = i; // Capture for closure
                                    <button type="button" 
                                            @onclick="() => reviewSubmission.Rating = rating"
                                            class="text-2xl @(i <= reviewSubmission.Rating ? "text-yellow-400" : "text-gray-300") hover:text-yellow-400">
                                        ★
                                    </button>
                                }
                            </div>
                            <ValidationMessage For="() => reviewSubmission.Rating" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">@Loc["Name"] *</label>
                            <InputText @bind-Value="reviewSubmission.CustomerName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500" />
                            <ValidationMessage For="() => reviewSubmission.CustomerName" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Email -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">@Loc["Email"] *</label>
                            <InputText @bind-Value="reviewSubmission.CustomerEmail" type="email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500" />
                            <ValidationMessage For="() => reviewSubmission.CustomerEmail" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Title -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">@Loc["ReviewTitle"] *</label>
                            <InputText @bind-Value="reviewSubmission.Title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500" placeholder="@Loc["ReviewTitlePlaceholder"]" />
                            <ValidationMessage For="() => reviewSubmission.Title" class="text-red-600 text-sm mt-1" />
                        </div>

                        <!-- Content -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">@Loc["YourReview"] *</label>
                            <InputTextArea @bind-Value="reviewSubmission.Content" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500" placeholder="@Loc["ReviewContentPlaceholder"]" />
                            <ValidationMessage For="() => reviewSubmission.Content" class="text-red-600 text-sm mt-1" />
                        </div>

                        <div class="flex space-x-3 pt-4">
                            <button type="submit" 
                                    disabled="@isSubmittingReview"
                                    class="flex-1 bg-amber-600 text-white px-4 py-2 rounded-md font-medium hover:bg-amber-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                                @if (isSubmittingReview)
                                {
                                    <span>@Loc["Submitting"]...</span>
                                }
                                else
                                {
                                    <span>@Loc["SubmitReview"]</span>
                                }
                            </button>
                            <button type="button" @onclick="CloseReviewModal" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors">
                                @Loc["Cancel"]
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@code {
    [Parameter] public int? Id { get; set; }
    [Parameter] public string? Slug { get; set; }

    private Product? product;
    private ProductVariant? selectedVariant;
    private string currentImagePath = string.Empty;
    private bool isLoading = true;
    private bool showImageModal = false;
    private bool showReviewModal = false;
    private bool isSubmittingReview = false;
    private bool isAddingToCart = false;
    private string? reviewSubmissionError;
    private ReviewsResponse? reviewsResponse;
    private int currentReviewPage = 1;
    
    private TabType activeTab = TabType.Details;
    private SubmitReviewRequest reviewSubmission = new();

    private enum TabType
    {
        Details,
        Reviews,
        Shipping
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isLoading) return;
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            product = null;
            reviewsResponse = null;
            StateHasChanged();

            // Load product by ID or slug
            if (Id.HasValue)
            {
                product = await ProductService.GetProductByIdAsync(Id.Value);
            }
            else if (!string.IsNullOrEmpty(Slug))
            {
                product = await ProductService.GetProductBySlugAsync(Slug);
            }

            if (product != null)
            {
                // Set initial image and variant
                currentImagePath = product.MainImage?.ImagePath ?? product.GalleryImages?.FirstOrDefault()?.ImagePath ?? "/images/no-image.jpg";
                selectedVariant = product.Variants?.FirstOrDefault(v => v.IsDefault) ?? product.Variants?.FirstOrDefault();
                
                // Load reviews
                await LoadReviews();
            }
        }
        catch (Exception ex)
        {
            // Log error
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadReviews()
    {
        if (product == null) return;

        try
        {
            reviewsResponse = await ReviewService.GetProductReviewsAsync(product.Id, 1, 10);
            currentReviewPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }

    private async Task LoadMoreReviews()
    {
        if (product == null || reviewsResponse == null) return;

        try
        {
            var nextPage = currentReviewPage + 1;
            var response = await ReviewService.GetProductReviewsAsync(product.Id, nextPage, 10);
            if (response != null && response.Reviews.Any())
            {
                reviewsResponse.Reviews.AddRange(response.Reviews);
                reviewsResponse.CurrentPage = response.CurrentPage;
                currentReviewPage = nextPage;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more reviews: {ex.Message}");
        }
    }

    private void SelectImage(string imagePath)
    {
        currentImagePath = imagePath;
        StateHasChanged();
    }

    private void SelectVariant(ProductVariant variant)
    {
        selectedVariant = variant;
        StateHasChanged();
    }

    private void OpenImageModal()
    {
        if (!string.IsNullOrEmpty(currentImagePath))
        {
            showImageModal = true;
            StateHasChanged();
        }
    }

    private void CloseImageModal()
    {
        showImageModal = false;
        StateHasChanged();
    }

    private void OpenReviewModal()
    {
        reviewSubmission = new SubmitReviewRequest();
        reviewSubmissionError = null;
        showReviewModal = true;
        StateHasChanged();
    }

    private void CloseReviewModal()
    {
        showReviewModal = false;
        reviewSubmissionError = null;
        StateHasChanged();
    }

    private async Task SubmitReview()
    {
        if (product == null) return;

        try
        {
            isSubmittingReview = true;
            reviewSubmissionError = null;
            StateHasChanged();

            var success = await ReviewService.SubmitReviewAsync(product.Id, reviewSubmission);
            
            if (success)
            {
                CloseReviewModal();
                // Show success message (you can implement a toast notification)
                await JSRuntime.InvokeVoidAsync("alert", Loc["ReviewSubmittedSuccess"]);
            }
            else
            {
                reviewSubmissionError = Loc["ReviewSubmissionError"];
            }
        }
        catch (Exception ex)
        {
            reviewSubmissionError = Loc["ReviewSubmissionError"];
            Console.WriteLine($"Error submitting review: {ex.Message}");
        }
        finally
        {
            isSubmittingReview = false;
            StateHasChanged();
        }
    }

    private string GetLocalizedProductName()
    {
        if (product == null) return string.Empty;
        return GetLocalizedText(product.Name, product.NameAr) ?? string.Empty;
    }

    private string? GetLocalizedText(string? englishText, string? arabicText)
    {
        var currentCulture = System.Globalization.CultureInfo.CurrentUICulture.Name;
        
        if (currentCulture.StartsWith("ar") && !string.IsNullOrEmpty(arabicText))
        {
            return arabicText;
        }
        
        return englishText;
    }

    private async Task AddToCart()
    {
        if (product == null || selectedVariant == null) return;

        // Check if variant is out of stock
        if (selectedVariant.StockQuantity <= 0)
        {
            ToastService.ShowError(Loc["OutOfStockMessage"]);
            return;
        }

        try
        {
            isAddingToCart = true;
            StateHasChanged();

            // Include variant size information in product name
            var productNameWithSize = $"{GetLocalizedProductName()} ({selectedVariant.Weight} {selectedVariant.WeightUnit})";
            var effectivePrice = selectedVariant.DiscountPrice ?? selectedVariant.Price;
            var variantInfo = $"{selectedVariant.Weight} {selectedVariant.WeightUnit}";

            await CartService.AddToCartAsync(
                product.Id,
                productNameWithSize,
                effectivePrice,
                currentImagePath,
                1,
                selectedVariant.Id,
                variantInfo
            );
            
            // Show success message with variant info
            var successMessage = string.Format(Loc["AddedToCartWithSizeSuccess"], 
                selectedVariant.Weight, 
                selectedVariant.WeightUnit);
            ToastService.ShowSuccess(successMessage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            ToastService.ShowError(Loc["AddToCartError"]);
        }
        finally
        {
            isAddingToCart = false;
            StateHasChanged();
        }
    }
}

<!-- Toast Component -->
<Toast />

<style>
    .prose p {
        margin-bottom: 1rem;
    }
    
    .prose:last-child {
        margin-bottom: 0;
    }
</style>