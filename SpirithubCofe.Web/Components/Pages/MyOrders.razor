@page "/orders"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout PublicLayout

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">My Orders</h1>
            <p class="mt-2 text-gray-600">Track and manage your coffee orders</p>
        </div>

        @if (orders.Any())
        {
            <!-- Orders List -->
            <div class="space-y-6">
                @foreach (var order in orders)
                {
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                        <!-- Order Header -->
                        <div class="px-6 py-4 border-b border-gray-200 sm:flex sm:items-center sm:justify-between">
                            <div class="flex-1 min-w-0">
                                <div class="flex items-center">
                                    <h3 class="text-lg font-medium text-gray-900">
                                        Order #@order.OrderNumber
                                    </h3>
                                    <span class="ml-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(order.Status)">
                                        @order.Status
                                    </span>
                                </div>
                                <div class="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:space-x-6">
                                    <div class="mt-2 flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                        </svg>
                                        @order.OrderDate.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="mt-2 flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"></path>
                                        </svg>
                                        @order.Total.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                    </div>
                                    @if (!string.IsNullOrEmpty(order.TrackingNumber))
                                    {
                                        <div class="mt-2 flex items-center text-sm text-gray-500">
                                            <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></path>
                                                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707L16 7.586A1 1 0 0015.414 7H14z"></path>
                                            </svg>
                                            Tracking: @order.TrackingNumber
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="mt-4 flex space-x-3 sm:mt-0 sm:ml-4">
                                <button @onclick="() => ViewOrderDetails(order.Id)" 
                                        class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                    View Details
                                </button>
                                @if (order.Status == "Delivered")
                                {
                                    <button @onclick="() => ReorderItems(order.Id)"
                                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                        Reorder
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Order Items Preview -->
                        <div class="px-6 py-4">
                            <div class="flow-root">
                                <ul role="list" class="-my-4 divide-y divide-gray-200">
                                    @foreach (var item in order.Items.Take(3))
                                    {
                                        <li class="flex py-4">
                                            <div class="flex-shrink-0 w-16 h-16">
                                                <img class="w-16 h-16 rounded-md object-cover" src="@item.ImageUrl" alt="@item.ProductName">
                                            </div>
                                            <div class="ml-4 flex-1">
                                                <div class="flex justify-between">
                                                    <div>
                                                        <h4 class="text-sm font-medium text-gray-900">@item.ProductName</h4>
                                                        <p class="mt-1 text-sm text-gray-500">Qty: @item.Quantity</p>
                                                    </div>
                                                    <p class="text-sm font-medium text-gray-900">
                                                        @item.Price.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                                    </p>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                    @if (order.Items.Count > 3)
                                    {
                                        <li class="py-4">
                                            <p class="text-sm text-gray-500 text-center">
                                                And @(order.Items.Count - 3) more item@(order.Items.Count - 3 > 1 ? "s" : "")...
                                            </p>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <!-- Order Progress (for shipped orders) -->
                        @if (order.Status == "Shipped" || order.Status == "Delivered")
                        {
                            <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0">
                                        @if (order.Status == "Delivered")
                                        {
                                            <svg class="h-6 w-6 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="h-6 w-6 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></path>
                                                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707L16 7.586A1 1 0 0015.414 7H14z"></path>
                                            </svg>
                                        }
                                    </div>
                                    <div class="ml-3">
                                        <p class="text-sm font-medium text-gray-900">
                                            @(order.Status == "Delivered" ? "Delivered" : "On the way")
                                        </p>
                                        <p class="text-sm text-gray-500">
                                            @(order.Status == "Delivered" ? $"Delivered on {order.DeliveredDate?.ToString("MMM dd")}" : "Expected delivery in 2-3 days")
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Pagination -->
            <div class="mt-8 flex justify-center">
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span class="sr-only">Previous</span>
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">1</button>
                    <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-orange-50 text-sm font-medium text-orange-600">2</button>
                    <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">3</button>
                    <button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span class="sr-only">Next</span>
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </nav>
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center py-16">
                <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M16 11V7a4 4 0 00-8 0v4M5 9h14a1 1 0 011 1v9a1 1 0 01-1 1H5a1 1 0 01-1-1v-9a1 1 0 011-1z"></path>
                </svg>
                <h3 class="mt-6 text-xl font-medium text-gray-900">No orders yet</h3>
                <p class="mt-2 text-gray-500">Start shopping for some delicious coffee to see your orders here!</p>
                <div class="mt-8">
                    <a href="/products" class="bg-orange-600 border border-transparent rounded-md shadow-sm py-3 px-6 text-base font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                        Shop Now
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Order> orders = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        // TODO: Load from actual orders service/API
        orders = new List<Order>
        {
            new Order
            {
                Id = 1,
                OrderNumber = "ORD-2024-001",
                OrderDate = DateTime.Now.AddDays(-5),
                Status = "Delivered",
                Total = 12.300m,
                TrackingNumber = "TRK123456789",
                DeliveredDate = DateTime.Now.AddDays(-1),
                Items = new List<OrderItem>
                {
                    new OrderItem { ProductName = "Ethiopian Yirgacheffe", Quantity = 2, Price = 4.900m, ImageUrl = "https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=400&h=400&fit=crop&crop=center" },
                    new OrderItem { ProductName = "Coffee Mug", Quantity = 1, Price = 2.500m, ImageUrl = "https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=400&h=400&fit=crop&crop=center" }
                }
            },
            new Order
            {
                Id = 2,
                OrderNumber = "ORD-2024-002",
                OrderDate = DateTime.Now.AddDays(-10),
                Status = "Shipped",
                Total = 8.900m,
                TrackingNumber = "TRK987654321",
                Items = new List<OrderItem>
                {
                    new OrderItem { ProductName = "Colombian Supremo", Quantity = 1, Price = 5.200m, ImageUrl = "https://images.unsplash.com/photo-1587734195503-904fca47e0df?w=400&h=400&fit=crop&crop=center" },
                    new OrderItem { ProductName = "French Press", Quantity = 1, Price = 3.700m, ImageUrl = "https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400&h=400&fit=crop&crop=center" }
                }
            },
            new Order
            {
                Id = 3,
                OrderNumber = "ORD-2024-003",
                OrderDate = DateTime.Now.AddDays(-15),
                Status = "Processing",
                Total = 15.600m,
                Items = new List<OrderItem>
                {
                    new OrderItem { ProductName = "Premium Coffee Set", Quantity = 1, Price = 15.600m, ImageUrl = "https://images.unsplash.com/photo-1442512595331-e89e73853f31?w=400&h=400&fit=crop&crop=center" }
                }
            }
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Processing" => "bg-yellow-100 text-yellow-800",
            "Shipped" => "bg-blue-100 text-blue-800",
            "Delivered" => "bg-green-100 text-green-800",
            "Cancelled" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private async Task ViewOrderDetails(int orderId)
    {
        // TODO: Navigate to order details page
        // NavigationManager.NavigateTo($"/order-details/{orderId}");
    }

    private async Task ReorderItems(int orderId)
    {
        // TODO: Add all items from this order to cart
        // then navigate to cart
    }

    public class Order
    {
        public int Id { get; set; }
        public string OrderNumber { get; set; } = "";
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } = "";
        public decimal Total { get; set; }
        public string? TrackingNumber { get; set; }
        public DateTime? DeliveredDate { get; set; }
        public List<OrderItem> Items { get; set; } = new();
    }

    public class OrderItem
    {
        public string ProductName { get; set; } = "";
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; } = "";
    }
}