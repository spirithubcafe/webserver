@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using SpirithubCofe.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@layout PublicLayout
@inject CartService CartService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<div>
    <title>Checkout - SpirithubCofe</title>
</div>

<!-- Check if cart is empty -->
@if (!CartService.Items.Any())
{
    <div class="min-h-screen bg-gradient-to-br from-orange-50 via-white to-orange-50 flex items-center justify-center">
        <div class="text-center max-w-md mx-auto px-4">
            <div class="w-32 h-32 mx-auto mb-8 bg-gradient-to-br from-orange-100 to-orange-200 rounded-full flex items-center justify-center">
                <svg class="w-16 h-16 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5-6m0 0h14.5M17 21a2 2 0 100-4 2 2 0 000 4zM9 21a2 2 0 100-4 2 2 0 000 4z"/>
                </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
            <p class="text-gray-600 mb-8">Add some coffee to your cart before proceeding to checkout.</p>
            <a href="/products" class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-orange-600 to-orange-700 text-white font-semibold rounded-xl hover:from-orange-700 hover:to-orange-800 transition-all duration-300 transform hover:scale-105 shadow-lg">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                </svg>
                Browse Products
            </a>
        </div>
    </div>
}
else
{
    <div class="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50">
        <!-- Header with Progress -->
        <div class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                <div class="flex items-center justify-between mb-6">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">Secure Checkout</h1>
                        <p class="text-gray-600 mt-1">Complete your coffee order securely</p>
                    </div>
                    <div class="hidden md:flex items-center space-x-2 text-sm text-gray-500">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <span>SSL Secured</span>
                    </div>
                </div>

                <!-- Progress Steps -->
                <div class="flex items-center justify-center">
                    <ol class="flex items-center w-full max-w-2xl">
                        <li class="flex items-center w-full relative">
                            <div class="flex items-center">
                                <div class="w-10 h-10 @(currentStep >= 1 ? "bg-orange-600" : "bg-gray-300") border-2 border-transparent rounded-full flex items-center justify-center">
                                    @if (currentStep > 1)
                                    {
                                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <span class="text-white font-semibold">1</span>
                                    }
                                </div>
                                <span class="ml-3 text-sm font-medium @(currentStep >= 1 ? "text-orange-600" : "text-gray-500")">Shipping</span>
                            </div>
                            @if (currentStep > 1)
                            {
                                <div class="w-full h-1 ml-4 bg-orange-600"></div>
                            }
                            else
                            {
                                <div class="w-full h-1 ml-4 bg-gray-300"></div>
                            }
                        </li>
                        <li class="flex items-center w-full relative">
                            <div class="flex items-center">
                                <div class="w-10 h-10 @(currentStep >= 2 ? "bg-orange-600" : "bg-gray-300") border-2 border-transparent rounded-full flex items-center justify-center">
                                    @if (currentStep > 2)
                                    {
                                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <span class="text-white font-semibold">2</span>
                                    }
                                </div>
                                <span class="ml-3 text-sm font-medium @(currentStep >= 2 ? "text-orange-600" : "text-gray-500")">Payment</span>
                            </div>
                            @if (currentStep > 2)
                            {
                                <div class="w-full h-1 ml-4 bg-orange-600"></div>
                            }
                            else
                            {
                                <div class="w-full h-1 ml-4 bg-gray-300"></div>
                            }
                        </li>
                        <li class="flex items-center">
                            <div class="w-10 h-10 @(currentStep >= 3 ? "bg-orange-600" : "bg-gray-300") border-2 border-transparent rounded-full flex items-center justify-center">
                                @if (currentStep > 3)
                                {
                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                    </svg>
                                }
                                else
                                {
                                    <span class="text-white font-semibold">3</span>
                                }
                            </div>
                            <span class="ml-3 text-sm font-medium @(currentStep >= 3 ? "text-orange-600" : "text-gray-500")">Review</span>
                        </li>
                    </ol>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="lg:grid lg:grid-cols-12 lg:gap-x-12 xl:gap-x-16">
                <!-- Left Column - Forms -->
                <div class="lg:col-span-7">
                    @if (currentStep == 1)
                    {
                        <!-- Shipping Information -->
                        <div class="bg-white rounded-2xl shadow-xl overflow-hidden mb-8">
                            <div class="px-6 py-4 bg-gradient-to-r from-orange-600 to-orange-700 text-white">
                                <h2 class="text-xl font-bold flex items-center">
                                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                                    </svg>
                                    Shipping Information
                                </h2>
                            </div>
                            
                            <div class="p-6">
                                <EditForm Model="shippingAddress" OnValidSubmit="HandleShippingSubmit">
                                    <DataAnnotationsValidator />
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div class="md:col-span-2">
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
                                            <InputText @bind-Value="shippingAddress.FullName" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="Enter your full name" />
                                            <ValidationMessage For="() => shippingAddress.FullName" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
                                            <InputText @bind-Value="shippingAddress.Phone" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="+968 XX XXX XXX" />
                                            <ValidationMessage For="() => shippingAddress.Phone" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                                            <InputText @bind-Value="shippingAddress.Email" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="your@email.com" />
                                            <ValidationMessage For="() => shippingAddress.Email" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div class="md:col-span-2">
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 1 *</label>
                                            <InputText @bind-Value="shippingAddress.Line1" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="Street address, building number" />
                                            <ValidationMessage For="() => shippingAddress.Line1" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div class="md:col-span-2">
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Address Line 2 (Optional)</label>
                                            <InputText @bind-Value="shippingAddress.Line2" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="Apartment, suite, etc." />
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">City *</label>
                                            <InputSelect @bind-Value="shippingAddress.City" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors">
                                                <option value="">Select City</option>
                                                <option value="Muscat">Muscat</option>
                                                <option value="Salalah">Salalah</option>
                                                <option value="Nizwa">Nizwa</option>
                                                <option value="Sur">Sur</option>
                                                <option value="Sohar">Sohar</option>
                                                <option value="Rustaq">Rustaq</option>
                                                <option value="Buraimi">Buraimi</option>
                                                <option value="Ibri">Ibri</option>
                                            </InputSelect>
                                            <ValidationMessage For="() => shippingAddress.City" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Governorate *</label>
                                            <InputSelect @bind-Value="shippingAddress.State" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors">
                                                <option value="">Select Governorate</option>
                                                <option value="Muscat">Muscat</option>
                                                <option value="Dhofar">Dhofar</option>
                                                <option value="Ad Dakhiliyah">Ad Dakhiliyah</option>
                                                <option value="Ash Sharqiyah North">Ash Sharqiyah North</option>
                                                <option value="Ash Sharqiyah South">Ash Sharqiyah South</option>
                                                <option value="Al Batinah North">Al Batinah North</option>
                                                <option value="Al Batinah South">Al Batinah South</option>
                                                <option value="Al Buraimi">Al Buraimi</option>
                                                <option value="Ad Dhahirah">Ad Dhahirah</option>
                                                <option value="Al Wusta">Al Wusta</option>
                                                <option value="Musandam">Musandam</option>
                                            </InputSelect>
                                            <ValidationMessage For="() => shippingAddress.State" class="text-red-600 text-sm mt-1" />
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                            <InputText @bind-Value="shippingAddress.PostalCode" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="XXX" />
                                        </div>
                                    </div>
                                    
                                    <div class="mt-6 flex items-center justify-between">
                                        <div class="flex items-center">
                                            <input type="checkbox" @bind="saveAddress" class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded">
                                            <label class="ml-2 block text-sm text-gray-900">Save this address for future orders</label>
                                        </div>
                                        
                                        <button type="submit" class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-orange-600 to-orange-700 text-white font-semibold rounded-xl hover:from-orange-700 hover:to-orange-800 transition-all duration-300 transform hover:scale-105 shadow-lg">
                                            <span>Continue to Payment</span>
                                            <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                                            </svg>
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                    else if (currentStep == 2)
                    {
                        <!-- Payment Information -->
                        <div class="bg-white rounded-2xl shadow-xl overflow-hidden mb-8">
                            <div class="px-6 py-4 bg-gradient-to-r from-orange-600 to-orange-700 text-white">
                                <h2 class="text-xl font-bold flex items-center">
                                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                                    </svg>
                                    Payment Method
                                </h2>
                            </div>
                            
                            <div class="p-6">
                                <!-- Bank Muscat Option -->
                                <div class="border border-gray-200 rounded-xl p-4 mb-4 @(paymentMethod == "bankmuscat" ? "ring-2 ring-orange-500 border-orange-500" : "")">
                                    <label class="flex items-center cursor-pointer">
                                        <input type="radio" name="payment" value="bankmuscat" @onchange="@(() => paymentMethod = "bankmuscat")" class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300">
                                        <div class="ml-3 flex items-center justify-between w-full">
                                            <div class="flex items-center">
                                                <div class="w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center mr-3">
                                                    <span class="text-white text-xs font-bold">BM</span>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">Bank Muscat</div>
                                                    <div class="text-xs text-gray-500">Secure online banking payment</div>
                                                </div>
                                            </div>
                                            <div class="flex items-center text-xs text-green-600 font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                                </svg>
                                                Recommended
                                            </div>
                                        </div>
                                    </label>
                                </div>

                                <!-- Cash on Delivery Option -->
                                <div class="border border-gray-200 rounded-xl p-4 mb-6 @(paymentMethod == "cod" ? "ring-2 ring-orange-500 border-orange-500" : "")">
                                    <label class="flex items-center cursor-pointer">
                                        <input type="radio" name="payment" value="cod" @onchange="@(() => paymentMethod = "cod")" class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300">
                                        <div class="ml-3 flex items-center justify-between w-full">
                                            <div class="flex items-center">
                                                <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                                                    <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"/>
                                                    </svg>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">Cash on Delivery</div>
                                                    <div class="text-xs text-gray-500">Pay when you receive your order</div>
                                                </div>
                                            </div>
                                            <div class="text-xs text-gray-500">+ 0.500 OMR</div>
                                        </div>
                                    </label>
                                </div>

                                <div class="flex items-center justify-between">
                                    <button @onclick="PreviousStep" class="inline-flex items-center px-6 py-3 border-2 border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all duration-300">
                                        <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"/>
                                        </svg>
                                        Back to Shipping
                                    </button>
                                    
                                    <button @onclick="NextStep" disabled="@(string.IsNullOrEmpty(paymentMethod))" class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-orange-600 to-orange-700 text-white font-semibold rounded-xl hover:from-orange-700 hover:to-orange-800 transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed">
                                        <span>Review Order</span>
                                        <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (currentStep == 3)
                    {
                        <!-- Order Review -->
                        <div class="bg-white rounded-2xl shadow-xl overflow-hidden mb-8">
                            <div class="px-6 py-4 bg-gradient-to-r from-orange-600 to-orange-700 text-white">
                                <h2 class="text-xl font-bold flex items-center">
                                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                                    </svg>
                                    Review Your Order
                                </h2>
                            </div>
                            
                            <div class="p-6 space-y-6">
                                <!-- Shipping Information Review -->
                                <div class="border border-gray-200 rounded-xl p-4">
                                    <div class="flex items-center justify-between mb-3">
                                        <h3 class="font-semibold text-gray-900">Shipping Address</h3>
                                        <button @onclick="EditShipping" class="text-orange-600 hover:text-orange-700 text-sm font-medium">Edit</button>
                                    </div>
                                    <div class="text-sm text-gray-600">
                                        <p class="font-medium text-gray-900">@shippingAddress.FullName</p>
                                        <p>@shippingAddress.Line1</p>
                                        @if (!string.IsNullOrEmpty(shippingAddress.Line2))
                                        {
                                            <p>@shippingAddress.Line2</p>
                                        }
                                        <p>@shippingAddress.City, @shippingAddress.State @shippingAddress.PostalCode</p>
                                        <p>@shippingAddress.Phone</p>
                                        <p>@shippingAddress.Email</p>
                                    </div>
                                </div>

                                <!-- Payment Method Review -->
                                <div class="border border-gray-200 rounded-xl p-4">
                                    <div class="flex items-center justify-between mb-3">
                                        <h3 class="font-semibold text-gray-900">Payment Method</h3>
                                        <button @onclick="EditPayment" class="text-orange-600 hover:text-orange-700 text-sm font-medium">Edit</button>
                                    </div>
                                    <div class="text-sm text-gray-600">
                                        @if (paymentMethod == "bankmuscat")
                                        {
                                            <div class="flex items-center">
                                                <div class="w-6 h-6 bg-red-500 rounded flex items-center justify-center mr-2">
                                                    <span class="text-white text-xs font-bold">BM</span>
                                                </div>
                                                <span>Bank Muscat Online Payment</span>
                                            </div>
                                        }
                                        else if (paymentMethod == "cod")
                                        {
                                            <div class="flex items-center">
                                                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mr-2">
                                                    <svg class="w-3 h-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"/>
                                                    </svg>
                                                </div>
                                                <span>Cash on Delivery (+0.500 OMR)</span>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="flex items-center justify-between">
                                    <button @onclick="PreviousStep" class="inline-flex items-center px-6 py-3 border-2 border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all duration-300">
                                        <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"/>
                                        </svg>
                                        Back to Payment
                                    </button>
                                    
                                    <button @onclick="PlaceOrder" disabled="@isProcessing" class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white font-bold rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed">
                                        @if (isProcessing)
                                        {
                                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                            </svg>
                                            <span>Processing...</span>
                                        }
                                        else
                                        {
                                            <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                            </svg>
                                            <span>Place Order (@GetFinalTotal().ToString("F3") OMR)</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Right Column - Order Summary -->
                <div class="lg:col-span-5">
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden sticky top-8">
                        <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                            <h2 class="text-xl font-bold text-gray-900">Order Summary</h2>
                        </div>
                        
                        <div class="p-6">
                            <!-- Cart Items -->
                            <div class="space-y-4 mb-6">
                                @foreach (var item in CartService.Items)
                                {
                                    <div class="flex items-center space-x-4 p-3 bg-gray-50 rounded-xl">
                                        <div class="flex-shrink-0 w-16 h-16 bg-gradient-to-br from-orange-100 to-orange-200 rounded-lg overflow-hidden">
                                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                                            {
                                                <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-full object-cover">
                                            }
                                            else
                                            {
                                                <div class="w-full h-full flex items-center justify-center">
                                                    <svg class="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <h3 class="text-sm font-medium text-gray-900 truncate">@item.Name</h3>
                                            <p class="text-sm text-gray-500">Qty: @item.Quantity</p>
                                        </div>
                                        <div class="text-sm font-semibold text-gray-900">
                                            @((item.Price * item.Quantity).ToString("F3")) OMR
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Order Totals -->
                            <div class="space-y-3 py-4 border-t border-gray-200">
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-600">Subtotal</span>
                                    <span class="font-medium">@CartService.TotalPrice.ToString("F3") OMR</span>
                                </div>
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-600">Shipping</span>
                                    <span class="font-medium">@GetShippingCost().ToString("F3") OMR</span>
                                </div>
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-600">Tax (5%)</span>
                                    <span class="font-medium">@GetTax().ToString("F3") OMR</span>
                                </div>
                                @if (paymentMethod == "cod")
                                {
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">COD Fee</span>
                                        <span class="font-medium">0.500 OMR</span>
                                    </div>
                                }
                                
                                <div class="border-t border-gray-200 pt-3">
                                    <div class="flex justify-between items-center">
                                        <span class="text-lg font-bold text-gray-900">Total</span>
                                        <span class="text-2xl font-bold text-orange-600">@GetFinalTotal().ToString("F3") OMR</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Security Badges -->
                            <div class="pt-4 border-t border-gray-200">
                                <div class="flex items-center justify-center space-x-4 text-xs text-gray-500 mb-3">
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                        SSL Encrypted
                                    </div>
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10"/>
                                        </svg>
                                        Free Returns
                                    </div>
                                </div>
                                <div class="text-center">
                                    <span class="text-xs text-gray-400">Secured by Bank Muscat</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int currentStep = 1;
    private ShippingAddress shippingAddress = new();
    private string paymentMethod = "";
    private bool saveAddress = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await CartService.InitializeAsync();
        
        // Redirect if cart is empty
        if (!CartService.Items.Any())
        {
            return; // Let the UI handle the empty cart display
        }
    }

    private async Task HandleShippingSubmit()
    {
        if (IsValidShippingAddress())
        {
            currentStep = 2;
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsValidShippingAddress()
    {
        return !string.IsNullOrWhiteSpace(shippingAddress.FullName) &&
               !string.IsNullOrWhiteSpace(shippingAddress.Phone) &&
               !string.IsNullOrWhiteSpace(shippingAddress.Email) &&
               !string.IsNullOrWhiteSpace(shippingAddress.Line1) &&
               !string.IsNullOrWhiteSpace(shippingAddress.City) &&
               !string.IsNullOrWhiteSpace(shippingAddress.State);
    }

    private async Task NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task EditShipping()
    {
        currentStep = 1;
        await InvokeAsync(StateHasChanged);
    }

    private async Task EditPayment()
    {
        currentStep = 2;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PlaceOrder()
    {
        if (isProcessing) return;
        
        isProcessing = true;
        StateHasChanged();
        
        try
        {
            // Simulate order processing
            await Task.Delay(2000);
            
            // Clear cart after successful order
            await CartService.ClearCartAsync();
            
            // Show success message and redirect
            await JSRuntime.InvokeVoidAsync("alert", "🎉 Order placed successfully! You will receive a confirmation email shortly.");
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error placing order: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private decimal GetShippingCost()
    {
        return 2.500m; // Standard shipping cost
    }

    private decimal GetTax()
    {
        return CartService.TotalPrice * 0.05m; // 5% tax
    }

    private decimal GetCODFee()
    {
        return paymentMethod == "cod" ? 0.500m : 0m;
    }

    private decimal GetFinalTotal()
    {
        return CartService.TotalPrice + GetShippingCost() + GetTax() + GetCODFee();
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    public class ShippingAddress
    {
        public string FullName { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Email { get; set; } = "";
        public string Line1 { get; set; } = "";
        public string Line2 { get; set; } = "";
        public string City { get; set; } = "";
        public string State { get; set; } = "";
        public string PostalCode { get; set; } = "";
        public string Country { get; set; } = "OM";
    }
}