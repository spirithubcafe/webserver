@page "/products"
@page "/products/{category?}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout SpirithubCofe.Web.Components.Layout.PublicLayout
@using SpirithubCofe.Web.Services
@using SpirithubCofe.Web.Components.Shared
@using SpirithubCofe.Domain.Entities
@using Microsoft.AspNetCore.Components.Web
@inject CartService CartService
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@inject ToastService ToastService
@implements IDisposable

<PageTitle>Products - SpirithubCofe</PageTitle>

<!-- Toast Component -->
<Toast />

<!-- Hero Section -->
<section class="relative bg-gradient-to-br from-amber-50 to-amber-100 py-16">
    <div class="absolute inset-0 bg-black bg-opacity-5"></div>
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                Premium <span class="text-amber-600">Coffee</span> Collection
            </h1>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto">
                Discover our carefully curated selection of single-origin beans and signature blends from around the world.
            </p>
        </div>
    </div>
</section>

<!-- Filters and Search -->
<section class="py-8 bg-white border-b border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
            <!-- Search Bar -->
            <div class="flex-1 max-w-md">
                <div class="relative">
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                    <input
                        type="text"
                        @bind="searchQuery"
                        @oninput="OnSearchInput"
                        placeholder="@Localizer["SearchCoffee"]"
                        class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                    />
                </div>
            </div>
            
            <!-- Category Filter -->
            <div class="flex items-center space-x-4">
                <label class="text-sm font-medium text-gray-700">@Localizer["Category"]:</label>
                <select @bind="selectedCategory" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 min-w-48">
                    <option value="">@Localizer["AllCategories"]</option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.Name">@GetCategoryName(cat)</option>
                    }
                </select>
            </div>
            
            <!-- Sort Options -->
            <div class="flex items-center space-x-4">
                <label class="text-sm font-medium text-gray-700">@Localizer["SortBy"]:</label>
                <select @bind="sortOption" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-amber-500 focus:border-amber-500">
                    <option value="name">@Localizer["NameAZ"]</option>
                    <option value="price-low">@Localizer["PriceLowToHigh"]</option>
                    <option value="price-high">@Localizer["PriceHighToLow"]</option>
                    <option value="popular">@Localizer["MostPopular"]</option>
                </select>
            </div>
        </div>
        
        <!-- Active Filters -->
        @if (!string.IsNullOrEmpty(selectedCategory) || !string.IsNullOrEmpty(searchQuery))
        {
            <div class="mt-4 flex flex-wrap items-center gap-2">
                <span class="text-sm text-gray-600">@Localizer["ActiveFilters"]:</span>
                @if (!string.IsNullOrEmpty(selectedCategory))
                {
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-amber-100 text-amber-800">
                        @Localizer["Category"]: @GetCategoryDisplayName(selectedCategory)
                        <button @onclick="() => ClearCategoryFilter()" class="ml-2 hover:text-amber-900">
                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </span>
                }
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-amber-100 text-amber-800">
                        @Localizer["Search"]: "@searchQuery"
                        <button @onclick="ClearSearch" class="ml-2 hover:text-amber-900">
                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </span>
                }
                <button @onclick="ClearAllFilters" class="text-sm text-amber-600 hover:text-amber-700 font-medium">@Localizer["ClearAll"]</button>
            </div>
        }
    </div>
</section>

<!-- Products Grid -->
<section class="py-16 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        @if (filteredProducts.Any())
        {
            <!-- Results Count -->
            <div class="mb-8">
                <p class="text-gray-600">
                    @Localizer["Showing"] @filteredProducts.Count() @Localizer["Of"] @allProducts.Count() @Localizer["Products"]
                </p>
            </div>
            
            <!-- Products Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-8">
                @foreach (var product in filteredProducts)
                {
                    <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 flex flex-col">
                        <!-- Product Image -->
                        <div @onclick="() => NavigateToProduct(product.Id)" class="block relative aspect-square bg-gradient-to-br from-amber-50 to-amber-100 cursor-pointer">
                            @if (product.GalleryImages?.Any() == true)
                            {
                                <img 
                                    src="@product.GalleryImages.First().ImagePath" 
                                    alt="@product.Name"
                                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                                />
                            }
                            else
                            {
                                <div class="w-full h-full flex items-center justify-center">
                                    <svg class="w-20 h-20 text-amber-300" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path>
                                    </svg>
                                </div>
                            }
                        </div>
                        
                        <!-- Quick Add Button -->
                        <button 
                            @onclick="() => QuickAddToCart(product.Id)"
                            class="absolute top-4 right-4 bg-white bg-opacity-90 hover:bg-opacity-100 rounded-full p-2 shadow-lg transition-all duration-200 hover:scale-110 z-10"
                            title="Quick add to cart"
                        >
                            <svg class="w-5 h-5 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                        </button>
                        
                        <!-- Product Info -->
                        <div class="p-6 flex flex-col h-full">
                            <div class="flex-grow">
                                <div class="flex items-start justify-between mb-2">
                                    <div @onclick="() => NavigateToProduct(product.Id)" class="hover:text-amber-600 transition-colors cursor-pointer">
                                        <h3 class="text-lg font-semibold text-gray-900 line-clamp-2">@GetProductName(product)</h3>
                                    </div>
                                </div>
                                
                                <p class="text-sm text-amber-600 mb-4">@(product.Category != null ? GetCategoryName(product.Category) : "")</p>
                                
                                <!-- Price -->
                                <div class="mb-4">
                                    <div class="text-2xl font-bold text-gray-900">
                                        @{
                                            var variant = product.Variants?.FirstOrDefault();
                                            var price = variant?.Price ?? 0;
                                        }
                                        @price.ToString("0.000") OMR
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Buttons at bottom -->
                            <div class="mt-auto space-y-3">
                                <!-- Quantity Selector and Add to Cart -->
                                <div class="flex items-center space-x-3">
                                    <div class="flex items-center border border-gray-300 rounded-lg">
                                        <button 
                                            @onclick="() => DecreaseQuantity(product.Id)"
                                            class="px-3 py-2 hover:bg-gray-100 transition-colors"
                                            disabled="@(GetQuantity(product.Id) <= 1)"
                                        >
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                            </svg>
                                        </button>
                                        <span class="px-4 py-2 font-medium">@GetQuantity(product.Id)</span>
                                        <button 
                                            @onclick="() => IncreaseQuantity(product.Id)"
                                            class="px-3 py-2 hover:bg-gray-100 transition-colors"
                                        >
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                            </svg>
                                        </button>
                                    </div>
                                    
                                    <button 
                                        @onclick="() => AddToCart(product.Id)"
                                        class="flex-1 bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center space-x-2"
                                    >
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v5m0-5h4m-4 0V8m0 5H9"></path>
                                        </svg>
                                        <span>@Localizer["AddToCart"]</span>
                                    </button>
                                </div>
                                
                                <!-- View Details Button -->
                                <div>
                                    <button @onclick="() => NavigateToProduct(product.Id)"
                                       class="block w-full text-center px-4 py-2 border border-amber-600 text-amber-600 hover:bg-amber-50 rounded-lg font-medium transition-colors duration-200">
                                        @Localizer["ViewDetails"]
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- No Products Found -->
            <div class="text-center py-16">
                <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-.82-5.56-2.17C5.56 11.82 3.61 9.99 2 8.5 3.61 6.01 5.56 4.18 6.44 2.83A7.962 7.962 0 0112 1c2.34 0 4.29.82 5.56 2.17C18.44 4.18 20.39 6.01 22 8.5c-1.61 1.49-3.56 3.32-4.44 4.67z"></path>
                </svg>
                <h3 class="mt-4 text-lg font-medium text-gray-900">@Localizer["NoProductsFound"]</h3>
                <p class="mt-2 text-gray-600">@Localizer["TryAdjustingFilters"]</p>
                <button 
                    @onclick="ClearAllFilters"
                    class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-amber-700 bg-amber-100 hover:bg-amber-200 transition-colors duration-200"
                >
                    @Localizer["ClearAllFilters"]
                </button>
            </div>
        }
    </div>
</section>

<!-- Featured Categories -->
<section class="py-16 bg-white">
    <div class="max-full mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-center">
            <div class="text-center mb-12">
                <h2 class="text-3xl font-bold text-gray-900 mb-4">@Localizer["FeaturedCategories"]</h2>
                <p class="text-xl text-gray-600">@Localizer["ExplorePremiumCollections"]</p>
            </div>
        </div>
        
        <div class="flex justify-center">
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6 max-w-4xl">
                @foreach (var category in categories.Take(8))
                {
                    <button 
                        @onclick="() => SetCategoryFilter(category.Name)"
                        class="group bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 overflow-hidden"
                    >
                        <div class="aspect-square bg-gradient-to-br from-amber-50 to-amber-100 p-6 flex items-center justify-center">
                            @if (!string.IsNullOrEmpty(category.ImagePath))
                            {
                                <img 
                                    src="@category.ImagePath" 
                                    alt="@GetCategoryName(category)"
                                    class="w-full h-full object-cover rounded-lg"
                                />
                            }
                            else
                            {
                                <svg class="w-12 h-12 text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path>
                                </svg>
                            }
                        </div>
                        <div class="p-4 text-center">
                            <h3 class="font-semibold text-gray-900 group-hover:text-amber-600 transition-colors">@GetCategoryName(category)</h3>
                            <p class="text-sm text-gray-600 mt-1">@category.Products?.Count() @Localizer["Products"]</p>
                        </div>
                    </button>
                }
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter] public string? Category { get; set; }
    
    private string searchQuery = string.Empty;
    private string selectedCategory = string.Empty;
    private string sortOption = "name";
    private System.Timers.Timer? searchTimer;
    private readonly Dictionary<int, int> productQuantities = new();
    private bool shouldScrollToTop = false;
    private bool _disposed = false;
    
    private List<Category> categories = new();
    private List<Product> allProducts = new();
    
    private IEnumerable<Product> filteredProducts => GetFilteredProducts();
    
    protected override async Task OnInitializedAsync()
    {
        // Load categories
        categories = await CategoryService.GetAllCategoriesAsync();
        
        // Load products
        allProducts = await ProductService.GetAllProductsAsync();
        
        // Check for category in route parameter
        if (!string.IsNullOrEmpty(Category))
        {
            var categoryFromRoute = categories.FirstOrDefault(c => 
                c.Slug.Equals(Category, StringComparison.OrdinalIgnoreCase));
            if (categoryFromRoute != null)
            {
                selectedCategory = categoryFromRoute.Name;
            }
        }
        
        // Initialize quantities for all products
        foreach (var product in allProducts)
        {
            productQuantities[product.Id] = 1;
        }
        
        // Initialize search timer
        searchTimer = new System.Timers.Timer(500); // 500ms delay
        searchTimer.Elapsed += async (sender, e) => await InvokeAsync(() =>
        {
            if (!_disposed)
            {
                StateHasChanged();
            }
        });
        searchTimer.AutoReset = false;

        // Initialize CartService
        await CartService.InitializeAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender || shouldScrollToTop)
        {
            try
            {
                // Scroll to top of page when component is first rendered or when parameters changed
                // Scroll to top - removed JavaScript dependency
                shouldScrollToTop = false;
            }
            catch (InvalidOperationException)
            {
                // Ignore JS interop exceptions during prerendering
                shouldScrollToTop = false;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        // Set flag to scroll to top when parameters change (e.g., when category is selected)
        if (!string.IsNullOrEmpty(Category))
        {
            shouldScrollToTop = true;
        }
    }
    
    private int GetQuantity(int productId)
    {
        return productQuantities.GetValueOrDefault(productId, 1);
    }
    
    private void IncreaseQuantity(int productId)
    {
        if (productQuantities.ContainsKey(productId))
        {
            if (productQuantities[productId] < 99) // Set max limit
            {
                productQuantities[productId]++;
            }
        }
        else
        {
            productQuantities[productId] = 2;
        }
        StateHasChanged();
    }
    
    private void DecreaseQuantity(int productId)
    {
        if (productQuantities.ContainsKey(productId))
        {
            if (productQuantities[productId] > 1)
            {
                productQuantities[productId]--;
            }
        }
        StateHasChanged();
    }
    
    private async Task AddToCart(int productId)
    {
        var product = allProducts.FirstOrDefault(p => p.Id == productId);
        if (product == null) return;
        
        var quantity = GetQuantity(productId);
        var variant = product.Variants?.FirstOrDefault();
        var price = variant?.Price ?? 0;
        
        // Add to cart using CartService
        await CartService.AddToCartAsync(
            productId: product.Id,
            name: product.Name,
            price: price,
            imageUrl: product.GalleryImages?.FirstOrDefault()?.ImagePath ?? "",
            quantity: quantity
        );
        
        // Show success message using Toast component
        ToastService.ShowSuccess($"Added {quantity} x {product.Name} to cart!");
        
        // Reset quantity to 1 after adding to cart
        productQuantities[productId] = 1;
        StateHasChanged();
    }

    private async Task QuickAddToCart(int productId)
    {
        var product = allProducts.FirstOrDefault(p => p.Id == productId);
        if (product == null) return;
        
        var variant = product.Variants?.FirstOrDefault();
        var price = variant?.Price ?? 0;
        
        // Quick add with quantity 1
        await CartService.AddToCartAsync(
            productId: product.Id,
            name: product.Name,
            price: price,
            imageUrl: product.GalleryImages?.FirstOrDefault()?.ImagePath ?? "",
            quantity: 1
        );
        
        // Show quick success message
        ToastService.ShowSuccess($"Added {product.Name} to cart!");
        StateHasChanged();
    }
    
    private IEnumerable<Product> GetFilteredProducts()
    {
        var products = allProducts.AsEnumerable();
        
        // Filter by selected category
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            products = products.Where(p => p.Category?.Name == selectedCategory);
        }
        
        // Filter by search query
        if (!string.IsNullOrEmpty(searchQuery))
        {
            products = products.Where(p => 
                p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (p.Description != null && p.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                p.Category?.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true);
        }
        
        // Sort products
        return sortOption switch
        {
            "name" => products.OrderBy(p => p.Name),
            "price-low" => products.OrderBy(p => p.Variants?.FirstOrDefault()?.Price ?? 0),
            "price-high" => products.OrderByDescending(p => p.Variants?.FirstOrDefault()?.Price ?? 0),
            "popular" => products.OrderByDescending(p => p.Id), // Mock popularity by ID
            _ => products.OrderBy(p => p.Name)
        };
    }
    
    private void SetCategoryFilter(string categoryName)
    {
        selectedCategory = categoryName;
        shouldScrollToTop = true;
        StateHasChanged();
    }
    
    private void ClearCategoryFilter()
    {
        selectedCategory = string.Empty;
        StateHasChanged();
    }
    
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        
        // Reset and start timer for debounced search
        searchTimer?.Stop();
        searchTimer?.Start();
    }
    
    private void ClearSearch()
    {
        searchQuery = string.Empty;
        StateHasChanged();
    }
    
    private void ClearAllFilters()
    {
        selectedCategory = string.Empty;
        searchQuery = string.Empty;
        StateHasChanged();
    }
    
    private string GetCategoryName(Category category)
    {
        var currentCulture = System.Globalization.CultureInfo.CurrentUICulture.Name;
        return currentCulture.StartsWith("ar") && !string.IsNullOrEmpty(category.NameAr) 
            ? category.NameAr 
            : category.Name;
    }
    
    private string GetCategoryDisplayName(string categoryName)
    {
        var category = categories.FirstOrDefault(c => c.Name == categoryName);
        return category != null ? GetCategoryName(category) : categoryName;
    }
    
    private string GetProductName(Product product)
    {
        var currentCulture = System.Globalization.CultureInfo.CurrentUICulture.Name;
        return currentCulture.StartsWith("ar") && !string.IsNullOrEmpty(product.NameAr) 
            ? product.NameAr 
            : product.Name;
    }
    
    private string GetProductDescription(Product product)
    {
        var currentCulture = System.Globalization.CultureInfo.CurrentUICulture.Name;
        return currentCulture.StartsWith("ar") && !string.IsNullOrEmpty(product.DescriptionAr) 
            ? product.DescriptionAr 
            : product.Description ?? "";
    }
    
    private void NavigateToProduct(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }
    
    public void Dispose()
    {
        _disposed = true;
        searchTimer?.Dispose();
    }
}