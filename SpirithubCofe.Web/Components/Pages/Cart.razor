@page "/cart"
@layout PublicLayout
@using SpirithubCofe.Web.Services
@inject CartService CartService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<div class="min-h-screen bg-gradient-to-br from-orange-50 via-white to-orange-50">
    <!-- Header Section -->
    <div class="bg-gradient-to-r from-orange-600 to-orange-700 text-white py-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">Shopping Cart</h1>
                    <p class="mt-2 text-orange-100">@CartService.Items.Count item@(CartService.Items.Count != 1 ? "s" :
                                                "") in your cart</p>
                </div>
                <div class="hidden md:flex items-center space-x-4">
                    <div class="bg-white/20 rounded-lg px-4 py-2">
                        <span class="text-sm font-medium">Subtotal</span>
                        <div class="text-xl font-bold">@CartService.TotalPrice.ToString("F3") OMR</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        @if (!CartService.Items.Any())
        {
            <!-- Empty Cart State -->
            <div class="text-center py-16">
                <div class="max-w-md mx-auto">
                    <div class="w-32 h-32 mx-auto mb-8 bg-gradient-to-br from-orange-100 to-orange-200 rounded-full flex items-center justify-center">
                        <svg class="w-16 h-16 text-orange-400" viewBox="0 0 24 24" fill="none">
                            <path d="M7.5 18C8.32843 18 9 18.6716 9 19.5C9 20.3284 8.32843 21 7.5 21C6.67157 21 6 20.3284 6 19.5C6 18.6716 6.67157 18 7.5 18Z" stroke="currentColor" stroke-width="1.5" />
                            <path d="M16.5 18.0001C17.3284 18.0001 18 18.6716 18 19.5001C18 20.3285 17.3284 21.0001 16.5 21.0001C15.6716 21.0001 15 20.3285 15 19.5001C15 18.6716 15.6716 18.0001 16.5 18.0001Z" stroke="currentColor" stroke-width="1.5" />
                            <path d="M2.26121 3.09184L2.50997 2.38429H2.50997L2.26121 3.09184ZM2.24876 2.29246C1.85799 2.15507 1.42984 2.36048 1.29246 2.75124C1.15507 3.14201 1.36048 3.57016 1.75124 3.70754L2.24876 2.29246ZM4.58584 4.32298L5.20507 3.89983V3.89983L4.58584 4.32298ZM5.88772 14.5862L5.34345 15.1022H5.34345L5.88772 14.5862ZM20.6578 9.88275L21.3923 10.0342L21.3933 10.0296L20.6578 9.88275ZM20.158 12.3075L20.8926 12.4589L20.158 12.3075ZM20.7345 6.69708L20.1401 7.15439L20.7345 6.69708ZM19.1336 15.0504L18.6598 14.469L19.1336 15.0504ZM5.70808 9.76V7.03836H4.20808V9.76H5.70808ZM2.50997 2.38429L2.24876 2.29246L1.75124 3.70754L2.01245 3.79938L2.50997 2.38429ZM10.9375 16.25H16.2404V14.75H10.9375V16.25ZM5.70808 7.03836C5.70808 6.3312 5.7091 5.7411 5.65719 5.26157C5.60346 4.76519 5.48705 4.31247 5.20507 3.89983L3.96661 4.74613C4.05687 4.87822 4.12657 5.05964 4.1659 5.42299C4.20706 5.8032 4.20808 6.29841 4.20808 7.03836H5.70808ZM2.01245 3.79938C2.68006 4.0341 3.11881 4.18965 3.44166 4.34806C3.74488 4.49684 3.87855 4.61727 3.96661 4.74613L5.20507 3.89983C4.92089 3.48397 4.54304 3.21763 4.10241 3.00143C3.68139 2.79485 3.14395 2.60719 2.50997 2.38429L2.01245 3.79938ZM4.20808 9.76C4.20808 11.2125 4.22171 12.2599 4.35876 13.0601C4.50508 13.9144 4.79722 14.5261 5.34345 15.1022L6.43198 14.0702C6.11182 13.7325 5.93913 13.4018 5.83723 12.8069C5.72607 12.1578 5.70808 11.249 5.70808 9.76H4.20808ZM10.9375 14.75C9.52069 14.75 8.53763 14.7482 7.79696 14.6432C7.08215 14.5418 6.70452 14.3576 6.43198 14.0702L5.34345 15.1022C5.93731 15.7286 6.69012 16.0013 7.58636 16.1283C8.45674 16.2518 9.56535 16.25 10.9375 16.25V14.75ZM4.95808 6.87H17.0888V5.37H4.95808V6.87ZM19.9232 9.73135L19.4235 12.1561L20.8926 12.4589L21.3923 10.0342L19.9232 9.73135ZM17.0888 6.87C17.9452 6.87 18.6989 6.871 19.2937 6.93749C19.5893 6.97053 19.8105 7.01643 19.9659 7.07105C20.1273 7.12776 20.153 7.17127 20.1401 7.15439L21.329 6.23978C21.094 5.93436 20.7636 5.76145 20.4632 5.65587C20.1567 5.54818 19.8101 5.48587 19.4604 5.44678C18.7646 5.369 17.9174 5.37 17.0888 5.37V6.87ZM21.3933 10.0296C21.5625 9.18167 21.7062 8.47024 21.7414 7.90038C21.7775 7.31418 21.7108 6.73617 21.329 6.23978L20.1401 7.15439C20.2021 7.23508 20.2706 7.38037 20.2442 7.80797C20.2168 8.25191 20.1002 8.84478 19.9223 9.73595L21.3933 10.0296ZM16.2404 16.25C17.0021 16.25 17.6413 16.2513 18.1566 16.1882C18.6923 16.1227 19.1809 15.9794 19.6074 15.6318L18.6598 14.469C18.5346 14.571 18.3571 14.6525 17.9744 14.6994C17.5712 14.7487 17.0397 14.75 16.2404 14.75V16.25ZM19.4235 12.1561C19.2621 12.9389 19.1535 13.4593 19.0238 13.8442C18.9007 14.2095 18.785 14.367 18.6598 14.469L19.6074 15.6318C20.0339 15.2842 20.2729 14.8346 20.4453 14.3232C20.6111 13.8312 20.7388 13.2049 20.8926 12.4589L19.4235 12.1561Z" fill="currentColor" />
                        </svg>
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h3>
                    <p class="text-gray-600 mb-8">Looks like you haven't added any items to your cart yet. Start shopping to
                        fill it up!</p>
                    <a href="/"
                        class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-orange-600 to-orange-700 text-white font-semibold rounded-xl hover:from-orange-700 hover:to-orange-800 transition-all duration-300 transform hover:scale-105 shadow-lg">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        Continue Shopping
                    </a>
                </div>
            </div>
        }
        else
        {
            <!-- Cart Items Grid -->
            <div class="lg:grid lg:grid-cols-12 lg:gap-8">
                <!-- Cart Items -->
                <div class="lg:col-span-8">
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
                        <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                            <h2 class="text-xl font-bold text-gray-900">Cart Items</h2>
                        </div>

                        <div class="divide-y divide-gray-100">
                            @foreach (var item in CartService.Items)
                            {
                                <div class="p-6 hover:bg-gray-50 transition-colors duration-200">
                                    <div class="flex items-center space-x-6">
                                        <!-- Product Image -->
                                        <div
                                            class="flex-shrink-0 w-24 h-24 bg-gradient-to-br from-orange-100 to-orange-200 rounded-xl overflow-hidden shadow-md">
                                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                                            {
                                                <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-full object-cover">
                                            }
                                            else
                                            {
                                                <div class="w-full h-full flex items-center justify-center">
                                                    <svg class="w-8 h-8 text-orange-400" fill="none" stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                    </svg>
                                                </div>
                                            }
                                        </div>

                                        <!-- Product Details -->
                                        <div class="flex-1 min-w-0">
                                            <h3 class="text-lg font-semibold text-gray-900 truncate">@item.Name</h3>
                                            <div class="flex items-center space-x-2 mt-1">
                                                <p class="text-sm text-gray-500">Product ID: @item.ProductId</p>
                                                @if (!string.IsNullOrEmpty(item.VariantInfo))
                                                {
                                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                                        @item.VariantInfo
                                                    </span>
                                                }
                                            </div>
                                            <div class="mt-2">
                                                <span
                                                    class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    In Stock
                                                </span>
                                            </div>
                                        </div>

                                        <div class="flex items-center space-x-3">
                                            <div class="flex items-center bg-gray-100 rounded-xl">
                                                <button @onclick="async () => await DecreaseQuantity(item.ProductId, item.VariantId)"
                                                    class="p-2 text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-l-xl transition-colors">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                            d="M20 12H4" />
                                                    </svg>
                                                </button>
                                                <div class="px-4 py-2 text-center min-w-[3rem] font-semibold text-gray-900">
                                                    @item.Quantity
                                                </div>
                                                <button @onclick="async () => await IncreaseQuantity(item.ProductId, item.VariantId)"
                                                    class="p-2 text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-r-xl transition-colors">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                            d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Price & Actions -->
                                        <div class="text-right">
                                            <div class="text-lg font-bold text-gray-900">
                                                @((item.Price * item.Quantity).ToString("F3")) OMR
                                            </div>
                                            <div class="text-sm text-gray-500 mt-1">
                                                @item.Price.ToString("F3") OMR each
                                            </div>
                                            <button @onclick="async () => await RemoveFromCart(item.ProductId, item.VariantId)"
                                                class="mt-3 inline-flex items-center text-sm text-red-600 hover:text-red-800 font-medium transition-colors">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                                Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Shopping Actions -->
                    <div class="mt-6 flex flex-col sm:flex-row gap-4">
                        <a href="/"
                            class="flex-1 inline-flex items-center justify-center px-6 py-3 border-2 border-orange-200 text-orange-700 font-semibold rounded-xl hover:bg-orange-50 transition-all duration-300">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                            Continue Shopping
                        </a>
                        <button @onclick="async () => await ClearCart()"
                            class="flex-1 inline-flex items-center justify-center px-6 py-3 border-2 border-red-200 text-red-700 font-semibold rounded-xl hover:bg-red-50 transition-all duration-300">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            Clear Cart
                        </button>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="lg:col-span-4 mt-8 lg:mt-0">
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden sticky top-8">
                        <div class="px-6 py-4 bg-gradient-to-r from-orange-600 to-orange-700 text-white">
                            <h2 class="text-xl font-bold">Order Summary</h2>
                        </div>

                        <div class="p-6 space-y-4">
                            <!-- Items Summary -->
                            <div class="space-y-3">
                                @foreach (var item in CartService.Items)
                                {
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">@item.Name × @item.Quantity</span>
                                        <span class="font-medium">@((item.Price * item.Quantity).ToString("F3")) OMR</span>
                                    </div>
                                }
                            </div>

                            <div class="border-t border-gray-200 pt-4 space-y-3">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Subtotal</span>
                                    <span class="font-medium">@CartService.TotalPrice.ToString("F3") OMR</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Shipping</span>
                                    <span class="font-medium text-green-600">Free</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Tax</span>
                                    <span class="font-medium">@GetTax().ToString("F3") OMR</span>
                                </div>

                                <div class="border-t border-gray-200 pt-3">
                                    <div class="flex justify-between items-center">
                                        <span class="text-lg font-bold text-gray-900">Total</span>
                                        <span class="text-2xl font-bold text-orange-600">@GetTotal().ToString("F3")
                                            OMR</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Checkout Button -->
                            <div class="pt-4">
                                <button @onclick="ProceedToCheckout"
                                    class="w-full bg-gradient-to-r from-orange-600 to-orange-700 text-white font-bold py-4 px-6 rounded-xl hover:from-orange-700 hover:to-orange-800 transition-all duration-300 transform hover:scale-105 shadow-lg">
                                    <div class="flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                        </svg>
                                        Secure Checkout
                                    </div>
                                </button>
                            </div>

                            <!-- Security Badges -->
                            <div class="pt-4 border-t border-gray-200">
                                <div class="flex items-center justify-center space-x-4 text-xs text-gray-500">
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1 text-green-600" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        Secure Payment
                                    </div>
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1 text-green-600" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
                                        </svg>
                                        Free Delivery
                                    </div>
                                </div>
                                <div class="text-center mt-2">
                                    <span class="text-xs text-gray-400">Protected by Bank Muscat SSL</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await CartService.InitializeAsync();
        CartService.OnCartChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Scroll to top of page when component is first rendered
                await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
            }
            catch (InvalidOperationException)
            {
                // Ignore JS interop exceptions during prerendering
            }
        }
    }

    private async Task IncreaseQuantity(int productId, int? variantId = null)
    {
        var item = CartService.Items.FirstOrDefault(x => x.ProductId == productId && x.VariantId == variantId);
        if (item != null)
        {
            await CartService.UpdateQuantityAsync(productId, item.Quantity + 1, variantId);
        }
    }

    private async Task DecreaseQuantity(int productId, int? variantId = null)
    {
        var item = CartService.Items.FirstOrDefault(x => x.ProductId == productId && x.VariantId == variantId);
        if (item != null && item.Quantity > 1)
        {
            await CartService.UpdateQuantityAsync(productId, item.Quantity - 1, variantId);
        }
    }

    private async Task RemoveFromCart(int productId, int? variantId = null)
    {
        await CartService.RemoveFromCartAsync(productId, variantId);
    }

    private async Task ClearCart()
    {
        await CartService.ClearCartAsync();
    }

    private async Task ProceedToCheckout()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/checkout");
        }
        else
        {
            Navigation.NavigateTo("/Account/Login?returnUrl=%2Fcheckout");
        }
    }

    private decimal GetTax()
    {
        return CartService.TotalPrice * 0.05m; // 5% tax
    }

    private decimal GetTotal()
    {
        return CartService.TotalPrice + GetTax();
    }

    public void Dispose()
    {
        CartService.OnCartChanged -= StateHasChanged;
    }
}