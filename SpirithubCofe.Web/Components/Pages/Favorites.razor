@page "/favorites"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout PublicLayout

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">My Favorites</h1>
            <p class="mt-2 text-gray-600">Your saved coffee products and accessories</p>
        </div>

        @if (favoriteItems.Any())
        {
            <!-- Filter and Sort -->
            <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div class="flex items-center space-x-4">
                    <select class="block rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm">
                        <option>All Categories</option>
                        <option>Coffee Beans</option>
                        <option>Equipment</option>
                        <option>Accessories</option>
                    </select>
                </div>
                <div class="mt-4 sm:mt-0 flex items-center space-x-4">
                    <span class="text-sm text-gray-500">@favoriteItems.Count item@(favoriteItems.Count != 1 ? "s" : "")</span>
                    <select class="block rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm">
                        <option>Sort by: Recently Added</option>
                        <option>Sort by: Price: Low to High</option>
                        <option>Sort by: Price: High to Low</option>
                        <option>Sort by: Name</option>
                    </select>
                </div>
            </div>

            <!-- Favorites Grid -->
            <div class="grid grid-cols-1 gap-y-10 sm:grid-cols-2 gap-x-6 lg:grid-cols-3 xl:grid-cols-4 xl:gap-x-8">
                @foreach (var item in favoriteItems)
                {
                    <div class="group relative bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Product Image -->
                        <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden bg-gray-200 group-hover:opacity-75 transition-opacity">
                            <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-48 object-cover object-center">
                            
                            <!-- Favorite Heart Button -->
                            <button @onclick="() => RemoveFromFavorites(item.Id)" 
                                    class="absolute top-3 right-3 p-2 rounded-full bg-white/80 backdrop-blur-sm text-red-500 hover:bg-white hover:text-red-600 transition-colors">
                                <svg class="h-5 w-5 fill-current" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </div>

                        <!-- Product Info -->
                        <div class="p-4">
                            <div class="flex justify-between items-start">
                                <div class="flex-1">
                                    <h3 class="text-sm font-medium text-gray-900">
                                        <a href="/products/@item.ProductId" class="hover:text-orange-600 transition-colors">
                                            @item.Name
                                        </a>
                                    </h3>
                                    <p class="mt-1 text-sm text-gray-500">@item.Category</p>
                                    @if (!string.IsNullOrEmpty(item.Description))
                                    {
                                        <p class="mt-2 text-sm text-gray-600 line-clamp-2">@item.Description</p>
                                    }
                                </div>
                            </div>
                            
                            <div class="mt-4 flex items-center justify-between">
                                <div class="flex items-center">
                                    <span class="text-lg font-semibold text-gray-900">
                                        @item.Price.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                    </span>
                                    @if (item.OriginalPrice > item.Price)
                                    {
                                        <span class="ml-2 text-sm text-gray-500 line-through">
                                            @item.OriginalPrice.ToString("C", new System.Globalization.CultureInfo("ar-OM"))
                                        </span>
                                    }
                                </div>
                                @if (item.IsInStock)
                                {
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        In Stock
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        Out of Stock
                                    </span>
                                }
                            </div>

                            <!-- Added Date -->
                            <div class="mt-3 flex items-center text-xs text-gray-500">
                                <svg class="flex-shrink-0 mr-1.5 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                </svg>
                                Added @item.AddedDate.ToString("MMM dd, yyyy")
                            </div>

                            <!-- Action Buttons -->
                            <div class="mt-4 flex space-x-3">
                                @if (item.IsInStock)
                                {
                                    <button @onclick="() => AddToCart(item.ProductId)" 
                                            class="flex-1 bg-orange-600 border border-transparent rounded-md py-2 px-4 text-sm font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                                        Add to Cart
                                    </button>
                                }
                                else
                                {
                                    <button @onclick="() => NotifyWhenAvailable(item.ProductId)"
                                            class="flex-1 bg-gray-200 border border-gray-300 rounded-md py-2 px-4 text-sm font-medium text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors">
                                        Notify Me
                                    </button>
                                }
                                <button @onclick="() => ShareProduct(item.ProductId)"
                                        class="px-3 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Load More Button -->
            <div class="mt-12 text-center">
                <button class="bg-white border border-gray-300 rounded-md py-3 px-8 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                    Load More Favorites
                </button>
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center py-16">
                <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
                <h3 class="mt-6 text-xl font-medium text-gray-900">No favorites yet</h3>
                <p class="mt-2 text-gray-500">Start browsing our coffee collection and save your favorite products here!</p>
                <div class="mt-8 space-y-4">
                    <a href="/products" class="bg-orange-600 border border-transparent rounded-md shadow-sm py-3 px-6 text-base font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors inline-block">
                        Browse Coffee Products
                    </a>
                    <div>
                        <p class="text-sm text-gray-500">
                            <svg class="inline h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                            </svg>
                            Tip: Click the heart icon on any product to add it to your favorites
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<FavoriteItem> favoriteItems = new();

    protected override void OnInitialized()
    {
        LoadFavorites();
    }

    private void LoadFavorites()
    {
        // TODO: Load from actual favorites service/API
        favoriteItems = new List<FavoriteItem>
        {
            new FavoriteItem
            {
                Id = 1,
                ProductId = 1,
                Name = "Ethiopian Yirgacheffe",
                Category = "Coffee Beans",
                Description = "Light roast with floral and citrus notes, perfect for pour-over brewing.",
                Price = 4.900m,
                OriginalPrice = 5.200m,
                ImageUrl = "https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=400&h=400&fit=crop&crop=center",
                IsInStock = true,
                AddedDate = DateTime.Now.AddDays(-3)
            },
            new FavoriteItem
            {
                Id = 2,
                ProductId = 5,
                Name = "Premium Espresso Machine",
                Category = "Equipment",
                Description = "Professional-grade espresso machine for home brewing enthusiasts.",
                Price = 299.000m,
                ImageUrl = "https://images.unsplash.com/photo-1611854779393-1b2da9d400ac?w=400&h=400&fit=crop&crop=center",
                IsInStock = false,
                AddedDate = DateTime.Now.AddDays(-7)
            },
            new FavoriteItem
            {
                Id = 3,
                ProductId = 3,
                Name = "Colombian Supremo",
                Category = "Coffee Beans",
                Description = "Rich and full-bodied coffee with notes of chocolate and caramel.",
                Price = 5.200m,
                ImageUrl = "https://images.unsplash.com/photo-1587734195503-904fca47e0df?w=400&h=400&fit=crop&crop=center",
                IsInStock = true,
                AddedDate = DateTime.Now.AddDays(-10)
            },
            new FavoriteItem
            {
                Id = 4,
                ProductId = 7,
                Name = "Ceramic Coffee Mug Set",
                Category = "Accessories",
                Description = "Beautiful handcrafted ceramic mugs, perfect for your morning coffee ritual.",
                Price = 8.500m,
                ImageUrl = "https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=400&h=400&fit=crop&crop=center",
                IsInStock = true,
                AddedDate = DateTime.Now.AddDays(-14)
            }
        };
    }

    private void RemoveFromFavorites(int favoriteId)
    {
        favoriteItems.RemoveAll(item => item.Id == favoriteId);
        // TODO: Remove from database/service
        StateHasChanged();
    }

    private void AddToCart(int productId)
    {
        // TODO: Add product to cart
        // Show success notification
    }

    private void NotifyWhenAvailable(int productId)
    {
        // TODO: Set up notification for when product is back in stock
        // Show confirmation message
    }

    private void ShareProduct(int productId)
    {
        // TODO: Implement product sharing (social media, email, etc.)
        // Or copy link to clipboard
    }

    public class FavoriteItem
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public decimal OriginalPrice { get; set; }
        public string ImageUrl { get; set; } = "";
        public bool IsInStock { get; set; }
        public DateTime AddedDate { get; set; }
    }
}