@page "/admin/pages/faq"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using SpirithubCofe.Application.Services
@using SpirithubCofe.Application.DTOs
@using SpirithubCofe.Web.Components.Shared
@inject IFAQService FAQService

@rendermode InteractiveServer

<div class="min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 py-8">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-semibold text-gray-900">FAQ Management</h1>
                    <p class="text-sm text-gray-600 mt-1">إدارة الأسئلة الشائعة • Manage frequently asked questions</p>
                </div>
                <div class="flex gap-3">
                    <button @onclick="ShowAddFAQModal" 
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors">
                        Add FAQ
                    </button>
                    <button @onclick="ShowAddCategoryModal" 
                            class="px-4 py-2 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 text-sm font-medium rounded-lg transition-colors">
                        Add Category
                    </button>
                </div>
            </div>
        </div>

        <!-- Stats -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <div class="bg-white p-4 rounded-lg border border-gray-200">
                <div class="text-2xl font-bold text-gray-900">@faqs.Count</div>
                <div class="text-sm text-gray-600">Total FAQs</div>
            </div>
            <div class="bg-white p-4 rounded-lg border border-gray-200">
                <div class="text-2xl font-bold text-gray-900">@categories.Count</div>
                <div class="text-sm text-gray-600">Categories</div>
            </div>
            <div class="bg-white p-4 rounded-lg border border-gray-200">
                <div class="text-2xl font-bold text-green-600">@faqs.Count(f => f.IsActive)</div>
                <div class="text-sm text-gray-600">Active</div>
            </div>
            <div class="bg-white p-4 rounded-lg border border-gray-200">
                <div class="text-2xl font-bold text-orange-500">@faqs.Count(f => !f.IsActive)</div>
                <div class="text-sm text-gray-600">Inactive</div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
            <!-- Tabs -->
            <div class="border-b border-gray-200">
                <nav class="flex">
                    <button @onclick="@(() => SetActiveTab("faqs"))" 
                            class="@(activeTab == "faqs" ? "border-b-2 border-blue-500 text-blue-600" : "text-gray-500 hover:text-gray-700") px-6 py-3 text-sm font-medium">
                        FAQs
                    </button>
                    <button @onclick="@(() => SetActiveTab("categories"))" 
                            class="@(activeTab == "categories" ? "border-b-2 border-blue-500 text-blue-600" : "text-gray-500 hover:text-gray-700") px-6 py-3 text-sm font-medium">
                        Categories
                    </button>
                </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
                @if (isLoading)
                {
                    <div class="flex justify-center py-12">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                    </div>
                }
                else
                {
                    @if (activeTab == "faqs")
                    {
                        <!-- Search -->
                        <div class="mb-6 flex gap-4">
                            <input type="text" placeholder="Search FAQs..." 
                                   @oninput="OnSearchChanged"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <select @onchange="OnCategoryFilterChanged" 
                                    class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">All Categories</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.NameEn</option>
                                }
                            </select>
                        </div>

                        <!-- FAQs Table -->
                        <div class="overflow-x-auto">
                            <table class="min-w-full table-auto">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Question</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                        <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @if (filteredFAQs.Any())
                                    {
                                        @foreach (var faq in filteredFAQs)
                                        {
                                            <tr class="hover:bg-gray-50">
                                                <td class="px-4 py-4">
                                                    <div class="font-medium text-gray-900">@faq.QuestionEn</div>
                                                    @if (!string.IsNullOrEmpty(faq.QuestionAr))
                                                    {
                                                        <div class="text-sm text-gray-500 mt-1" dir="rtl">@faq.QuestionAr</div>
                                                    }
                                                </td>
                                                <td class="px-4 py-4 text-sm text-gray-600">
                                                    @(categories.FirstOrDefault(c => c.Id == faq.CategoryId)?.NameEn ?? "No Category")
                                                </td>
                                                <td class="px-4 py-4">
                                                    <span class="@(faq.IsActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") px-2 py-1 text-xs font-medium rounded-full">
                                                        @(faq.IsActive ? "Active" : "Inactive")
                                                    </span>
                                                </td>
                                                <td class="px-4 py-4 text-right space-x-2">
                                                    <button @onclick="() => EditFAQ(faq)" 
                                                            class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                                        Edit
                                                    </button>
                                                    <button @onclick="() => ToggleFAQStatus(faq)" 
                                                            class="text-yellow-600 hover:text-yellow-800 text-sm font-medium">
                                                        @(faq.IsActive ? "Deactivate" : "Activate")
                                                    </button>
                                                    <button @onclick="() => DeleteFAQ(faq)" 
                                                            class="text-red-600 hover:text-red-800 text-sm font-medium">
                                                        Delete
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" class="px-4 py-8 text-center text-gray-500">No FAQs found</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    
                    @if (activeTab == "categories")
                    {
                        <!-- Categories Grid -->
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            @foreach (var category in categories)
                            {
                                <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                                    <div class="flex justify-between items-start mb-2">
                                        <h3 class="font-medium text-gray-900">@category.NameEn</h3>
                                        <div class="flex gap-1">
                                            <button @onclick="() => EditCategory(category)" 
                                                    class="text-blue-600 hover:text-blue-800 text-sm">Edit</button>
                                            <button @onclick="() => DeleteCategory(category)" 
                                                    class="text-red-600 hover:text-red-800 text-sm">Delete</button>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(category.NameAr))
                                    {
                                        <div class="text-sm text-gray-600 mb-2" dir="rtl">@category.NameAr</div>
                                    }
                                    @if (!string.IsNullOrEmpty(category.Description))
                                    {
                                        <p class="text-sm text-gray-600 mb-2">@category.Description</p>
                                    }
                                    <div class="text-xs text-gray-500">@category.FAQCount FAQs</div>
                                </div>
                            }
                            
                            @if (!categories.Any())
                            {
                                <div class="col-span-full text-center py-8 text-gray-500">No categories found</div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- FAQ Modal -->
@if (showFAQModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">
                    @(isEditingFAQ ? "Edit FAQ" : "Add New FAQ")
                </h2>
            </div>
            
            <form @onsubmit="SaveFAQ" @onsubmit:preventDefault="true">
                <div class="p-6 space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Question (English) *</label>
                            <input type="text" @bind="editingFAQ.QuestionEn" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">السؤال (عربي)</label>
                            <input type="text" @bind="editingFAQ.QuestionAr" dir="rtl"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Answer (English) *</label>
                            <textarea @bind="editingFAQ.AnswerEn" rows="4" required
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">الجواب (عربي)</label>
                            <textarea @bind="editingFAQ.AnswerAr" rows="4" dir="rtl"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                            <select @bind="editingFAQ.CategoryId" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Select Category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.NameEn</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Order</label>
                            <input type="number" @bind="editingFAQ.Order" min="1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div class="flex items-center">
                            <label class="inline-flex items-center">
                                <input type="checkbox" @bind="editingFAQ.IsActive" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                <span class="ml-2 text-sm text-gray-700">Active</span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="p-6 border-t border-gray-200 flex justify-end gap-3">
                    <button type="button" @onclick="CloseFAQModal" 
                            class="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" disabled="@isLoadingFAQ"
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg disabled:opacity-50">
                        @if (isLoadingFAQ)
                        {
                            <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                        }
                        @(isEditingFAQ ? "Update" : "Create")
                    </button>
                </div>
            </form>
        </div>
    </div>
}

<!-- Category Modal -->
@if (showCategoryModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-lg max-w-md w-full">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">
                    @(isEditingCategory ? "Edit Category" : "Add New Category")
                </h2>
            </div>
            
            <form @onsubmit="SaveCategory" @onsubmit:preventDefault="true">
                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Name (English) *</label>
                        <input type="text" @bind="editingCategory.NameEn" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">الاسم (عربي)</label>
                        <input type="text" @bind="editingCategory.NameAr" dir="rtl"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                </div>
                
                <div class="p-6 border-t border-gray-200 flex justify-end gap-3">
                    <button type="button" @onclick="CloseCategoryModal" 
                            class="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" disabled="@isLoadingCategory"
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg disabled:opacity-50">
                        @if (isLoadingCategory)
                        {
                            <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                        }
                        @(isEditingCategory ? "Update" : "Create")
                    </button>
                </div>
            </form>
        </div>
    </div>
}

<!-- Delete FAQ Confirmation Modal -->
@if (showDeleteConfirm && faqToDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Confirm Delete</h3>
                <p class="text-gray-600 mb-6">
                    Are you sure you want to delete '<strong>@faqToDelete.QuestionEn</strong>'?
                    This action cannot be undone.
                </p>
                <div class="flex justify-end gap-3">
                    <button type="button" @onclick="CancelDelete" 
                            class="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="button" @onclick="ConfirmDelete"
                            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Category Confirmation Modal -->
@if (showDeleteCategoryConfirm && categoryToDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Confirm Delete Category</h3>
                <p class="text-gray-600 mb-6">
                    Are you sure you want to delete '<strong>@categoryToDelete.NameEn</strong>'?
                    This will affect all FAQs in this category and cannot be undone.
                </p>
                <div class="flex justify-end gap-3">
                    <button type="button" @onclick="CancelDeleteCategory" 
                            class="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="button" @onclick="ConfirmDeleteCategory"
                            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg">
                        Delete Category
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Error Message -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50">
        <span class="block sm:inline">@errorMessage</span>
        <button @onclick="() => errorMessage = null" class="float-right ml-4 text-red-500 hover:text-red-700">
            ×
        </button>
    </div>
}

@code {
    private bool isLoading = true;
    private string activeTab = "faqs";
    private string searchTerm = "";
    private int? categoryFilter = null;

    // FAQ Modal
    private bool showFAQModal = false;
    private bool isLoadingFAQ = false;
    private bool isEditingFAQ = false;
    private int editingFAQId = 0;
    private CreateFAQDto editingFAQ = new();

    // Category Modal
    private bool showCategoryModal = false;
    private bool isLoadingCategory = false;
    private bool isEditingCategory = false;
    private int editingCategoryId = 0;
    private CreateFAQCategoryDto editingCategory = new();
    
    // Delete Confirmations
    private bool showDeleteConfirm = false;
    private bool showDeleteCategoryConfirm = false;
    private FAQDto? faqToDelete = null;
    private FAQCategoryDto? categoryToDelete = null;
    private string? errorMessage = null;

    // Data
    private List<FAQDto> faqs = new();
    private List<FAQCategoryDto> categories = new();

    private IEnumerable<FAQDto> filteredFAQs => faqs
        .Where(f => string.IsNullOrEmpty(searchTerm) || 
                   f.QuestionEn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   (!string.IsNullOrEmpty(f.QuestionAr) && f.QuestionAr.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        .Where(f => !categoryFilter.HasValue || f.CategoryId == categoryFilter.Value)
        .OrderBy(f => f.Order)
        .ThenBy(f => f.QuestionEn);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            faqs = (await FAQService.GetAllFAQsAsync()).ToList();
            categories = (await FAQService.GetAllCategoriesAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    // Search & Filter
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
    }

    private void OnCategoryFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int categoryId))
            categoryFilter = categoryId;
        else
            categoryFilter = null;
    }

    // FAQ Operations
    private void ShowAddFAQModal()
    {
        isEditingFAQ = false;
        editingFAQId = 0;
        editingFAQ = new CreateFAQDto { IsActive = true, Order = faqs.Count + 1 };
        showFAQModal = true;
    }

    private void EditFAQ(FAQDto faq)
    {
        isEditingFAQ = true;
        editingFAQId = faq.Id;
        editingFAQ = new CreateFAQDto
        {
            QuestionEn = faq.QuestionEn,
            QuestionAr = faq.QuestionAr,
            AnswerEn = faq.AnswerEn,
            AnswerAr = faq.AnswerAr,
            CategoryId = faq.CategoryId,
            Order = faq.Order,
            IsActive = faq.IsActive
        };
        showFAQModal = true;
    }

    private void CloseFAQModal()
    {
        showFAQModal = false;
        isEditingFAQ = false;
        editingFAQId = 0;
        editingFAQ = new();
    }

    private async Task SaveFAQ()
    {
        if (isLoadingFAQ) return;
        
        isLoadingFAQ = true;
        StateHasChanged();

        try
        {
            if (isEditingFAQ)
            {
                var updateDto = new UpdateFAQDto
                {
                    Id = editingFAQId,
                    QuestionEn = editingFAQ.QuestionEn,
                    QuestionAr = editingFAQ.QuestionAr,
                    AnswerEn = editingFAQ.AnswerEn,
                    AnswerAr = editingFAQ.AnswerAr,
                    CategoryId = editingFAQ.CategoryId,
                    Order = editingFAQ.Order,
                    IsActive = editingFAQ.IsActive
                };
                await FAQService.UpdateFAQAsync(updateDto);
            }
            else
            {
                await FAQService.CreateFAQAsync(editingFAQ);
            }

            CloseFAQModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving FAQ: {ex.Message}";
        }
        finally
        {
            isLoadingFAQ = false;
            StateHasChanged();
        }
    }

    private async Task ToggleFAQStatus(FAQDto faq)
    {
        try
        {
            var updateDto = new UpdateFAQDto
            {
                Id = faq.Id,
                QuestionEn = faq.QuestionEn,
                QuestionAr = faq.QuestionAr,
                AnswerEn = faq.AnswerEn,
                AnswerAr = faq.AnswerAr,
                CategoryId = faq.CategoryId,
                Order = faq.Order,
                IsActive = !faq.IsActive
            };
            
            await FAQService.UpdateFAQAsync(updateDto);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating FAQ status: {ex.Message}";
        }
    }

    private async Task DeleteFAQ(FAQDto faq)
    {
        // Show confirmation in UI instead of JS prompt
        showDeleteConfirm = true;
        faqToDelete = faq;
        StateHasChanged();
    }
    
    private async Task ConfirmDelete()
    {
        if (faqToDelete == null) return;
        
        try
        {
            await FAQService.DeleteFAQAsync(faqToDelete.Id);
            await LoadData();
            showDeleteConfirm = false;
            faqToDelete = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting FAQ: {ex.Message}";
            showDeleteConfirm = false;
            faqToDelete = null;
        }
    }
    
    private void CancelDelete()
    {
        showDeleteConfirm = false;
        faqToDelete = null;
        StateHasChanged();
    }

    // Category Operations
    private void ShowAddCategoryModal()
    {
        isEditingCategory = false;
        editingCategoryId = 0;
        editingCategory = new CreateFAQCategoryDto();
        showCategoryModal = true;
    }

    private void EditCategory(FAQCategoryDto category)
    {
        isEditingCategory = true;
        editingCategoryId = category.Id;
        editingCategory = new CreateFAQCategoryDto
        {
            NameEn = category.NameEn,
            NameAr = category.NameAr
        };
        showCategoryModal = true;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
        isEditingCategory = false;
        editingCategoryId = 0;
        editingCategory = new();
    }

    private async Task SaveCategory()
    {
        if (isLoadingCategory) return;
        
        isLoadingCategory = true;
        StateHasChanged();

        try
        {
            if (isEditingCategory)
            {
                var updateDto = new UpdateFAQCategoryDto
                {
                    Id = editingCategoryId,
                    NameEn = editingCategory.NameEn,
                    NameAr = editingCategory.NameAr,
                    Order = editingCategory.Order,
                    IsActive = editingCategory.IsActive
                };
                await FAQService.UpdateCategoryAsync(updateDto);
            }
            else
            {
                await FAQService.CreateCategoryAsync(editingCategory);
            }

            CloseCategoryModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving category: {ex.Message}";
        }
        finally
        {
            isLoadingCategory = false;
            StateHasChanged();
        }
    }

    private async Task DeleteCategory(FAQCategoryDto category)
    {
        // Show confirmation in UI instead of JS prompt
        showDeleteCategoryConfirm = true;
        categoryToDelete = category;
        StateHasChanged();
    }
    
    private async Task ConfirmDeleteCategory()
    {
        if (categoryToDelete == null) return;
        
        try
        {
            await FAQService.DeleteCategoryAsync(categoryToDelete.Id);
            await LoadData();
            showDeleteCategoryConfirm = false;
            categoryToDelete = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting category: {ex.Message}";
            showDeleteCategoryConfirm = false;
            categoryToDelete = null;
        }
    }
    
    private void CancelDeleteCategory()
    {
        showDeleteCategoryConfirm = false;
        categoryToDelete = null;
        StateHasChanged();
    }
}
