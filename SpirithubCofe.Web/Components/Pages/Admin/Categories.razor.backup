@page "/admin/categories"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@rendermode InteractiveServer

<div class="p-6">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">Categories Management</h1>
                <p class="text-gray-600">Manage your product categories and homepage display settings</p>
            </div>
            <button @onclick="ShowCreateForm" 
                    class="bg-amber-600 hover:bg-amber-700 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center gap-2">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Add Category
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                    <svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">Total Categories</p>
                    <p class="text-2xl font-semibold text-gray-900">@totalCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                    <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">Active Categories</p>
                    <p class="text-2xl font-semibold text-gray-900">@activeCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-purple-100 rounded-lg">
                    <svg class="w-6 h-6 text-purple-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">On Homepage</p>
                    <p class="text-2xl font-semibold text-gray-900">@homepageCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-amber-100 rounded-lg">
                    <svg class="w-6 h-6 text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9 12a5 5 0 100-10 5 5 0 000 10zm0-8a3 3 0 110 6 3 3 0 010-6zm7 12a7 7 0 11-14 0h14z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">With Products</p>
                    <p class="text-2xl font-semibold text-gray-900">@categoriesWithProducts</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-6">
        <div class="p-6">
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                    <input type="text" placeholder="Search categories..." @bind="searchTerm" @onkeyup="OnSearchChanged"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                </div>
                <select @bind="selectedStatus" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="homepage">Shown on Homepage</option>
                    <option value="hidden">Hidden from Homepage</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Categories Grid -->
    @if (loading)
    {
        <div class="text-center py-12">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600 mx-auto"></div>
            <p class="mt-2 text-sm text-gray-500">Loading categories...</p>
        </div>
    }
    else if (filteredCategories == null || !filteredCategories.Any())
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No categories found</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by creating your first category.</p>
            <div class="mt-6">
                <button @onclick="ShowCreateForm" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                    Add Category
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var category in filteredCategories)
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow">
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold text-gray-900">@category.Name</h3>
                            @if (!string.IsNullOrEmpty(category.NameAr))
                            {
                                <p class="text-sm text-gray-500 mt-1" dir="rtl">@category.NameAr</p>
                            }
                            <p class="text-xs text-gray-400 font-mono mt-1">@category.Slug</p>
                        </div>
                        <div class="flex gap-2">
                            <button @onclick="() => EditCategory(category)"
                                    class="p-2 text-gray-500 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                </svg>
                            </button>
                            <button @onclick="() => DeleteCategory(category)"
                                    class="p-2 text-gray-500 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Status</span>
                            <span class="@(category.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 rounded-full text-xs font-medium">
                                @(category.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Homepage</span>
                            <span class="@(category.ShowOnHomepage ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800") px-2 py-1 rounded-full text-xs font-medium">
                                @(category.ShowOnHomepage ? "Visible" : "Hidden")
                            </span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Display Order</span>
                            <span class="text-sm font-medium text-gray-900">@category.DisplayOrder</span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Products</span>
                            <span class="text-sm font-medium text-gray-900">@category.Products.Count</span>
                        </div>

                        @if (!string.IsNullOrEmpty(category.Description))
                        {
                            <div class="pt-2 border-t border-gray-100">
                                <p class="text-sm text-gray-600 line-clamp-2">@category.Description</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Category Form Modal -->
@if (showCreateModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="() => showCreateModal = false">
        <div class="relative top-20 mx-auto p-5 border w-full max-w-lg bg-white rounded-lg shadow-lg" @onclick:stopPropagation="true">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">@(editingCategory?.Id > 0 ? "Edit Category" : "Create New Category")</h3>
                <button @onclick="() => showCreateModal = false" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <EditForm Model="editingCategory" OnValidSubmit="SaveCategory">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-600 mb-4" />

                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name (English)</label>
                        <InputText @bind-Value="editingCategory.Name" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                        <ValidationMessage For="@(() => editingCategory.Name)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name (Arabic)</label>
                        <InputText @bind-Value="editingCategory.NameAr" dir="rtl" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Slug</label>
                        <InputText @bind-Value="editingCategory.Slug" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500 font-mono" />
                        <ValidationMessage For="@(() => editingCategory.Slug)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description (English)</label>
                        <InputTextArea @bind-Value="editingCategory.Description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description (Arabic)</label>
                        <InputTextArea @bind-Value="editingCategory.DescriptionAr" dir="rtl" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Display Order</label>
                        <InputNumber @bind-Value="editingCategory.DisplayOrder" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div class="flex items-center space-x-4">
                        <label class="flex items-center">
                            <InputCheckbox @bind-Value="editingCategory.IsActive" class="rounded border-gray-300 text-amber-600 focus:ring-amber-500" />
                            <span class="ml-2 text-sm text-gray-700">Active</span>
                        </label>

                        <label class="flex items-center">
                            <InputCheckbox @bind-Value="editingCategory.ShowOnHomepage" class="rounded border-gray-300 text-amber-600 focus:ring-amber-500" />
                            <span class="ml-2 text-sm text-gray-700">Show on Homepage</span>
                        </label>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="() => showCreateModal = false" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 rounded-lg">
                        @(editingCategory?.Id > 0 ? "Update" : "Create")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

            <!-- Modal panel -->
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div>
                    <div class="mt-3 text-center sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">
                            @(editingCategory?.Id > 0 ? "Edit Category" : "Create New Category")
                        </h3>
                        <div class="mt-6 space-y-4">
                            <!-- Name (English) -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Name (English) *</label>
                                <input type="text" @bind="editingCategory.Name" @onkeyup="OnNameChanged"
                                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500">
                            </div>

                            <!-- Name (Arabic) -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Name (Arabic)</label>
                                <input type="text" @bind="editingCategory.NameAr" dir="rtl"
                                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 font-arabic">
                            </div>

                            <!-- Slug -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Slug *</label>
                                <input type="text" @bind="editingCategory.Slug"
                                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 font-mono text-sm">
                                <p class="mt-1 text-xs text-gray-500">URL-friendly identifier (auto-generated from name)</p>
                            </div>

                            <!-- Description (English) -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Description (English)</label>
                                <textarea @bind="editingCategory.Description" rows="3"
                                          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500"></textarea>
                            </div>

                            <!-- Description (Arabic) -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Description (Arabic)</label>
                                <textarea @bind="editingCategory.DescriptionAr" rows="3" dir="rtl"
                                          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 font-arabic"></textarea>
                            </div>

                            <!-- Image Path -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Image Path</label>
                                <input type="text" @bind="editingCategory.ImagePath" placeholder="/images/categories/category-name.jpg"
                                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500">
                                <p class="mt-1 text-xs text-gray-500">Path to category image (relative to wwwroot)</p>
                            </div>

                            <!-- Display Order -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Display Order</label>
                                <input type="number" @bind="editingCategory.DisplayOrder" min="0"
                                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500">
                            </div>

                            <!-- Checkboxes -->
                            <div class="space-y-3">
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="editingCategory.IsActive" 
                                           class="h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded">
                                    <label class="ml-2 block text-sm text-gray-900">Active</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="editingCategory.IsDisplayedOnHomepage" 
                                           class="h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded">
                                    <label class="ml-2 block text-sm text-gray-900">Display on Homepage</label>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(formError))
                            {
                                <div class="text-red-600 text-sm">@formError</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6 sm:flex sm:flex-row-reverse">
                    <button @onclick="SaveCategory" type="button"
                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-amber-600 text-base font-medium text-white hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 sm:ml-3 sm:w-auto sm:text-sm">
                        @(editingCategory?.Id > 0 ? "Update" : "Create")
                    </button>
                    <button @onclick="CloseForm" type="button"
                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 sm:mt-0 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Category> allCategories = new();
    private List<Category> filteredCategories = new();
    private bool loading = true;
    
    // Filter properties
    private string searchTerm = string.Empty;
    private string _selectedStatus = string.Empty;
    
    private string selectedStatus
    {
        get => _selectedStatus;
        set
        {
            if (_selectedStatus != value)
            {
                _selectedStatus = value;
                _ = ApplyFiltersAsync();
            }
        }
    }
    
    // Form properties
    private bool showForm = false;
    private Category editingCategory = new();
    private string formError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        loading = true;
        try
        {
            allCategories = await CategoryService.GetAllCategoriesAsync();
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading categories: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ApplyFiltersAsync()
    {
        try
        {
            filteredCategories = await CategoryService.GetCategoriesWithFiltersAsync(
                searchTerm: string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm.Trim(),
                status: string.IsNullOrWhiteSpace(selectedStatus) ? null : selectedStatus
            );
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error filtering categories: {ex.Message}");
        }
    }

    private async Task OnSearchChanged()
    {
        await ApplyFiltersAsync();
    }

    private void ShowCreateForm()
    {
        editingCategory = new Category
        {
            IsActive = true,
            IsDisplayedOnHomepage = true,
            DisplayOrder = allCategories.Any() ? allCategories.Max(c => c.DisplayOrder) + 1 : 1
        };
        formError = string.Empty;
        showForm = true;
    }

    private void EditCategory(Category category)
    {
        editingCategory = new Category
        {
            Id = category.Id,
            Name = category.Name,
            NameAr = category.NameAr,
            Slug = category.Slug,
            Description = category.Description,
            DescriptionAr = category.DescriptionAr,
            ImagePath = category.ImagePath,
            IsActive = category.IsActive,
            IsDisplayedOnHomepage = category.IsDisplayedOnHomepage,
            DisplayOrder = category.DisplayOrder
        };
        formError = string.Empty;
        showForm = true;
    }

    private void CloseForm()
    {
        showForm = false;
        editingCategory = new();
        formError = string.Empty;
    }

    private async Task OnNameChanged()
    {
        if (!string.IsNullOrEmpty(editingCategory.Name) && string.IsNullOrEmpty(editingCategory.Slug))
        {
            editingCategory.Slug = await CategoryService.GenerateUniqueSlugAsync(editingCategory.Name, editingCategory.Id > 0 ? editingCategory.Id : null);
        }
    }

    private async Task SaveCategory()
    {
        try
        {
            formError = string.Empty;

            // Validation
            if (string.IsNullOrWhiteSpace(editingCategory.Name))
            {
                formError = "Name is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(editingCategory.Slug))
            {
                formError = "Slug is required.";
                return;
            }

            loading = true;

            if (editingCategory.Id > 0)
            {
                await CategoryService.UpdateCategoryAsync(editingCategory);
            }
            else
            {
                await CategoryService.CreateCategoryAsync(editingCategory);
            }

            await LoadDataAsync();
            CloseForm();
        }
        catch (Exception ex)
        {
            formError = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ToggleCategoryStatus(int categoryId)
    {
        try
        {
            loading = true;
            await CategoryService.ToggleCategoryStatusAsync(categoryId);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error toggling category status: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ToggleCategoryHomepage(int categoryId)
    {
        try
        {
            loading = true;
            await CategoryService.ToggleCategoryHomepageDisplayAsync(categoryId);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error toggling homepage display: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                loading = true;
                await CategoryService.DeleteCategoryAsync(categoryId);
                await LoadDataAsync();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting category: {ex.Message}");
            }
            finally
            {
                loading = false;
            }
        }
    }
}