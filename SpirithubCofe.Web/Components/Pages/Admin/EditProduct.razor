@page "/admin/products/{id:int}/edit"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h1>Edit Product</h1>

@if (loading)
{
    <p>Loading...</p>
}
else if (product == null)
{
    <p>Product not found.</p>
    <button @onclick="GoBack" class="btn btn-primary">Go Back</button>
}
else
{
    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mb-4">
            <span>@successMessage</span>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-error mb-4">
            <span>@errorMessage</span>
        </div>
    }

    <EditForm Model="@product" OnValidSubmit="@SaveProduct" class="space-y-4">
        <DataAnnotationsValidator />
        
        <div class="form-control">
            <label class="label">
                <span class="label-text">Product Name</span>
            </label>
            <InputText @bind-Value="product.Name" class="input input-bordered" />
            <ValidationMessage For="@(() => product.Name)" class="text-error text-sm" />
        </div>

        <div class="form-control">
            <label class="label">
                <span class="label-text">Product Name (Arabic)</span>
            </label>
            <InputText @bind-Value="product.NameAr" class="input input-bordered" />
        </div>

        <div class="form-control">
            <label class="label">
                <span class="label-text">SKU</span>
            </label>
            <InputText @bind-Value="product.Sku" class="input input-bordered" />
            <ValidationMessage For="@(() => product.Sku)" class="text-error text-sm" />
        </div>

        <div class="form-control">
            <label class="label">
                <span class="label-text">Category</span>
            </label>
            <InputSelect @bind-Value="product.CategoryId" class="select select-bordered">
                <option value="">Select a category</option>
                @if (categories != null)
                {
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => product.CategoryId)" class="text-error text-sm" />
        </div>

        <div class="form-control">
            <label class="label">
                <span class="label-text">Description</span>
            </label>
            <InputTextArea @bind-Value="product.Description" rows="4" class="textarea textarea-bordered" />
        </div>

        <div class="form-control">
            <label class="label">
                <span class="label-text">Description (Arabic)</span>
            </label>
            <InputTextArea @bind-Value="product.DescriptionAr" rows="4" class="textarea textarea-bordered" />
        </div>

        <div class="flex space-x-4">
            <div class="form-control">
                <label class="label cursor-pointer">
                    <span class="label-text">Active</span>
                    <InputCheckbox @bind-Value="product.IsActive" class="checkbox" />
                </label>
            </div>
            <div class="form-control">
                <label class="label cursor-pointer">
                    <span class="label-text">Featured</span>
                    <InputCheckbox @bind-Value="product.IsFeatured" class="checkbox" />
                </label>
            </div>
            <div class="form-control">
                <label class="label cursor-pointer">
                    <span class="label-text">Digital Product</span>
                    <InputCheckbox @bind-Value="product.IsDigital" class="checkbox" />
                </label>
            </div>
        </div>

        <div class="flex space-x-3 mt-6">
            <button type="button" @onclick="GoBack" class="btn btn-outline">
                Cancel
            </button>
            <button type="submit" class="btn btn-primary">
                Update Product
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private Product? product;
    private List<Category>? categories;
    private bool loading = true;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load product
            product = await ProductService.GetProductByIdAsync(Id);
            
            // Load categories
            categories = await CategoryService.GetAllCategoriesAsync();
            
            if (product == null)
            {
                errorMessage = "Product not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading product: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SaveProduct()
    {
        try
        {
            if (product == null) return;
            
            var updatedProduct = await ProductService.UpdateProductAsync(product);
            if (updatedProduct != null)
            {
                ShowSuccessMessage($"Product '{product.Name}' has been updated successfully.");
                product = updatedProduct; // Update the local instance
            }
            else
            {
                ShowErrorMessage("Failed to update product.");
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Error updating product: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/products");
    }
    
    private void ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = "";
        StateHasChanged();
        
        // Clear message after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                successMessage = "";
                StateHasChanged();
            });
        });
    }
    
    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = "";
        StateHasChanged();
    }
}