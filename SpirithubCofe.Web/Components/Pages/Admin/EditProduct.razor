@page "/admin/products/{id:int}/edit"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using SpirithubCofe.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@using System.IO
@rendermode InteractiveServer

<Toast />

<div class="min-h-screen bg-gray-50 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        @if (loading)
        {
            <div class="flex items-center justify-center min-h-64">
                <div class="loading loading-spinner loading-lg"></div>
                <span class="ml-3 text-lg">Loading product...</span>
            </div>
        }
        else if (product == null)
        {
            <div class="text-center">
                <div class="max-w-md mx-auto">
                    <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.044-5.709-2.573M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                    </svg>
                    <h3 class="mt-4 text-lg font-medium text-gray-900">Product Not Found</h3>
                    <p class="mt-2 text-gray-600">The product you're looking for doesn't exist or has been deleted.</p>
                    <div class="mt-6">
                        <button @onclick="GoBack" class="btn btn-primary">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                            Back to Products
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Page Header -->
            <div class="bg-white shadow-sm rounded-lg mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                        <div>
                            <h1 class="text-2xl font-bold text-gray-900">Edit Product</h1>
                            <p class="mt-1 text-sm text-gray-600">Update "@product.Name" with comprehensive details</p>
                        </div>
                        <div class="mt-4 sm:mt-0 flex space-x-3">
                            <button type="button" @onclick="GoBack" 
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                </svg>
                                Back to Products
                            </button>
                            <a href="/admin/products/@Id" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                                View Product
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Tab Navigation -->
                <div class="px-6">
                    <nav class="flex space-x-8" aria-label="Tabs">
                        <button @onclick="@(() => SetActiveTab("basic"))" @onclick:preventDefault="true" type="button"
                                class="@(activeTab == "basic" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap">
                            Basic Information
                        </button>
                        <button @onclick="@(() => SetActiveTab("coffee"))" @onclick:preventDefault="true" type="button"
                                class="@(activeTab == "coffee" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap">
                            Coffee Details
                        </button>
                        <button @onclick="@(() => SetActiveTab("images"))" @onclick:preventDefault="true" type="button"
                                class="@(activeTab == "images" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap">
                            Images
                        </button>
                        <button @onclick="@(() => SetActiveTab("pricing"))" @onclick:preventDefault="true" type="button"
                                class="@(activeTab == "pricing" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap">
                            Pricing & Variants
                        </button>
                        <button @onclick="@(() => SetActiveTab("seo"))" @onclick:preventDefault="true" type="button"
                                class="@(activeTab == "seo" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap">
                            SEO & Settings
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Main Content -->
            <form @onsubmit:preventDefault="true" class="space-y-6">
                
                <!-- Basic Information Tab -->
                @if (activeTab == "basic")
                {
                    <div class="bg-white shadow-sm rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Basic Information</h2>
                            <p class="text-sm text-gray-600">Product name, description, and category</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <!-- Product Name (EN) -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">
                                        Product Name (English) <span class="text-red-500">*</span>
                                    </label>
                                    <input type="text" @bind="product.Name" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Ethiopian Yirgacheffe" required />
                                </div>

                                <!-- Product Name (AR) -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">
                                        Product Name (Arabic)
                                    </label>
                                    <input type="text" @bind="product.NameAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="يرغاشيف الإثيوبية" dir="rtl" />
                                </div>

                                <!-- SKU -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">
                                        SKU <span class="text-red-500">*</span>
                                    </label>
                                    <input type="text" @bind="product.Sku" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="COFFEE-ETHIO-YIRG-001" required />
                                </div>

                                <!-- Category -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">
                                        Category <span class="text-red-500">*</span>
                                    </label>
                                    <select @bind="product.CategoryId" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                                        <option value="">Select a category</option>
                                        @if (categories != null)
                                        {
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>

                            <!-- Description (EN) -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Description (English)</label>
                                <textarea @bind="product.Description" rows="4"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                          placeholder="Detailed product description..."></textarea>
                            </div>

                            <!-- Description (AR) -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Description (Arabic)</label>
                                <textarea @bind="product.DescriptionAr" rows="4"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                          placeholder="وصف مفصل للمنتج..." dir="rtl"></textarea>
                            </div>

                            <!-- Notes (EN & AR) -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Notes (English)</label>
                                    <textarea @bind="product.Notes" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="Additional notes or special instructions..."></textarea>
                                </div>
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Notes (Arabic)</label>
                                    <textarea @bind="product.NotesAr" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="ملاحظات إضافية أو تعليمات خاصة..." dir="rtl"></textarea>
                                </div>
                            </div>

                            <!-- Product Settings -->
                            <div class="grid grid-cols-2 lg:grid-cols-4 gap-6">
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="product.IsActive" id="isActive" 
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                    <label for="isActive" class="ml-2 block text-sm text-gray-700">Active</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="product.IsFeatured" id="isFeatured" 
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                    <label for="isFeatured" class="ml-2 block text-sm text-gray-700">Featured</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="product.IsDigital" id="isDigital" 
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                    <label for="isDigital" class="ml-2 block text-sm text-gray-700">Digital Product</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="product.IsOrganic" id="isOrganic" 
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                    <label for="isOrganic" class="ml-2 block text-sm text-gray-700">Organic</label>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Coffee Details Tab -->
                @if (activeTab == "coffee")
                {
                    <div class="bg-white shadow-sm rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Coffee Details</h2>
                            <p class="text-sm text-gray-600">Roast level, processing method, origin, and tasting notes</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <!-- Origin -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Origin/Region</label>
                                    <input type="text" @bind="product.Origin" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Ethiopia" />
                                </div>

                                <!-- Intensity -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Intensity (1-10)</label>
                                    <input type="number" @bind="product.Intensity" min="1" max="10"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="5" />
                                </div>

                                <!-- Roast Level -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Roast Level</label>
                                    <select @bind="product.RoastLevel" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="">Select roast level</option>
                                        <option value="Light">Light Roast</option>
                                        <option value="Medium-Light">Medium-Light Roast</option>
                                        <option value="Medium">Medium Roast</option>
                                        <option value="Medium-Dark">Medium-Dark Roast</option>
                                        <option value="Dark">Dark Roast</option>
                                        <option value="French">French Roast</option>
                                        <option value="Italian">Italian Roast</option>
                                    </select>
                                </div>

                                <!-- Roast Level (AR) -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Roast Level (Arabic)</label>
                                    <input type="text" @bind="product.RoastLevelAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="تحميص متوسط" dir="rtl" />
                                </div>

                                <!-- Process -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Processing Method</label>
                                    <select @bind="product.Process" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="">Select processing method</option>
                                        <option value="Washed">Washed</option>
                                        <option value="Natural">Natural (Dry)</option>
                                        <option value="Honey">Honey Process</option>
                                        <option value="Semi-Washed">Semi-Washed</option>
                                        <option value="Wet Hulled">Wet Hulled</option>
                                    </select>
                                </div>

                                <!-- Process (AR) -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Processing Method (Arabic)</label>
                                    <input type="text" @bind="product.ProcessAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="معالجة مغسولة" dir="rtl" />
                                </div>

                                <!-- Variety -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Coffee Variety</label>
                                    <input type="text" @bind="product.Variety" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Heirloom" />
                                </div>

                                <!-- Variety (AR) -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Coffee Variety (Arabic)</label>
                                    <input type="text" @bind="product.VarietyAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="متنوعة الإرث" dir="rtl" />
                                </div>

                                <!-- Altitude -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Altitude (meters)</label>
                                    <input type="number" @bind="product.Altitude" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="1800" />
                                </div>

                                <!-- Farm -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Farm/Estate</label>
                                    <input type="text" @bind="product.Farm" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Yirgacheffe Coffee Farmers Cooperative" />
                                </div>
                            </div>

                            <!-- Farm (AR) -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Farm/Estate (Arabic)</label>
                                <input type="text" @bind="product.FarmAr" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                       placeholder="تعاونية مزارعي قهوة يرغاشيف" dir="rtl" />
                            </div>

                            <!-- Tasting Notes -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Tasting Notes (English)</label>
                                    <textarea @bind="product.TastingNotes" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="Bright acidity, floral aroma, citrus notes"></textarea>
                                </div>
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Tasting Notes (Arabic)</label>
                                    <textarea @bind="product.TastingNotesAr" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="حموضة مشرقة، رائحة زهرية، نكهات حمضيات" dir="rtl"></textarea>
                                </div>
                            </div>

                            <!-- Brewing Instructions -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Brewing Instructions (English)</label>
                                    <textarea @bind="product.BrewingInstructions" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="Pour over: 1:15 ratio, 200°F water temperature"></textarea>
                                </div>
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Brewing Instructions (Arabic)</label>
                                    <textarea @bind="product.BrewingInstructionsAr" rows="3"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="صب فوق: نسبة 1:15، درجة حرارة الماء 93 مئوية" dir="rtl"></textarea>
                                </div>
                            </div>

                            <!-- Compatibility and Uses -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Compatibility (English)</label>
                                    <textarea @bind="product.Compatibility" rows="2"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="Compatible with Nespresso machines"></textarea>
                                </div>
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Compatibility (Arabic)</label>
                                    <textarea @bind="product.CompatibilityAr" rows="2"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                              placeholder="متوافق مع آلات نسبريسو" dir="rtl"></textarea>
                                </div>
                            </div>

                            <!-- Additional Options -->
                            <div class="grid grid-cols-2 lg:grid-cols-3 gap-6">
                                <div class="flex items-center">
                                    <input type="checkbox" @bind="product.IsFairTrade" id="isFairTrade" 
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                    <label for="isFairTrade" class="ml-2 block text-sm text-gray-700">Fair Trade</label>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Images Tab -->
                @if (activeTab == "images")
                {
                    <div class="bg-white shadow-sm rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Product Images</h2>
                            <p class="text-sm text-gray-600">Upload and manage product images</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <!-- Main Image Upload Section -->
                            <div class="space-y-4">
                                <h3 class="text-base font-medium text-gray-900">Main Product Image</h3>
                                <FileUpload 
                                    Folder="products" 
                                    FileType="image" 
                                    Prefix="main"
                                    CurrentFileUrl="@(product.MainImage?.ImagePath)"
                                    AltText="@product.Name" 
                                    OnFileUploaded="OnMainImageUploaded"
                                    OnFileRemoved="OnMainImageRemoved" />
                            </div>

 

                            <!-- Image Alt Text -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Image Alt Text (English)</label>
                                    <input type="text" @bind="product.ImageAlt" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Ethiopian Yirgacheffe coffee beans" />
                                    <p class="text-xs text-gray-500">For SEO and accessibility</p>
                                </div>
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Image Alt Text (Arabic)</label>
                                    <input type="text" @bind="product.ImageAltAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="حبوب قهوة يرغاشيف الإثيوبية" dir="rtl" />
                                </div>
                            </div>
                        </div>
                                            <!-- Gallery Images -->
                    <div class="bg-white shadow-sm rounded-lg ">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Gallery Images</h2>
                            <p class="text-sm text-gray-600">Additional product images (maximum 5)</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                                @for (int i = 0; i < galleryImages.Count; i++)
                                {
                                    int index = i; // Capture for closure
                                    <div class="border border-gray-200 rounded-lg p-4">
                                        <div class="mb-2 flex items-center justify-between">
                                            <span class="text-sm font-medium text-gray-700">Gallery Image @(index + 1)</span>
                                            @if (!string.IsNullOrEmpty(galleryImages[index]))
                                            {
                                                <button type="button" @onclick="() => RemoveGalleryImage(index)" 
                                                        class="text-red-600 hover:text-red-800 text-sm">
                                                    Remove
                                                </button>
                                            }
                                        </div>
                                        <FileUpload Folder="products" 
                                                   FileType="image" 
                                                   Prefix="@($"product-gallery-{index}")"
                                                   @bind-CurrentFileUrl="galleryImages[index]"
                                                   OnFileUploaded="@((result) => OnGalleryImageUploaded(index, result))" />
                                    </div>
                                }
                            </div>
                            
                            @if (galleryImages.Count < 5)
                            {
                                <div class="text-center">
                                    <button type="button" @onclick="AddGalleryImageSlot" 
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                        </svg>
                                        Add Gallery Image (@galleryImages.Count/5)
                                    </button>
                                </div>
                            }
                            
                            <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                                <p class="text-sm text-blue-700">💡 Add up to 5 high-quality images showing different angles and details of your coffee product.</p>
                            </div>
                        </div>
                    </div>
                    </div>
                }

                <!-- Pricing & Variants Tab -->
                @if (activeTab == "pricing")
                {
                    <div class="bg-white shadow-sm rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Pricing & Variants</h2>
                            <p class="text-sm text-gray-600">Manage product variants with different weights, prices, and stock levels</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <!-- Current Variants -->
                            @if (product.Variants != null && product.Variants.Any())
                            {
                                <div class="space-y-4">
                                    <h3 class="text-base font-medium text-gray-900">Current Variants</h3>
                                    <div class="overflow-x-auto">
                                        <table class="min-w-full divide-y divide-gray-200">
                                            <thead class="bg-gray-50">
                                                <tr>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Weight</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody class="bg-white divide-y divide-gray-200">
                                                @foreach (var variant in product.Variants.OrderBy(v => v.DisplayOrder))
                                                {
                                                    <tr>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@variant.VariantSku</td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@variant.Weight @variant.WeightUnit</td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            @if (variant.DiscountPrice.HasValue)
                                                            {
                                                                <span class="line-through text-gray-500">@variant.Price.ToString("F3") OMR</span>
                                                                <span class="text-red-600 font-medium">@variant.DiscountPrice.Value.ToString("F3") OMR</span>
                                                            }
                                                            else
                                                            {
                                                                <span>@variant.Price.ToString("F3") OMR</span>
                                                            }
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@variant.StockQuantity</td>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(variant.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                                                @(variant.IsActive ? "Active" : "Inactive")
                                                            </span>
                                                            @if (variant.IsDefault)
                                                            {
                                                                <span class="ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                                    Default
                                                                </span>
                                                            }
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                            <button type="button" @onclick="() => EditVariant(variant)" class="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                                                            <button type="button" @onclick="() => ToggleVariantDefault(variant)" class="text-green-600 hover:text-green-900 mr-3">
                                                                @(variant.IsDefault ? "★" : "☆")
                                                            </button>
                                                            <button type="button" @onclick="() => DeleteVariant(variant)" class="text-red-600 hover:text-red-900">Delete</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-8">
                                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10"></path>
                                    </svg>
                                    <h3 class="mt-2 text-sm font-medium text-gray-900">No variants</h3>
                                    <p class="mt-1 text-sm text-gray-500">This product doesn't have any variants yet.</p>
                                </div>
                            }

                            <!-- Add New Variant Button -->
                            <div class="border-t border-gray-200 pt-6">
                                <button type="button" @onclick="ShowAddVariantForm" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    Add New Variant
                                </button>
                            </div>

                            <!-- Add/Edit Variant Form -->
                            @if (showAddVariant)
                            {
                                <div class="border-t border-gray-200 pt-6">
                                    <div class="bg-gray-50 rounded-lg p-6">
                                        <h4 class="text-lg font-medium text-gray-900 mb-4">@(isEditingVariant ? "Edit Variant" : "Add New Variant")</h4>
                                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                            <!-- Variant SKU -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Variant SKU <span class="text-red-500">*</span></label>
                                                <input type="text" @bind="newVariant.VariantSku" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                       placeholder="COFFEE-250G" />
                                            </div>
                                            
                                            <!-- Weight -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Weight <span class="text-red-500">*</span></label>
                                                <div class="flex">
                                                    <input type="number" @bind="newVariant.Weight" 
                                                           class="flex-1 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                           placeholder="250" />
                                                    <select @bind="newVariant.WeightUnit" 
                                                            class="px-3 py-2 border border-l-0 border-gray-300 rounded-r-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                                        <option value="g">g</option>
                                                        <option value="kg">kg</option>
                                                        <option value="lb">lb</option>
                                                        <option value="oz">oz</option>
                                                    </select>
                                                </div>
                                            </div>
                                            
                                            <!-- Price -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Price (OMR) <span class="text-red-500">*</span></label>
                                                <input type="number" step="0.001" @bind="newVariant.Price" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                       placeholder="15.500" />
                                            </div>
                                            
                                            <!-- Discount Price -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Discount Price (OMR)</label>
                                                <input type="number" step="0.001" @bind="newVariant.DiscountPrice" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                       placeholder="12.500" />
                                            </div>
                                            
                                            <!-- Stock Quantity -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Stock Quantity</label>
                                                <input type="number" @bind="newVariant.StockQuantity" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                       placeholder="100" />
                                            </div>
                                            
                                            <!-- Low Stock Threshold -->
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Low Stock Alert</label>
                                                <input type="number" @bind="newVariant.LowStockThreshold" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                       placeholder="10" />
                                            </div>
                                        </div>
                                        
                                        <!-- Checkboxes -->
                                        <div class="grid grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
                                            <div class="flex items-center">
                                                <input type="checkbox" @bind="newVariant.IsActive" id="variantActive" 
                                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                                <label for="variantActive" class="ml-2 block text-sm text-gray-700">Active</label>
                                            </div>
                                            <div class="flex items-center">
                                                <input type="checkbox" @bind="newVariant.IsDefault" id="variantDefault" 
                                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                                <label for="variantDefault" class="ml-2 block text-sm text-gray-700">Set as Default</label>
                                            </div>
                                        </div>
                                        
                                        <!-- Form Actions -->
                                        <div class="flex justify-end space-x-3 mt-6">
                                            <button type="button" @onclick="CancelAddVariant" 
                                                    class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                                Cancel
                                            </button>
                                            <button type="button" @onclick="SaveNewVariant" 
                                                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                                @(isEditingVariant ? "Update Variant" : "Add Variant")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- SEO & Settings Tab -->
                @if (activeTab == "seo")
                {
                    <div class="bg-white shadow-sm rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">SEO & Advanced Settings</h2>
                            <p class="text-sm text-gray-600">Search engine optimization and metadata</p>
                        </div>
                        <div class="p-6 space-y-6">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <!-- URL Slug -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">URL Slug</label>
                                    <input type="text" @bind="product.Slug" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="ethiopian-yirgacheffe" />
                                    <p class="text-xs text-gray-500">URL-friendly version of the product name</p>
                                </div>

                                <!-- Meta Title -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Meta Title</label>
                                    <input type="text" @bind="product.MetaTitle" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Ethiopian Yirgacheffe Coffee - Premium Single Origin" />
                                    <p class="text-xs text-gray-500">Recommended: 50-60 characters</p>
                                </div>
                            </div>

                            <!-- Meta Description -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Meta Description</label>
                                <textarea @bind="product.MetaDescription" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                          placeholder="Discover our premium Ethiopian Yirgacheffe coffee with bright acidity and floral notes. Perfect for pour-over brewing methods."></textarea>
                                <p class="text-xs text-gray-500">Recommended: 150-160 characters</p>
                            </div>

                            <!-- Meta Keywords -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Meta Keywords</label>
                                <input type="text" @bind="product.MetaKeywords" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                       placeholder="coffee, ethiopian, yirgacheffe, single origin, specialty coffee" />
                                <p class="text-xs text-gray-500">Comma-separated keywords for search engines</p>
                            </div>

                            <!-- Tags -->
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Product Tags</label>
                                <input type="text" @bind="product.Tags" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                       placeholder="premium, single-origin, ethiopian, light-roast" />
                                <p class="text-xs text-gray-500">Comma-separated tags for product filtering</p>
                            </div>

                            <!-- Advanced Settings -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <!-- Display Order -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Display Order</label>
                                    <input type="number" @bind="product.DisplayOrder" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="0" />
                                    <p class="text-xs text-gray-500">Lower numbers appear first</p>
                                </div>

                                <!-- Sort Order -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Sort Order</label>
                                    <input type="number" @bind="product.SortOrder" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="0" />
                                </div>
                            </div>

                            <!-- Dates -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <!-- Launch Date -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Launch Date</label>
                                    <input type="date" @bind="product.LaunchDate" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                </div>

                                <!-- Expiry Date -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Expiry Date</label>
                                    <input type="date" @bind="product.ExpiryDate" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                            </div>

                            <!-- Product Certifications -->
                            <div class="space-y-4">
                                <h3 class="text-base font-medium text-gray-900">Product Certifications</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <!-- Organic Certification -->
                                    <div class="flex items-center p-4 border border-gray-200 rounded-lg">
                                        <div class="flex items-center h-5">
                                            <input type="checkbox" @bind="product.IsOrganic" id="isOrganic" 
                                                   class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded" />
                                        </div>
                                        <div class="ml-3">
                                            <label for="isOrganic" class="flex items-center text-sm font-medium text-gray-700">
                                                <span class="text-green-600 mr-2">🌱</span>
                                                Organic Certified
                                            </label>
                                            <p class="text-xs text-gray-500">Product meets organic certification standards</p>
                                        </div>
                                    </div>

                                    <!-- Fair Trade Certification -->
                                    <div class="flex items-center p-4 border border-gray-200 rounded-lg">
                                        <div class="flex items-center h-5">
                                            <input type="checkbox" @bind="product.IsFairTrade" id="isFairTrade" 
                                                   class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                        </div>
                                        <div class="ml-3">
                                            <label for="isFairTrade" class="flex items-center text-sm font-medium text-gray-700">
                                                <span class="text-blue-600 mr-2">🤝</span>
                                                Fair Trade Certified
                                            </label>
                                            <p class="text-xs text-gray-500">Product meets fair trade certification standards</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Action Buttons -->
                <div class="bg-white shadow-sm rounded-lg p-6">
                    <div class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
                        <div class="flex space-x-3">
                            <button type="button" @onclick="GoBack" 
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Cancel
                            </button>
                        </div>
                        
                        <div class="flex space-x-3">
                            <button type="button" @onclick="SaveAsDraft" disabled="@saving"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50">
                                @if (saving)
                                {
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-700" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                }
                                Save as Draft
                            </button>
                            <button type="button" @onclick="SaveProduct" disabled="@saving"
                                    class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50">
                                @if (saving)
                                {
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                }
                                Update Product
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private Product? product;
    private List<Category>? categories;
    private bool loading = true;
    private bool saving = false;
    private string activeTab = "basic";
    
    // For variant handling
    private bool showAddVariant = false;
    private bool isEditingVariant = false;
    private ProductVariant newVariant = new();
    private ProductVariant? editingVariant = null;
    
    // For gallery images handling
    private List<string> galleryImages = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load product with all related data
            product = await ProductService.GetProductByIdAsync(Id);
            
            // Load categories
            categories = await CategoryService.GetAllCategoriesAsync();
            
            // Initialize gallery images from product's gallery images
            if (product?.GalleryImages != null && product.GalleryImages.Any())
            {
                galleryImages = product.GalleryImages.OrderBy(g => g.DisplayOrder)
                                                  .Select(g => g.ImagePath ?? "")
                                                  .ToList();
            }
            else
            {
                galleryImages = new List<string>();
            }
            
            if (product == null)
            {
                await Toast.ShowError(JSRuntime, "Product not found.");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error loading product: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (product == null) return;
        
        saving = true;
        try
        {
            // Update the modified date
            product.UpdatedAt = DateTime.UtcNow;
            
            // Ensure product is active when saving normally
            product.IsActive = true;
            
            // Generate slug if empty
            if (string.IsNullOrEmpty(product.Slug) && !string.IsNullOrEmpty(product.Name))
            {
                product.Slug = GenerateSlug(product.Name);
            }
            
            var updatedProduct = await ProductService.UpdateProductAsync(product);
            if (updatedProduct != null)
            {
                await Toast.ShowSuccess(JSRuntime, $"Product '{product.Name}' has been updated successfully.");
                product = updatedProduct; // Update the local instance
            }
            else
            {
                await Toast.ShowError(JSRuntime, "Failed to update product.");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error updating product: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private async Task SaveAsDraft()
    {
        if (product == null) return;
        
        saving = true;
        try
        {
            // Update the modified date
            product.UpdatedAt = DateTime.UtcNow;
            
            // Set as inactive when saving as draft
            product.IsActive = false;
            
            // Generate slug if empty
            if (string.IsNullOrEmpty(product.Slug) && !string.IsNullOrEmpty(product.Name))
            {
                product.Slug = GenerateSlug(product.Name);
            }
            
            var updatedProduct = await ProductService.UpdateProductAsync(product);
            if (updatedProduct != null)
            {
                await Toast.ShowSuccess(JSRuntime, $"Product '{product.Name}' has been saved as draft.");
                product = updatedProduct; // Update the local instance
            }
            else
            {
                await Toast.ShowError(JSRuntime, "Failed to save product as draft.");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error saving product as draft: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/products");
    }
    
    private string GenerateSlug(string name)
    {
        if (string.IsNullOrEmpty(name)) return string.Empty;
        
        return name.ToLowerInvariant()
                  .Replace(" ", "-")
                  .Replace("&", "and")
                  .Replace("--", "-")
                  .Trim('-');
    }

    // Image handling methods with FileUpload component
    private async Task OnMainImageUploaded(FileUpload.UploadResult result)
    {
        if (product == null || !result.Success) return;
        
        try
        {
            // Update or create main image
            if (product.MainImage == null)
            {
                product.MainImage = new ProductImage 
                { 
                    ProductId = product.Id,
                    IsMain = true
                };
            }
            
            product.MainImage.ImagePath = result.FileUrl;
            product.MainImage.FileName = result.FileName;
            product.MainImage.FileSize = (int)result.FileSize;
            
            // Update product in database
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, "Main image uploaded successfully!");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error updating main image: {ex.Message}");
        }
    }

    private async Task OnMainImageRemoved()
    {
        if (product?.MainImage == null) return;
        
        try
        {
            product.MainImage = null;
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, "Main image removed successfully!");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error removing main image: {ex.Message}");
        }
    }

    private async Task OnGalleryImageUploaded(FileUpload.UploadResult result)
    {
        if (product == null || !result.Success) return;
        
        try
        {
            // Initialize gallery images if null
            product.GalleryImages ??= new List<ProductImage>();
            
            // Check if we haven't exceeded the limit
            if (product.GalleryImages.Count >= 5)
            {
                await Toast.ShowError(JSRuntime, "Maximum 5 gallery images allowed");
                return;
            }
            
            // Add new gallery image
            var galleryImage = new ProductImage
            {
                ProductId = product.Id,
                ImagePath = result.FileUrl,
                FileName = result.FileName,
                FileSize = (int)result.FileSize,
                IsMain = false,
                DisplayOrder = product.GalleryImages.Count + 1
            };
            
            product.GalleryImages.Add(galleryImage);
            
            // Update product in database
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, "Gallery image uploaded successfully!");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error uploading gallery image: {ex.Message}");
        }
    }

    private async Task RemoveGalleryImage(ProductImage image)
    {
        if (product?.GalleryImages == null) return;
        
        try
        {
            product.GalleryImages.Remove(image);
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, "Image removed successfully");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error removing image: {ex.Message}");
        }
    }

    // Variant handling methods
    private void ShowAddVariantForm()
    {
        isEditingVariant = false;
        editingVariant = null;
        newVariant = new ProductVariant
        {
            ProductId = product?.Id ?? 0,
            WeightUnit = "g",
            IsActive = true,
            DisplayOrder = (product?.Variants?.Count ?? 0) + 1
        };
        showAddVariant = true;
    }

    private void EditVariant(ProductVariant variant)
    {
        isEditingVariant = true;
        editingVariant = variant;
        
        // Copy variant data to newVariant for editing
        newVariant = new ProductVariant
        {
            Id = variant.Id,
            ProductId = variant.ProductId,
            VariantSku = variant.VariantSku,
            Weight = variant.Weight,
            WeightUnit = variant.WeightUnit,
            Price = variant.Price,
            DiscountPrice = variant.DiscountPrice,
            StockQuantity = variant.StockQuantity,
            LowStockThreshold = variant.LowStockThreshold,
            IsActive = variant.IsActive,
            IsDefault = variant.IsDefault,
            DisplayOrder = variant.DisplayOrder
        };
        
        showAddVariant = true;
    }

    private void CancelAddVariant()
    {
        showAddVariant = false;
        isEditingVariant = false;
        editingVariant = null;
        newVariant = new();
    }

    private async Task SaveNewVariant()
    {
        if (product == null) return;
        
        try
        {
            // Validate variant
            if (string.IsNullOrEmpty(newVariant.VariantSku))
            {
                await Toast.ShowError(JSRuntime, "SKU is required");
                return;
            }
            
            if (newVariant.Price <= 0)
            {
                await Toast.ShowError(JSRuntime, "Price must be greater than 0");
                return;
            }

            if (isEditingVariant && editingVariant != null)
            {
                // Update existing variant
                var variantToUpdate = product.Variants?.FirstOrDefault(v => v.Id == editingVariant.Id);
                if (variantToUpdate != null)
                {
                    variantToUpdate.VariantSku = newVariant.VariantSku;
                    variantToUpdate.Weight = newVariant.Weight;
                    variantToUpdate.WeightUnit = newVariant.WeightUnit;
                    variantToUpdate.Price = newVariant.Price;
                    variantToUpdate.DiscountPrice = newVariant.DiscountPrice;
                    variantToUpdate.StockQuantity = newVariant.StockQuantity;
                    variantToUpdate.LowStockThreshold = newVariant.LowStockThreshold;
                    variantToUpdate.IsActive = newVariant.IsActive;
                    variantToUpdate.IsDefault = newVariant.IsDefault;
                    
                    // If setting as default, remove default from others
                    if (newVariant.IsDefault)
                    {
                        foreach (var v in product.Variants?.Where(v => v.Id != variantToUpdate.Id) ?? Enumerable.Empty<ProductVariant>())
                        {
                            v.IsDefault = false;
                        }
                    }
                }
                
                await Toast.ShowSuccess(JSRuntime, "Variant updated successfully");
            }
            else
            {
                // Add new variant
                product.Variants ??= new List<ProductVariant>();
                
                // If this is the first variant or marked as default, make it default
                if (product.Variants.Count == 0 || newVariant.IsDefault)
                {
                    newVariant.IsDefault = true;
                    // Remove default from other variants if setting this as default
                    foreach (var v in product.Variants)
                    {
                        v.IsDefault = false;
                    }
                }
                
                product.Variants.Add(newVariant);
                await Toast.ShowSuccess(JSRuntime, "Variant added successfully");
            }
            
            await ProductService.UpdateProductAsync(product);
            
            showAddVariant = false;
            isEditingVariant = false;
            editingVariant = null;
            newVariant = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error saving variant: {ex.Message}");
        }
    }

    private async Task DeleteVariant(ProductVariant variant)
    {
        if (product?.Variants == null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete variant {variant.VariantSku}?");
        if (confirmed)
        {
            try
            {
                product.Variants.Remove(variant);
                await ProductService.UpdateProductAsync(product);
                await Toast.ShowSuccess(JSRuntime, "Variant deleted successfully");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await Toast.ShowError(JSRuntime, $"Error deleting variant: {ex.Message}");
            }
        }
    }

    private async Task ToggleVariantDefault(ProductVariant variant)
    {
        if (product?.Variants == null) return;
        
        try
        {
            // Remove default from all variants
            foreach (var v in product.Variants)
            {
                v.IsDefault = false;
            }
            
            // Set this variant as default
            variant.IsDefault = true;
            
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, "Default variant updated");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error updating default variant: {ex.Message}");
        }
    }

    // Gallery image handling methods
    private void AddGalleryImageSlot()
    {
        if (galleryImages.Count < 5)
        {
            galleryImages.Add("");
            StateHasChanged();
        }
    }

    private async Task OnGalleryImageUploaded(int index, FileUpload.UploadResult result)
    {
        if (result.Success && index >= 0 && index < galleryImages.Count)
        {
            galleryImages[index] = result.FileUrl;
            
            // Update the product's gallery images
            if (product != null)
            {
                await UpdateProductGalleryImages();
            }
            
            StateHasChanged();
        }
    }

    private async Task RemoveGalleryImage(int index)
    {
        if (index >= 0 && index < galleryImages.Count)
        {
            galleryImages.RemoveAt(index);
            
            // Update the product's gallery images
            if (product != null)
            {
                await UpdateProductGalleryImages();
            }
            
            StateHasChanged();
        }
    }

    private async Task UpdateProductGalleryImages()
    {
        if (product == null) return;

        try
        {
            // Clear existing gallery images
            product.GalleryImages?.Clear();
            product.GalleryImages ??= new List<ProductImage>();

            // Add new gallery images from the list
            for (int i = 0; i < galleryImages.Count; i++)
            {
                if (!string.IsNullOrEmpty(galleryImages[i]))
                {
                    var galleryImage = new ProductImage
                    {
                        ProductId = product.Id,
                        ImagePath = galleryImages[i],
                        FileName = Path.GetFileName(galleryImages[i]),
                        IsMain = false,
                        DisplayOrder = i + 1
                    };
                    product.GalleryImages.Add(galleryImage);
                }
            }

            // Update product in database
            await ProductService.UpdateProductAsync(product);
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error updating gallery images: {ex.Message}");
        }
    }
}