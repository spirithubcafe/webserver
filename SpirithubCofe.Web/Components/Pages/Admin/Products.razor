@page "/admin/products"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@using SpirithubCofe.Web.Components.Shared
@rendermode InteractiveServer

<Toast />

<div class="min-h-screen bg-gray-50 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Page Header -->
        <div class="bg-white shadow-sm rounded-lg mb-6">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">@Localizer["ProductManagement"]</h1>
                        <p class="mt-1 text-sm text-gray-600">@Localizer["ManageCoffeeProductsInventory"]</p>
                    </div>
                    <div class="mt-4 sm:mt-0 flex space-x-3">
                        <button @onclick="ExportProducts" 
                                class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                            </svg>
                            @Localizer["Export"]
                        </button>
                        <a href="/admin/products/create" 
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            @Localizer["AddProduct"]
                        </a>
                    </div>
                </div>
            </div>
        </div>


        <!-- Stats Cards -->        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">@Localizer["TotalProducts"]</p>
                        <p class="text-2xl font-bold text-gray-900">@totalProducts</p>
                    </div>
                    <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m16 0l-2-2m-2 2h4m-4 0l2-2"></path>
                        </svg>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">@Localizer["ActiveProducts"]</p>
                        <p class="text-2xl font-bold text-gray-900">@activeProducts</p>
                    </div>
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">@Localizer["OutOfStock"]</p>
                        <p class="text-2xl font-bold text-gray-900">@outOfStockProducts</p>
                    </div>
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">@Localizer["AverageRating"]</p>
                        <p class="text-2xl font-bold text-gray-900">@averageRating.ToString("F1")</p>
                    </div>
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                        <svg class="w-6 h-6 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">@Localizer["SearchProducts"]</label>
                        <input type="text" placeholder="@Localizer["SearchByNameOrSku"]" value="@searchTerm" @oninput="OnSearchChanged" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">@Localizer["Category"]</label>
                        <select value="@selectedCategory" @onchange="OnCategoryChanged" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">@Localizer["AllCategories"]</option>
                            @if (categories != null)
                            {
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">@Localizer["Status"]</label>
                        <select value="@selectedStatus" @onchange="OnStatusChanged" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">@Localizer["AllStatuses"]</option>
                            <option value="active">@Localizer["Active"]</option>
                            <option value="inactive">@Localizer["Inactive"]</option>
                            <option value="featured">@Localizer["Featured"]</option>
                            <option value="out-of-stock">@Localizer["OutOfStock"]</option>
                        </select>
                    </div>
                    
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">@Localizer["SortBy"]</label>
                        <select value="@sortBy" @onchange="OnSortChanged" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="name">@Localizer["Name"]</option>
                            <option value="price">@Localizer["Price"]</option>
                            <option value="created">@Localizer["CreatedDate"]</option>
                            <option value="rating">@Localizer["Rating"]</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Products Grid/Table Toggle -->
        <div class="flex justify-between items-center mb-6">
            <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-600">@string.Format(Localizer["ShowingResults"], filteredProducts?.Count ?? 0)</span>
            </div>
            <div class="flex rounded-md shadow-sm">
                <button @onclick="@(() => isGridView = true)" 
                        class="relative inline-flex items-center px-4 py-2 rounded-l-md border @(isGridView ? "border-blue-500 bg-blue-50 text-blue-700" : "border-gray-300 bg-white text-gray-500 hover:bg-gray-50") text-sm font-medium">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                    </svg>
                </button>
                <button @onclick="@(() => isGridView = false)" 
                        class="relative inline-flex items-center px-4 py-2 rounded-r-md border @(!isGridView ? "border-blue-500 bg-blue-50 text-blue-700" : "border-gray-300 bg-white text-gray-500 hover:bg-gray-50") text-sm font-medium">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Loading State -->
        @if (loading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span class="ml-3 text-lg text-gray-600">@Localizer["LoadingProducts"]</span>
            </div>
        }
        else if (filteredProducts == null || !filteredProducts.Any())
        {
            <!-- Empty State -->
            <div class="text-center py-12">
                <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m16 0l-2-2m-2 2h4m-4 0l2-2"></path>
                </svg>
                <h3 class="mt-4 text-lg font-medium text-gray-900">@Localizer["NoProductsFound"]</h3>
                <p class="mt-2 text-gray-600">@Localizer["CreateFirstProduct"]</p>
                <div class="mt-6">
                    <a href="/admin/products/create" 
                       class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                        @Localizer["CreateProduct"]
                    </a>
                </div>
            </div>
        }
        else if (isGridView)
        {
            <!-- Grid View -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                @foreach (var product in filteredProducts)
                {
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow">
                        <div class="p-4">
                            @if (!string.IsNullOrEmpty(product.MainImage?.ImagePath))
                            {
                                <img src="@product.MainImage.ImagePath" alt="@product.Name" class="w-full h-48 object-cover rounded-lg mb-4" />
                            }
                            else
                            {
                                <div class="w-full h-48 bg-gray-200 rounded-lg flex items-center justify-center mb-4">
                                    <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                </div>
                            }
                            
                            <h3 class="text-lg font-semibold text-gray-900 mb-1">@product.Name</h3>
                            <p class="text-sm text-gray-600 mb-2">@product.Category?.Name</p>
                            
                            <div class="flex items-center space-x-2 text-sm mb-3">
                                <span class="font-bold text-blue-600">
                                    @if (product.Variants != null && product.Variants.Any())
                                    {
                                        var minPrice = product.Variants.Min(v => v.Price);
                                        var maxPrice = product.Variants.Max(v => v.Price);
                                        if (minPrice == maxPrice)
                                        {
                                            <text>@minPrice.ToString("F3") OMR</text>
                                        }
                                        else
                                        {
                                            <text>@minPrice.ToString("F3") - @maxPrice.ToString("F3") OMR</text>
                                        }
                                    }
                                    else
                                    {
                                        <text>N/A</text>
                                    }
                                </span>
                            </div>
                            
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex items-center space-x-1">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <svg class="w-3 h-3 @(i <= product.AverageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                        </svg>
                                    }
                                    <span class="text-xs text-gray-600">(@product.ReviewCount)</span>
                                </div>
                                
                                <span class="px-2 py-1 text-xs font-medium rounded-full @(product.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                    @(product.IsActive ? Localizer["Active"] : Localizer["Inactive"])
                                </span>
                            </div>
                            
                            <div class="flex space-x-2">
                                <a href="/admin/products/@product.Id/edit" 
                                   class="flex-1 inline-flex justify-center items-center px-3 py-2 border border-gray-300 rounded-md text-xs font-medium text-gray-700 bg-white hover:bg-gray-50">
                                    @Localizer["Edit"]
                                </a>
                                <button @onclick="() => ToggleProductStatus(product)" 
                                        class="flex-1 inline-flex justify-center items-center px-3 py-2 border border-gray-300 rounded-md text-xs font-medium @(product.IsActive ? "text-orange-700 hover:bg-orange-50" : "text-green-700 hover:bg-green-50") bg-white">
                                    @(product.IsActive ? Localizer["Deactivate"] : Localizer["Activate"])
                                </button>
                                <button @onclick="() => DeleteProduct(product)" 
                                        class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-xs font-medium text-red-700 bg-white hover:bg-red-50">
                                    @Localizer["Delete"]
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Table View -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Products"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Category"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Price"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Stock"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Rating"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Status"]</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">@Localizer["Actions"]</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var product in filteredProducts)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-12 w-12">
                                                @if (!string.IsNullOrEmpty(product.MainImage?.ImagePath))
                                                {
                                                    <img src="@product.MainImage.ImagePath" alt="@product.Name" class="h-12 w-12 rounded-lg object-cover" />
                                                }
                                                else
                                                {
                                                    <div class="h-12 w-12 bg-gray-200 rounded-lg flex items-center justify-center">
                                                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                        </svg>
                                                    </div>
                                                }
                                            </div>
                                            <div class="mr-4">
                                                <div class="text-sm font-medium text-gray-900">@product.Name</div>
                                                <div class="text-sm text-gray-500">@product.Sku</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                            @product.Category?.Name
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @if (product.Variants != null && product.Variants.Any())
                                        {
                                            var minPrice = product.Variants.Min(v => v.Price);
                                            var maxPrice = product.Variants.Max(v => v.Price);
                                            if (minPrice == maxPrice)
                                            {
                                                <text>@minPrice.ToString("F3") OMR</text>
                                            }
                                            else
                                            {
                                                <text>@minPrice.ToString("F3") - @maxPrice.ToString("F3") OMR</text>
                                            }
                                        }
                                        else
                                        {
                                            <text>N/A</text>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @{
                                            var totalStock = product.Variants?.Sum(v => v.StockQuantity) ?? 0;
                                            var stockClass = totalStock > 10 ? "text-green-600" : totalStock > 0 ? "text-yellow-600" : "text-red-600";
                                        }
                                        <span class="@stockClass font-medium">@totalStock</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center space-x-1">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <svg class="w-3 h-3 @(i <= product.AverageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                                </svg>
                                            }
                                            <span class="text-xs text-gray-600">(@product.ReviewCount)</span>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(product.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                            @(product.IsActive ? Localizer["Active"] : Localizer["Inactive"])
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                                        <a href="/admin/products/@product.Id/edit" class="text-blue-600 hover:text-blue-900 ml-3">@Localizer["Edit"]</a>
                                        <button @onclick="() => ToggleProductStatus(product)" 
                                                class="@(product.IsActive ? "text-orange-600 hover:text-orange-900" : "text-green-600 hover:text-green-900") ml-3">
                                            @(product.IsActive ? Localizer["Deactivate"] : Localizer["Activate"])
                                        </button>
                                        <button @onclick="() => DeleteProduct(product)" class="text-red-600 hover:text-red-900">@Localizer["Delete"]</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Product>? allProducts;
    private List<Product>? filteredProducts;
    private List<Category>? categories;
    private bool loading = true;
    private bool isGridView = true;
    private bool hasRendered = false;
    
    // Filters
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedStatus = "";
    private string sortBy = "name";
    
    // Stats
    private int totalProducts = 0;
    private int activeProducts = 0;
    private int outOfStockProducts = 0;
    private decimal averageRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDataAsync()
    {
        loading = true;
        try
        {
            allProducts = await ProductService.GetAllProductsAsync();
            categories = await CategoryService.GetAllCategoriesAsync();
            await CalculateStatsAsync();
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, string.Format(Localizer["ErrorLoadingData"], ex.Message));
            // Log error to console only after render (avoid JS interop during prerendering)
        }
        finally
        {
            loading = false;
        }
    }

    private async Task CalculateStatsAsync()
    {
        if (allProducts == null) return;
        
        totalProducts = allProducts.Count;
        activeProducts = allProducts.Count(p => p.IsActive);
        outOfStockProducts = allProducts.Count(p => p.Variants == null || p.Variants.All(v => v.StockQuantity == 0));
        averageRating = allProducts.Where(p => p.AverageRating > 0).Any() 
            ? allProducts.Where(p => p.AverageRating > 0).Average(p => p.AverageRating)
            : 0;
            
        await Task.CompletedTask;
    }

    private async Task ApplyFiltersAsync()
    {
        if (allProducts == null) return;

        var query = allProducts.AsQueryable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                   (p.Description != null && p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                                   p.Sku.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Category filter
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            if (int.TryParse(selectedCategory, out int categoryId))
            {
                query = query.Where(p => p.CategoryId == categoryId);
            }
        }

        // Status filter
        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            switch (selectedStatus)
            {
                case "active":
                    query = query.Where(p => p.IsActive);
                    break;
                case "inactive":
                    query = query.Where(p => !p.IsActive);
                    break;
                case "featured":
                    query = query.Where(p => p.IsFeatured);
                    break;
                case "out-of-stock":
                    query = query.Where(p => p.Variants == null || p.Variants.All(v => v.StockQuantity == 0));
                    break;
            }
        }

        // Sorting
        query = sortBy switch
        {
            "name" => query.OrderBy(p => p.Name),
            "price" => query.OrderBy(p => p.Variants != null && p.Variants.Any() ? p.Variants.Min(v => v.Price) : 0),
            "created" => query.OrderByDescending(p => p.CreatedAt),
            "rating" => query.OrderByDescending(p => p.AverageRating),
            _ => query.OrderBy(p => p.Name)
        };

        filteredProducts = query.ToList();
        await Task.CompletedTask;
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "name";
        await ApplyFiltersAsync();
    }

    private async Task ToggleProductStatus(Product product)
    {
        try
        {
            product.IsActive = !product.IsActive;
            await ProductService.UpdateProductAsync(product);
            await Toast.ShowSuccess(JSRuntime, string.Format(Localizer["ProductStatusChanged"], product.Name));
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, string.Format(Localizer["ErrorChangingStatus"], ex.Message));
        }
    }

    private async Task DeleteProduct(Product product)
    {
        if (!hasRendered) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", string.Format(Localizer["ConfirmDeleteProduct"], product.Name));
        if (confirmed)
        {
            try
            {
                await ProductService.DeleteProductAsync(product.Id);
                await Toast.ShowSuccess(JSRuntime, string.Format(Localizer["ProductDeleted"], product.Name));
                await LoadDataAsync();
            }
            catch (InvalidOperationException ex)
            {
                await Toast.ShowError(JSRuntime, string.Format(Localizer["CannotDeleteProduct"], ex.Message));
            }
            catch (Exception ex)
            {
                await Toast.ShowError(JSRuntime, string.Format(Localizer["ErrorDeletingProduct"], ex.Message));
            }
        }
    }
    
    private async Task ExportProducts()
    {
        if (!hasRendered) return;
        
        // TODO: Implement CSV export functionality
         await Toast.ShowError(JSRuntime, string.Format(Localizer["ExportFeatureSoon"] ));

    }
}