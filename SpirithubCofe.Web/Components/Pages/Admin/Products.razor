@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer

<div class="container mx-auto p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-base-content">Product Management</h1>
            <p class="text-base-content/70 mt-2">Manage your coffee products and inventory</p>
        </div>
        <div class="flex space-x-3">
            <button @onclick="ExportProducts" class="btn btn-outline btn-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                </svg>
                Export
            </button>
            <a href="/admin/products/create" class="btn btn-primary btn-sm">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add Product
            </a>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-base-content/60">Total Products</p>
                    <p class="text-2xl font-bold text-base-content">@totalProducts</p>
                </div>
                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m16 0l-2-2m-2 2h4m-4 0l2-2"></path>
                    </svg>
                </div>
            </div>
        </div>
        
        <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-base-content/60">Active Products</p>
                    <p class="text-2xl font-bold text-base-content">@activeProducts</p>
                </div>
                <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
            </div>
        </div>
        
        <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-base-content/60">Out of Stock</p>
                    <p class="text-2xl font-bold text-base-content">@outOfStockProducts</p>
                </div>
                <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                </div>
            </div>
        </div>
        
        <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-base-content/60">Avg Rating</p>
                    <p class="text-2xl font-bold text-base-content">@averageRating.ToString("F1")</p>
                </div>
                <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 mb-6">
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Search Products</span>
                    </label>
                    <input type="text" placeholder="Search by name or SKU" @bind="searchTerm" @oninput="OnSearchChanged" 
                           class="input input-bordered input-sm" />
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Category</span>
                    </label>
                    <select @bind="selectedCategory" @oninput="OnCategoryChanged" class="select select-bordered select-sm">
                        <option value="">All Categories</option>
                        @if (categories != null)
                        {
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Status</span>
                    </label>
                    <select @bind="selectedStatus" @oninput="OnStatusChanged" class="select select-bordered select-sm">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="outofstock">Out of Stock</option>
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Sort By</span>
                    </label>
                    <select @bind="sortBy" @oninput="OnSortChanged" class="select select-bordered select-sm">
                        <option value="name">Name</option>
                        <option value="price">Price</option>
                        <option value="created">Date Created</option>
                        <option value="rating">Rating</option>
                        <option value="stock">Stock</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Grid/Table Toggle -->
    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center space-x-2">
            <span class="text-sm text-base-content/60">Showing Results (@filteredProducts?.Count ?? 0)</span>
        </div>
        <div class="btn-group">
            <button @onclick="ToggleView" class="btn btn-sm @(isGridView ? "btn-primary" : "btn-ghost")">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                </svg>
            </button>
            <button @onclick="ToggleView" class="btn btn-sm @(!isGridView ? "btn-primary" : "btn-ghost")">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
            </button>
        </div>
    </div>

    <!-- Loading State -->
    @if (loading)
    {
        <div class="flex justify-center items-center py-12">
            <span class="loading loading-spinner loading-lg"></span>
        </div>
    }
    else if (filteredProducts == null || !filteredProducts.Any())
    {
        <!-- Empty State -->
        <div class="text-center py-12">
            <svg class="mx-auto h-16 w-16 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m16 0l-2-2m-2 2h4m-4 0l2-2"></path>
            </svg>
            <h3 class="mt-4 text-lg font-medium text-base-content">No Products Found</h3>
            <p class="mt-2 text-base-content/60">Create your first product to get started</p>
            <div class="mt-6">
                <a href="/admin/products/create" class="btn btn-primary">
                    Create Product
                </a>
            </div>
        </div>
    }
    else if (isGridView)
    {
        <!-- Grid View -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var product in filteredProducts)
            {
                <div class="card bg-base-100 shadow-sm border border-base-200 hover:shadow-md transition-shadow">
                    <figure class="px-4 pt-4">
                        @if (!string.IsNullOrEmpty(product.MainImage?.ImagePath))
                        {
                            <img src="@product.MainImage.ImagePath" alt="@product.Name" class="rounded-lg w-full h-48 object-cover" />
                        }
                        else
                        {
                            <div class="w-full h-48 bg-base-200 rounded-lg flex items-center justify-center">
                                <svg class="w-12 h-12 text-base-content/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                        }
                    </figure>
                    <div class="card-body px-4 pb-4">
                        <h2 class="card-title text-base">@product.Name</h2>
                        <p class="text-sm text-base-content/60">@product.Category?.Name</p>
                        
                        <div class="flex items-center space-x-2 text-sm">
                            <span class="font-bold text-primary">
                                @if (product.Variants.Any())
                                {
                                    var minPrice = product.Variants.Min(v => v.Price);
                                    var maxPrice = product.Variants.Max(v => v.Price);
                                    if (minPrice == maxPrice)
                                    {
                                        <text>@minPrice.ToString("C") OMR</text>
                                    }
                                    else
                                    {
                                        <text>@minPrice.ToString("C") - @maxPrice.ToString("C") OMR</text>
                                    }
                                }
                                else
                                {
                                    <text>N/A</text>
                                }
                            </span>
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <svg class="w-3 h-3 @(i <= product.AverageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                    </svg>
                                }
                                <span class="text-xs text-base-content/60">(@product.ReviewCount)</span>
                            </div>
                            
                            <div class="badge @(product.IsActive ? "badge-success" : "badge-error") badge-sm">
                                @(product.IsActive ? "Active" : "Inactive")
                            </div>
                        </div>
                        
                        <div class="card-actions justify-end mt-4">
                            <div class="dropdown dropdown-end">
                                <label tabindex="0" class="btn btn-ghost btn-sm">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                    </svg>
                                </label>
                                <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                    <li><a href="/admin/products/@product.Id">View</a></li>
                                    <li><a href="/admin/products/@product.Id/edit">Edit</a></li>
                                    <li><a @onclick="() => ToggleProductStatus(product)" class="@(product.IsActive ? "text-warning" : "text-success")">
                                        @(product.IsActive ? "Deactivate" : "Activate")
                                    </a></li>
                                    <li><a @onclick="() => DeleteProduct(product)" class="text-error">Delete</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Table View -->
        <div class="bg-base-100 rounded-xl shadow-sm border border-base-200 overflow-hidden">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Rating</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in filteredProducts)
                        {
                            <tr class="hover">
                                <td>
                                    <div class="flex items-center space-x-3">
                                        <div class="avatar">
                                            <div class="mask mask-squircle w-12 h-12">
                                                @if (!string.IsNullOrEmpty(product.MainImage?.ImagePath))
                                                {
                                                    <img src="@product.MainImage.ImagePath" alt="@product.Name" />
                                                }
                                                else
                                                {
                                                    <div class="bg-base-200 w-full h-full flex items-center justify-center">
                                                        <svg class="w-6 h-6 text-base-content/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                        </svg>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div>
                                            <div class="font-bold">@product.Name</div>
                                            <div class="text-sm opacity-50">@product.Sku</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-ghost badge-sm">@product.Category?.Name</span>
                                </td>
                                <td>
                                    @if (product.Variants.Any())
                                    {
                                        var minPrice = product.Variants.Min(v => v.Price);
                                        var maxPrice = product.Variants.Max(v => v.Price);
                                        if (minPrice == maxPrice)
                                        {
                                            <text>@minPrice.ToString("C") OMR</text>
                                        }
                                        else
                                        {
                                            <text>@minPrice.ToString("C") - @maxPrice.ToString("C") OMR</text>
                                        }
                                    }
                                    else
                                    {
                                        <text>N/A</text>
                                    }
                                </td>
                                <td>
                                    @{
                                        var totalStock = product.Variants.Sum(v => v.StockQuantity);
                                        var stockClass = totalStock > 10 ? "text-success" : totalStock > 0 ? "text-warning" : "text-error";
                                    }
                                    <span class="@stockClass font-medium">@totalStock</span>
                                </td>
                                <td>
                                    <div class="flex items-center space-x-1">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <svg class="w-3 h-3 @(i <= product.AverageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                            </svg>
                                        }
                                        <span class="text-xs">(@product.ReviewCount)</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="badge @(product.IsActive ? "badge-success" : "badge-error") badge-sm">
                                        @(product.IsActive ? "Active" : "Inactive")
                                    </div>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-xs">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                            </svg>
                                        </label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a href="/admin/products/@product.Id">View</a></li>
                                            <li><a href="/admin/products/@product.Id/edit">Edit</a></li>
                                            <li><a @onclick="() => ToggleProductStatus(product)" class="@(product.IsActive ? "text-warning" : "text-success")">
                                                @(product.IsActive ? "Deactivate" : "Activate")
                                            </a></li>
                                            <li><a @onclick="() => DeleteProduct(product)" class="text-error">Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private List<Product>? allProducts;
    private List<Product>? filteredProducts;
    private List<Category>? categories;
    private bool loading = true;
    private bool isGridView = true;
    private bool hasRendered = false;
    
    // Filters
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedStatus = "";
    private string sortBy = "name";
    
    // Stats
    private int totalProducts = 0;
    private int activeProducts = 0;
    private int outOfStockProducts = 0;
    private decimal averageRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDataAsync()
    {
        loading = true;
        try
        {
            allProducts = await ProductService.GetAllProductsAsync();
            categories = await CategoryService.GetAllCategoriesAsync();
            await CalculateStatsAsync();
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
            }
        }
        finally
        {
            loading = false;
        }
    }

    private async Task CalculateStatsAsync()
    {
        if (allProducts == null) return;
        
        totalProducts = allProducts.Count;
        activeProducts = allProducts.Count(p => p.IsActive);
        outOfStockProducts = allProducts.Count(p => p.Variants.All(v => v.StockQuantity == 0));
        averageRating = allProducts.Where(p => p.AverageRating > 0).Any() 
            ? allProducts.Where(p => p.AverageRating > 0).Average(p => p.AverageRating)
            : 0;
            
        await Task.CompletedTask;
    }

    private async Task ApplyFiltersAsync()
    {
        if (allProducts == null) return;

        var query = allProducts.AsQueryable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                   p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Category filter
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            if (int.TryParse(selectedCategory, out int categoryId))
            {
                query = query.Where(p => p.CategoryId == categoryId);
            }
        }

        // Status filter
        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            switch (selectedStatus)
            {
                case "active":
                    query = query.Where(p => p.IsActive);
                    break;
                case "inactive":
                    query = query.Where(p => !p.IsActive);
                    break;
                case "featured":
                    query = query.Where(p => p.IsFeatured);
                    break;
                case "out-of-stock":
                    query = query.Where(p => p.Variants.All(v => v.StockQuantity == 0));
                    break;
            }
        }

        // Sorting
        query = sortBy switch
        {
            "name" => query.OrderBy(p => p.Name),
            "price" => query.OrderBy(p => p.Variants.Min(v => v.Price)),
            "created" => query.OrderByDescending(p => p.CreatedAt),
            "rating" => query.OrderByDescending(p => p.AverageRating),
            _ => query.OrderBy(p => p.Name)
        };

        filteredProducts = query.ToList();
        await Task.CompletedTask;
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        await ApplyFiltersAsync();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "name";
        await ApplyFiltersAsync();
    }

    private void ToggleView()
    {
        isGridView = !isGridView;
    }

    private async Task ToggleProductStatus(Product product)
    {
        try
        {
            product.IsActive = !product.IsActive;
            await ProductService.UpdateProductAsync(product);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
            }
        }
    }

    private async Task DeleteProduct(Product product)
    {
        if (!hasRendered) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{product.Name}'?");
        if (confirmed)
        {
            try
            {
                await ProductService.DeleteProductAsync(product.Id);
                await LoadDataAsync();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
            }
        }
    }

    private async Task ExportProducts()
    {
        if (!hasRendered) return;
        
        // TODO: Implement CSV export functionality
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality coming soon!");
    }
}