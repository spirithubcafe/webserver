@page "/admin/slides"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@inject SpirithubCofe.Application.Services.ISlideService SlideService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using SpirithubCofe.Application.DTOs
@using SpirithubCofe.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@using SpirithubCofe.Web.Components.Shared
@rendermode InteractiveServer

<PageTitle>Slide Management - SpirithubCofe Admin</PageTitle>

<div class="min-h-screen bg-gray-50 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Page Header -->
        <div class="bg-white shadow-sm rounded-lg border mb-6">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Slideshow Management</h1>
                        <p class="mt-1 text-sm text-gray-600">Manage homepage slides with professional controls</p>
                    </div>
                    <div class="mt-4 sm:mt-0 flex space-x-3">
                        <button type="button" @onclick="ShowCreateForm" 
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add New Slide
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="px-6 py-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 01-2 2z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-blue-900">Total Slides</p>
                                <p class="text-2xl font-bold text-blue-600">@slides.Count</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-green-50 rounded-lg p-4 border border-green-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-green-900">Active Slides</p>
                                <p class="text-2xl font-bold text-green-600">@slides.Count(s => s.IsActive)</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-yellow-900">Inactive Slides</p>
                                <p class="text-2xl font-bold text-yellow-600">@slides.Count(s => !s.IsActive)</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        @if (showCreateForm || editingSlide != null)
        {
            <!-- Create/Edit Form -->
            <div class="bg-white shadow-sm rounded-lg border mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-lg font-semibold text-gray-900">
                                @(editingSlide != null ? "Edit Slide" : "Add New Slide")
                            </h2>
                            <p class="text-sm text-gray-600">
                                @(editingSlide != null ? "Update slide information and settings" : "Create a new slide for the homepage slideshow")
                            </p>
                        </div>
                        <button type="button" @onclick="CancelForm" 
                                class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    <form @onsubmit:preventDefault="true" class="space-y-6">
                        
                        <!-- Slide Image -->
                        <div class="space-y-4">
                            <div class="flex items-center space-x-2">
                                <label class="block text-sm font-medium text-gray-700">
                                    Slide Image <span class="text-red-500">*</span>
                                </label>
                                <span class="text-xs text-gray-500">(Recommended: 1920x600px)</span>
                            </div>
                            
                            <FileUpload Folder="slides" 
                                       FileType="image" 
                                       Prefix="slide"
                                       @bind-CurrentFileUrl="currentSlide.ImagePath"
                                       OnFileUploaded="OnImageUploaded" />
                        </div>

                        <!-- Basic Information -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">
                                    Title (English) <span class="text-red-500">*</span>
                                </label>
                                <input type="text" @bind="currentSlide.Title" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                       placeholder="Welcome to SpirithubCofe" required />
                            </div>
                            
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Title (Arabic)</label>
                                <input type="text" @bind="currentSlide.TitleAr" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                       placeholder="مرحباً بكم في سبيريت هب كافيه" dir="rtl" />
                            </div>
                        </div>

                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">
                                    Subtitle (English) <span class="text-red-500">*</span>
                                </label>
                                <textarea @bind="currentSlide.Subtitle" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                          placeholder="Discover premium coffee from around the world" required></textarea>
                            </div>
                            
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Subtitle (Arabic)</label>
                                <textarea @bind="currentSlide.SubtitleAr" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                          placeholder="اكتشف القهوة المميزة من جميع أنحاء العالم" dir="rtl"></textarea>
                            </div>
                        </div>

                        <!-- Button Configuration -->
                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Call-to-Action Button</h3>
                            
                            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Button Text (English)</label>
                                    <input type="text" @bind="currentSlide.ButtonText" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="Shop Now" />
                                </div>
                                
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Button Text (Arabic)</label>
                                    <input type="text" @bind="currentSlide.ButtonTextAr" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="تسوق الآن" dir="rtl" />
                                </div>
                                
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Button URL</label>
                                    <input type="url" @bind="currentSlide.ButtonUrl" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="/products" />
                                </div>
                            </div>
                        </div>

                        <!-- Design Settings -->
                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Design Settings</h3>
                            
                            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Background Color</label>
                                    <select @bind="currentSlide.BackgroundColor" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="">Default (Image Background)</option>
                                        <option value="bg-gray-900">Dark Overlay</option>
                                        <option value="bg-blue-900">Blue Overlay</option>
                                        <option value="bg-green-900">Green Overlay</option>
                                        <option value="bg-purple-900">Purple Overlay</option>
                                    </select>
                                </div>
                                
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Text Color</label>
                                    <select @bind="currentSlide.TextColor" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="text-white">White Text</option>
                                        <option value="text-gray-900">Dark Text</option>
                                        <option value="text-blue-600">Blue Text</option>
                                        <option value="text-green-600">Green Text</option>
                                    </select>
                                </div>
                                
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Display Order</label>
                                    <input type="number" @bind="currentSlide.Order" min="0"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                           placeholder="0" />
                                    <p class="text-xs text-gray-500">Lower numbers appear first</p>
                                </div>
                            </div>
                        </div>

                        <!-- Status -->
                        <div class="border-t border-gray-200 pt-6">
                            <div class="flex items-center space-x-3">
                                <input type="checkbox" @bind="currentSlide.IsActive" 
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                <label class="text-sm font-medium text-gray-700">Active Slide</label>
                                <span class="text-xs text-gray-500">(Only active slides will be displayed on the homepage)</span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="border-t border-gray-200 pt-6">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
                                <div class="text-sm text-gray-600">
                                    @(editingSlide != null ? "Review changes before updating the slide." : "Review all information before creating the slide.")
                                </div>
                                <div class="flex space-x-3">
                                    <button type="button" @onclick="CancelForm" 
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                        Cancel
                                    </button>
                                    <button type="button" @onclick="SaveSlide" disabled="@saving"
                                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50">
                                        @if (saving)
                                        {
                                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                            </svg>
                                        }
                                        @(editingSlide != null ? "Update Slide" : "Create Slide")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        }

        <!-- Slides List -->
        <div class="bg-white shadow-sm rounded-lg border">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Current Slides</h2>
                <p class="text-sm text-gray-600">Manage existing slides and their display order</p>
            </div>
            
            <div class="p-6">
                @if (slides.Any())
                {
                    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        @foreach (var slide in slides.OrderBy(s => s.Order))
                        {
                            <div class="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                                <!-- Slide Image -->
                                <div class="aspect-w-16 aspect-h-6 bg-gray-200">
                                    @if (!string.IsNullOrEmpty(slide.ImagePath))
                                    {
                                        <img src="@slide.ImagePath" alt="@slide.Title" class="w-full h-32 object-cover" />
                                    }
                                    else
                                    {
                                        <div class="w-full h-32 bg-gray-100 flex items-center justify-center">
                                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 01-2 2z"></path>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                
                                <!-- Slide Content -->
                                <div class="p-4">
                                    <div class="flex items-start justify-between mb-2">
                                        <div class="flex-1">
                                            <h3 class="text-sm font-semibold text-gray-900 truncate">@slide.Title</h3>
                                            <p class="text-xs text-gray-600 truncate">@slide.Subtitle</p>
                                        </div>
                                        <div class="ml-2 flex-shrink-0">
                                            @if (slide.IsActive)
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    Inactive
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center justify-between text-xs text-gray-500 mb-3">
                                        <span>Order: @slide.Order</span>
                                        <span>@slide.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    
                                    <!-- Action Buttons -->
                                    <div class="flex space-x-2">
                                        <button @onclick="() => EditSlide(slide)" 
                                                class="flex-1 text-xs bg-blue-50 text-blue-700 hover:bg-blue-100 px-3 py-2 rounded-md border border-blue-200">
                                            Edit
                                        </button>
                                        <button @onclick="() => ToggleSlideStatus(slide.Id)" 
                                                class="flex-1 text-xs @(slide.IsActive ? "bg-yellow-50 text-yellow-700 hover:bg-yellow-100 border-yellow-200" : "bg-green-50 text-green-700 hover:bg-green-100 border-green-200") px-3 py-2 rounded-md border">
                                            @(slide.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                        <button @onclick="() => DeleteSlide(slide.Id)" 
                                                class="flex-1 text-xs bg-red-50 text-red-700 hover:bg-red-100 px-3 py-2 rounded-md border border-red-200">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-12">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 01-2 2z"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No slides</h3>
                        <p class="mt-1 text-sm text-gray-500">Get started by creating your first slide.</p>
                        <div class="mt-6">
                            <button type="button" @onclick="ShowCreateForm"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                </svg>
                                Add Your First Slide
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<SlideDto> slides = new();
    private SlideDto currentSlide = new() { IsActive = true, TextColor = "text-white" };
    private SlideDto? editingSlide = null;
    private bool showCreateForm = false;
    private bool saving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSlides();
    }

    private async Task LoadSlides()
    {
        try
        {
            var result = await SlideService.GetAllSlidesAsync();
            if (result.Success)
            {
                slides = result.Slides.ToList();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading slides: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private void ShowCreateForm()
    {
        currentSlide = new() { IsActive = true, TextColor = "text-white", Order = slides.Count };
        editingSlide = null;
        showCreateForm = true;
    }

    private void EditSlide(SlideDto slide)
    {
        editingSlide = slide;
        currentSlide = new SlideDto
        {
            Id = slide.Id,
            Title = slide.Title,
            TitleAr = slide.TitleAr,
            Subtitle = slide.Subtitle,
            SubtitleAr = slide.SubtitleAr,
            ImagePath = slide.ImagePath,
            ButtonText = slide.ButtonText,
            ButtonTextAr = slide.ButtonTextAr,
            ButtonUrl = slide.ButtonUrl,
            Order = slide.Order,
            IsActive = slide.IsActive,
            BackgroundColor = slide.BackgroundColor,
            TextColor = slide.TextColor
        };
        showCreateForm = true;
    }

    private void CancelForm()
    {
        showCreateForm = false;
        editingSlide = null;
        currentSlide = new() { IsActive = true, TextColor = "text-white" };
    }

    private void OnImageUploaded(FileUpload.UploadResult result)
    {
        if (result.Success)
        {
            currentSlide.ImagePath = result.FileUrl;
            StateHasChanged();
        }
    }

    private async Task SaveSlide()
    {
        saving = true;
        try
        {
            if (editingSlide != null)
            {
                // Update existing slide
                var updateDto = new UpdateSlideDto
                {
                    Id = currentSlide.Id,
                    Title = currentSlide.Title,
                    TitleAr = currentSlide.TitleAr,
                    Subtitle = currentSlide.Subtitle,
                    SubtitleAr = currentSlide.SubtitleAr,
                    ImagePath = currentSlide.ImagePath,
                    ButtonText = currentSlide.ButtonText,
                    ButtonTextAr = currentSlide.ButtonTextAr,
                    ButtonUrl = currentSlide.ButtonUrl,
                    Order = currentSlide.Order,
                    IsActive = currentSlide.IsActive,
                    BackgroundColor = currentSlide.BackgroundColor,
                    TextColor = currentSlide.TextColor
                };

                var result = await SlideService.UpdateSlideAsync(updateDto);
                if (result.Success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Slide updated successfully!");
                    CancelForm();
                    await LoadSlides();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error updating slide: {result.Message}");
                }
            }
            else
            {
                // Create new slide
                var createDto = new CreateSlideDto
                {
                    Title = currentSlide.Title,
                    TitleAr = currentSlide.TitleAr,
                    Subtitle = currentSlide.Subtitle,
                    SubtitleAr = currentSlide.SubtitleAr,
                    ImagePath = currentSlide.ImagePath,
                    ButtonText = currentSlide.ButtonText,
                    ButtonTextAr = currentSlide.ButtonTextAr,
                    ButtonUrl = currentSlide.ButtonUrl,
                    Order = currentSlide.Order,
                    IsActive = currentSlide.IsActive,
                    BackgroundColor = currentSlide.BackgroundColor,
                    TextColor = currentSlide.TextColor
                };

                var result = await SlideService.CreateSlideAsync(createDto);
                if (result.Success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Slide created successfully!");
                    CancelForm();
                    await LoadSlides();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error creating slide: {result.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving slide: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private async Task ToggleSlideStatus(int slideId)
    {
        try
        {
            var result = await SlideService.ToggleSlideStatusAsync(slideId);
            if (result.Success)
            {
                await LoadSlides();
                await JSRuntime.InvokeVoidAsync("alert", "Slide status updated successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating slide status: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating slide status: {ex.Message}");
        }
    }

    private async Task DeleteSlide(int slideId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this slide? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                var success = await SlideService.DeleteSlideAsync(slideId);
                if (success)
                {
                    await LoadSlides();
                    await JSRuntime.InvokeVoidAsync("alert", "Slide deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting slide. Please try again.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting slide: {ex.Message}");
            }
        }
    }
}