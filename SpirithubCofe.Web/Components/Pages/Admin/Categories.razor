@page "/admin/categories"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@using SpirithubCofe.Web.Components.Shared
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@rendermode InteractiveServer

<PageTitle>Category Management - SpirithubCofe Admin</PageTitle>

<Toast />

<div class="min-h-screen bg-gray-50 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Page Header -->
        <div class="bg-white shadow-sm rounded-lg mb-6">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Category Management</h1>
                        <p class="mt-1 text-sm text-gray-600">Manage product categories with professional controls</p>
                    </div>
                    <div class="mt-4 sm:mt-0 flex space-x-3">
                        <button type="button" @onclick="ShowCreateForm" 
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add New Category
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="px-6 py-4">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-blue-900">Total Categories</p>
                                <p class="text-2xl font-bold text-blue-600">@totalCategories</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-green-50 rounded-lg p-4 border border-green-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-green-900">Active Categories</p>
                                <p class="text-2xl font-bold text-green-600">@activeCategories</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-purple-50 rounded-lg p-4 border border-purple-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-purple-900">On Homepage</p>
                                <p class="text-2xl font-bold text-purple-600">@homepageCategories</p>
                            </div>
                        </div>
                    </div>
                    <div class="bg-amber-50 rounded-lg p-4 border border-amber-200">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-8 w-8 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-amber-900">With Products</p>
                                <p class="text-2xl font-bold text-amber-600">@categoriesWithProducts</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        @if (showCreateForm || editingCategory != null)
        {
            <!-- Create/Edit Form -->
            <div class="bg-white shadow-sm rounded-lg mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-lg font-semibold text-gray-900">
                                @(editingCategory?.Id > 0 ? "Edit Category" : "Add New Category")
                            </h2>
                            <p class="text-sm text-gray-600">
                                @(editingCategory?.Id > 0 ? "Update category information and settings" : "Create a new category for product organization")
                            </p>
                        </div>
                        <button type="button" @onclick="CancelForm" 
                                class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    <form @onsubmit:preventDefault="true" class="space-y-6">
                        
                        <!-- Category Image -->
                        <div class="space-y-4">
                            <div class="flex items-center space-x-2">
                                <label class="block text-sm font-medium text-gray-700">
                                    Category Image <span class="text-red-500">*</span>
                                </label>
                                <span class="text-xs text-gray-500">(Recommended: 400x300px)</span>
                            </div>
                            
                            <FileUpload Folder="categories" 
                                       FileType="image" 
                                       Prefix="category"
                                       @bind-CurrentFileUrl="currentCategory.ImagePath"
                                       OnFileUploaded="OnImageUploaded" />
                        </div>

                        <!-- Basic Information -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">
                                    Name (English) <span class="text-red-500">*</span>
                                </label>
                                <input type="text" @bind="currentCategory.Name" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500" 
                                       placeholder="Coffee Beans" required />
                            </div>
                            
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Name (Arabic)</label>
                                <input type="text" @bind="currentCategory.NameAr" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500" 
                                       placeholder="حبوب القهوة" dir="rtl" />
                            </div>
                        </div>

                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">
                                Slug <span class="text-red-500">*</span>
                            </label>
                            <input type="text" @bind="currentCategory.Slug" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500 font-mono" 
                                   placeholder="coffee-beans" required />
                            <p class="text-xs text-gray-500">Used in URLs - must be unique</p>
                        </div>

                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Description (English)</label>
                                <textarea @bind="currentCategory.Description" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500" 
                                          placeholder="Premium coffee beans from around the world"></textarea>
                            </div>
                            
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Description (Arabic)</label>
                                <textarea @bind="currentCategory.DescriptionAr" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500" 
                                          placeholder="حبوب قهوة مميزة من جميع أنحاء العالم" dir="rtl"></textarea>
                            </div>
                        </div>

                        <!-- Settings -->
                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Category Settings</h3>
                            
                            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700">Display Order</label>
                                    <input type="number" @bind="currentCategory.DisplayOrder" min="0"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-amber-500" 
                                           placeholder="0" />
                                    <p class="text-xs text-gray-500">Lower numbers appear first</p>
                                </div>
                                
                                <div class="space-y-4">
                                    <div class="flex items-center space-x-3">
                                        <input type="checkbox" @bind="currentCategory.IsActive" 
                                               class="h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded" />
                                        <label class="text-sm font-medium text-gray-700">Active Category</label>
                                    </div>
                                    <span class="text-xs text-gray-500">Only active categories will be visible to customers</span>
                                </div>
                                
                                <div class="space-y-4">
                                    <div class="flex items-center space-x-3">
                                        <input type="checkbox" @bind="currentCategory.IsDisplayedOnHomepage" 
                                               class="h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded" />
                                        <label class="text-sm font-medium text-gray-700">Show on Homepage</label>
                                    </div>
                                    <span class="text-xs text-gray-500">Display this category on the homepage</span>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="border-t border-gray-200 pt-6">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
                                <div class="text-sm text-gray-600">
                                    @(editingCategory?.Id > 0 ? "Review changes before updating the category." : "Review all information before creating the category.")
                                </div>
                                <div class="flex space-x-3">
                                    <button type="button" @onclick="CancelForm" 
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                        Cancel
                                    </button>
                                    <button type="button" @onclick="SaveCategory" disabled="@saving"
                                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 disabled:opacity-50">
                                        @if (saving)
                                        {
                                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                            </svg>
                                        }
                                        @(editingCategory?.Id > 0 ? "Update Category" : "Create Category")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        }    <!-- Stats Cards -->
 

    <!-- Filters -->
    <div class="bg-white rounded-xl shadow-sm border-gray-100 mb-6">
        <div class="p-6">
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                    <input type="text" placeholder="@Localizer["SearchCategories"]" @bind="searchTerm" @onkeyup="OnSearchChanged"
                           class="w-full px-4 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                </div>
                <select @bind="selectedStatus" class="px-4 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="homepage">Shown on Homepage</option>
                    <option value="hidden">Hidden from Homepage</option>
                </select>
            </div>
        </div>
    </div>

        <!-- Categories List -->
        <div class="bg-white shadow-sm rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Current Categories</h2>
                <p class="text-sm text-gray-600">Manage existing categories and their display order</p>
            </div>
            
            <div class="p-6">
                @if (allCategories.Any())
                {
                    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        @foreach (var category in filteredCategories.OrderBy(c => c.DisplayOrder))
                        {
                            <div class="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                                <!-- Category Image -->
                                <div class="aspect-square bg-gray-200">
                                    @if (!string.IsNullOrEmpty(category.ImagePath))
                                    {
                                        <img src="@category.ImagePath" alt="@category.Name" class="w-full h-full object-cover" />
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                
                                <!-- Category Content -->
                                <div class="p-4">
                                    <div class="flex items-start justify-between mb-2">
                                        <div class="flex-1">
                                            <h3 class="text-sm font-semibold text-gray-900 truncate">@category.Name</h3>
                                            @if (!string.IsNullOrEmpty(category.NameAr))
                                            {
                                                <p class="text-xs text-gray-600 truncate" dir="rtl">@category.NameAr</p>
                                            }
                                            <p class="text-xs text-gray-400 font-mono truncate">@category.Slug</p>
                                        </div>
                                        <div class="ml-2 flex-shrink-0">
                                            @if (category.IsActive)
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    Inactive
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="space-y-2 mb-3">
                                        <div class="flex items-center justify-between text-xs text-gray-500">
                                            <span>Display Order: @category.DisplayOrder</span>
                                            <span>Products: @(category.Products?.Count ?? 0)</span>
                                        </div>
                                        
                                        <div class="flex items-center justify-between text-xs">
                                            <span class="text-gray-500">Homepage:</span>
                                            @if (category.IsDisplayedOnHomepage)
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                    Visible
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                    Hidden
                                                </span>
                                            }
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(category.Description))
                                        {
                                            <div class="pt-2 border-t border-gray-100">
                                                <p class="text-xs text-gray-600 line-clamp-2">@category.Description</p>
                                            </div>
                                        }
                                    </div>
                                    
                                    <!-- Action Buttons -->
                                    <div class="flex space-x-2">
                                        <button @onclick="() => EditCategory(category)" 
                                                class="flex-1 text-xs bg-amber-50 text-amber-700 hover:bg-amber-100 px-3 py-2 rounded-md border border-amber-200">
                                            Edit
                                        </button>
                                        <button @onclick="() => ToggleCategoryStatus(category.Id)" 
                                                class="flex-1 text-xs @(category.IsActive ? "bg-yellow-50 text-yellow-700 hover:bg-yellow-100 border-yellow-200" : "bg-green-50 text-green-700 hover:bg-green-100 border-green-200") px-3 py-2 rounded-md border">
                                            @(category.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                        <button @onclick="() => DeleteCategory(category)" 
                                                class="flex-1 text-xs bg-red-50 text-red-700 hover:bg-red-100 px-3 py-2 rounded-md border border-red-200">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-12">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No categories</h3>
                        <p class="mt-1 text-sm text-gray-500">Get started by creating your first category.</p>
                        <div class="mt-6">
                            <button type="button" @onclick="ShowCreateForm"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                </svg>
                                Add Your First Category
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Category> allCategories = new();
    private List<Category> filteredCategories = new();
    private Category currentCategory = new() { IsActive = true, IsDisplayedOnHomepage = true };
    private Category? editingCategory = null;
    private bool showCreateForm = false;
    private bool saving = false;

    // Stats
    private int totalCategories = 0;
    private int activeCategories = 0;
    private int homepageCategories = 0;
    private int categoriesWithProducts = 0;

    // Filter properties
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            allCategories = await CategoryService.GetAllCategoriesAsync();
            ApplyFilters();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error loading categories: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        var filteredQuery = allCategories.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredQuery = filteredQuery.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (c.NameAr?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true));
        }

        filteredQuery = selectedStatus switch
        {
            "active" => filteredQuery.Where(c => c.IsActive),
            "inactive" => filteredQuery.Where(c => !c.IsActive),
            "homepage" => filteredQuery.Where(c => c.IsDisplayedOnHomepage),
            "hidden" => filteredQuery.Where(c => !c.IsDisplayedOnHomepage),
            _ => filteredQuery
        };

        filteredCategories = filteredQuery.OrderBy(c => c.DisplayOrder).ThenBy(c => c.Name).ToList();
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void CalculateStats()
    {
        totalCategories = allCategories.Count;
        activeCategories = allCategories.Count(c => c.IsActive);
        homepageCategories = allCategories.Count(c => c.IsDisplayedOnHomepage);
        categoriesWithProducts = allCategories.Count(c => c.Products?.Any() == true);
    }

    private async Task ShowCreateForm()
    {
        currentCategory = new() { IsActive = true, IsDisplayedOnHomepage = true, DisplayOrder = allCategories.Count };
        editingCategory = null;
        showCreateForm = true;
        
        // Scroll to top to show the create form
        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async Task EditCategory(Category category)
    {
        editingCategory = category;
        currentCategory = new Category
        {
            Id = category.Id,
            Name = category.Name,
            NameAr = category.NameAr,
            Slug = category.Slug,
            Description = category.Description,
            DescriptionAr = category.DescriptionAr,
            ImagePath = category.ImagePath,
            DisplayOrder = category.DisplayOrder,
            IsActive = category.IsActive,
            IsDisplayedOnHomepage = category.IsDisplayedOnHomepage
        };
        showCreateForm = true;
        
        // Scroll to top to show the edit form
        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    private void CancelForm()
    {
        showCreateForm = false;
        editingCategory = null;
        currentCategory = new() { IsActive = true, IsDisplayedOnHomepage = true };
    }

    private void OnImageUploaded(FileUpload.UploadResult result)
    {
        if (result.Success)
        {
            currentCategory.ImagePath = result.FileUrl;
            StateHasChanged();
        }
    }

    private async Task SaveCategory()
    {
        saving = true;
        try
        {
            if (editingCategory != null)
            {
                // Update existing category
                currentCategory.UpdatedAt = DateTime.UtcNow;
                await CategoryService.UpdateCategoryAsync(currentCategory);
                await Toast.ShowSuccess(JSRuntime, "Category updated successfully!");
            }
            else
            {
                // Create new category
                currentCategory.CreatedAt = DateTime.UtcNow;
                currentCategory.UpdatedAt = DateTime.UtcNow;
                await CategoryService.CreateCategoryAsync(currentCategory);
                await Toast.ShowSuccess(JSRuntime, "Category created successfully!");
            }
            
            CancelForm();
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error saving category: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private async Task ToggleCategoryStatus(int categoryId)
    {
        try
        {
            var category = allCategories.FirstOrDefault(c => c.Id == categoryId);
            if (category != null)
            {
                category.IsActive = !category.IsActive;
                category.UpdatedAt = DateTime.UtcNow;
                await CategoryService.UpdateCategoryAsync(category);
                await LoadCategories();
                await Toast.ShowSuccess(JSRuntime, "Category status updated successfully!");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowError(JSRuntime, $"Error updating category status: {ex.Message}");
        }
    }

    private async Task DeleteCategory(Category category)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                var canDeleteResult = await CategoryService.CanDeleteCategoryAsync(category.Id);
                if (!canDeleteResult.CanDelete)
                {
                    await Toast.ShowError(JSRuntime, $"Cannot delete category '{category.Name}' because it contains {canDeleteResult.ProductCount} product(s). Please move or delete the products first.");
                    return;
                }

                var success = await CategoryService.DeleteCategoryAsync(category.Id);
                if (success)
                {
                    await LoadCategories();
                    await Toast.ShowSuccess(JSRuntime, "Category deleted successfully!");
                }
                else
                {
                    await Toast.ShowError(JSRuntime, "Error deleting category. Please try again.");
                }
            }
            catch (Exception ex)
            {
                await Toast.ShowError(JSRuntime, $"Error deleting category: {ex.Message}");
            }
        }
    }
}

<script>
    window.scrollToTop = function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    };
</script>