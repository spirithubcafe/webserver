@page "/admin/categories"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using SpirithubCofe.Domain.Entities
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@rendermode InteractiveServer

<div class="p-6">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">Categories Management</h1>
                <p class="text-gray-600">Manage your product categories and homepage display settings</p>
            </div>
            <button @onclick="ShowCreateForm" 
                    class="bg-amber-600 hover:bg-amber-700 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center gap-2">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Add Category
            </button>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (showSuccessMessage)
    {
        <div class="mb-6 bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700 font-medium">@successMessage</p>
                </div>
                <div class="ml-auto pl-3">
                    <button @onclick="() => showSuccessMessage = false" class="text-green-400 hover:text-green-600">
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    }

    @if (showErrorMessage)
    {
        <div class="mb-6 bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700 font-medium">@errorMessage</p>
                </div>
                <div class="ml-auto pl-3">
                    <button @onclick="() => showErrorMessage = false" class="text-red-400 hover:text-red-600">
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-sm p-6 border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                    <svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">Total Categories</p>
                    <p class="text-2xl font-semibold text-gray-900">@totalCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                    <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">Active Categories</p>
                    <p class="text-2xl font-semibold text-gray-900">@activeCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-purple-100 rounded-lg">
                    <svg class="w-6 h-6 text-purple-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">On Homepage</p>
                    <p class="text-2xl font-semibold text-gray-900">@homepageCategories</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm p-6 border-gray-100">
            <div class="flex items-center">
                <div class="p-2 bg-amber-100 rounded-lg">
                    <svg class="w-6 h-6 text-amber-600" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9 12a5 5 0 100-10 5 5 0 000 10zm0-8a3 3 0 110 6 3 3 0 010-6zm7 12a7 7 0 11-14 0h14z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-500">With Products</p>
                    <p class="text-2xl font-semibold text-gray-900">@categoriesWithProducts</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-xl shadow-sm border-gray-100 mb-6">
        <div class="p-6">
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                    <input type="text" placeholder="@Localizer["SearchCategories"]" @bind="searchTerm" @onkeyup="OnSearchChanged"
                           class="w-full px-4 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                </div>
                <select @bind="selectedStatus" class="px-4 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="homepage">Shown on Homepage</option>
                    <option value="hidden">Hidden from Homepage</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Categories Grid -->
    @if (loading)
    {
        <div class="text-center py-12">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600 mx-auto"></div>
            <p class="mt-2 text-sm text-gray-500">Loading categories...</p>
        </div>
    }
    else if (filteredCategories == null || !filteredCategories.Any())
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No categories found</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by creating your first category.</p>
            <div class="mt-6">
                <button @onclick="ShowCreateForm" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                    Add Category
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var category in filteredCategories)
            {
                <div class="bg-white rounded-xl shadow-sm border-gray-100 p-6 hover:shadow-md transition-shadow">
                    <!-- Category Image -->
                    <div class="mb-4">
                        @if (!string.IsNullOrEmpty(category.ImagePath))
                        {
                            <img src="@category.ImagePath" alt="@category.Name" class="w-full h-32 object-cover rounded-lg" />
                        }
                        else
                        {
                            <div class="w-full h-32 bg-gray-100 rounded-lg flex items-center justify-center">
                                <svg class="w-12 h-12 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                        }
                    </div>

                    <div class="flex items-start justify-between mb-4">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold text-gray-900">@category.Name</h3>
                            @if (!string.IsNullOrEmpty(category.NameAr))
                            {
                                <p class="text-sm text-gray-500 mt-1" dir="rtl">@category.NameAr</p>
                            }
                            <p class="text-xs text-gray-400 font-mono mt-1">@category.Slug</p>
                        </div>
                        <div class="flex gap-2">
                            <button @onclick="() => EditCategory(category)"
                                    class="p-2 text-gray-500 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                </svg>
                            </button>
                            <button @onclick="() => DeleteCategory(category)"
                                    class="p-2 text-gray-500 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Status</span>
                            <span class="@(category.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 rounded-full text-xs font-medium">
                                @(category.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Homepage</span>
                            <span class="@(category.IsDisplayedOnHomepage ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800") px-2 py-1 rounded-full text-xs font-medium">
                                @(category.IsDisplayedOnHomepage ? "Visible" : "Hidden")
                            </span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Display Order</span>
                            <span class="text-sm font-medium text-gray-900">@category.DisplayOrder</span>
                        </div>

                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-500">Products</span>
                            <span class="text-sm font-medium text-gray-900">@(category.Products?.Count ?? 0)</span>
                        </div>

                        @if (!string.IsNullOrEmpty(category.Description))
                        {
                            <div class="pt-2 border-t border-gray-100">
                                <p class="text-sm text-gray-600 line-clamp-2">@category.Description</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Category Form Modal -->
@if (showCreateModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="() => showCreateModal = false">
        <div class="relative top-20 mx-auto p-5 w-full max-w-lg bg-white rounded-lg shadow-lg" @onclick:stopPropagation="true">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">@(editingCategory?.Id > 0 ? @Localizer["EditCategory"] : @Localizer["CreateNewCategory"])</h3>
                <button @onclick="() => showCreateModal = false" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <form @onsubmit:preventDefault="true">
                @if (editingCategory != null)
                {
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Name (English)</label>
                            <input type="text" @bind="editingCategory.Name" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                        </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name (Arabic)</label>
                        <input type="text" @bind="editingCategory.NameAr" dir="rtl" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Slug</label>
                        <input type="text" @bind="editingCategory.Slug" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500 font-mono" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description (English)</label>
                        <textarea @bind="editingCategory.Description" rows="3" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500"></textarea>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description (Arabic)</label>
                        <textarea @bind="editingCategory.DescriptionAr" dir="rtl" rows="3" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500"></textarea>
                    </div>

                    <!-- Image Upload Section -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category Image</label>
                        <FileUpload Folder="categories" 
                                   FileType="image" 
                                   Prefix="category"
                                   @bind-CurrentFileUrl="editingCategory.ImagePath"
                                   AltText="@Localizer["CategoryImage"]" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Display Order</label>
                        <input type="number" @bind="editingCategory.DisplayOrder" class="w-full px-3 py-2 border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" />
                    </div>

                    <div class="flex items-center space-x-4">
                        <label class="flex items-center">
                            <input type="checkbox" @bind="editingCategory.IsActive" class="rounded border-gray-300 text-amber-600 focus:ring-amber-500" />
                            <span class="ml-2 text-sm text-gray-700">Active</span>
                        </label>

                        <label class="flex items-center">
                            <input type="checkbox" @bind="editingCategory.IsDisplayedOnHomepage" class="rounded border-gray-300 text-amber-600 focus:ring-amber-500" />
                            <span class="ml-2 text-sm text-gray-700">Show on Homepage</span>
                        </label>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="() => showCreateModal = false" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                        Cancel
                    </button>
                    <button type="button" @onclick="SaveCategory" class="px-4 py-2 text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 rounded-lg">
                        @(editingCategory?.Id > 0 ? "Update" : "Create")
                    </button>
                </div>
                }
            </form>
        </div>
    </div>
}

@code {
    private List<Category> allCategories = new();
    private List<Category> filteredCategories = new();
    private bool loading = true;
    private bool showCreateModal = false;
    
    // Stats
    private int totalCategories = 0;
    private int activeCategories = 0;
    private int homepageCategories = 0;
    private int categoriesWithProducts = 0;
    
    // Filter properties
    private string searchTerm = string.Empty;
    private string _selectedStatus = string.Empty;
    
    // Message handling
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    
    private string selectedStatus
    {
        get => _selectedStatus;
        set
        {
            if (_selectedStatus != value)
            {
                _selectedStatus = value;
                _ = ApplyFiltersAsync();
            }
        }
    }
    
    // Form properties
    private Category editingCategory = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        loading = true;
        try
        {
            allCategories = await CategoryService.GetAllCategoriesAsync();
            await CalculateStats();
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Failed to load categories: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task CalculateStats()
    {
        totalCategories = allCategories.Count;
        activeCategories = allCategories.Count(c => c.IsActive);
        homepageCategories = allCategories.Count(c => c.IsDisplayedOnHomepage);
        categoriesWithProducts = allCategories.Count(c => c.Products?.Any() == true);
        await Task.CompletedTask;
    }

    private async Task ApplyFiltersAsync()
    {
        var filteredQuery = allCategories.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredQuery = filteredQuery.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (c.NameAr?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true));
        }

        filteredQuery = selectedStatus switch
        {
            "active" => filteredQuery.Where(c => c.IsActive),
            "inactive" => filteredQuery.Where(c => !c.IsActive),
            "homepage" => filteredQuery.Where(c => c.IsDisplayedOnHomepage),
            "hidden" => filteredQuery.Where(c => !c.IsDisplayedOnHomepage),
            _ => filteredQuery
        };

        filteredCategories = filteredQuery.OrderBy(c => c.DisplayOrder).ThenBy(c => c.Name).ToList();
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await ApplyFiltersAsync();
    }

    private void ShowCreateForm()
    {
        editingCategory = new Category { IsActive = true, DisplayOrder = allCategories.Count + 1 };
        showCreateModal = true;
    }

    private void EditCategory(Category category)
    {
        editingCategory = new Category
        {
            Id = category.Id,
            Name = category.Name,
            NameAr = category.NameAr,
            Slug = category.Slug,
            Description = category.Description,
            DescriptionAr = category.DescriptionAr,
            ImagePath = category.ImagePath,
            DisplayOrder = category.DisplayOrder,
            IsActive = category.IsActive,
            IsDisplayedOnHomepage = category.IsDisplayedOnHomepage
        };
        showCreateModal = true;
    }

    private async Task SaveCategory()
    {
        if (editingCategory == null) return;
        
        try
        {
            string action = editingCategory.Id > 0 ? "updated" : "created";
            string categoryName = editingCategory.Name;
            
            if (editingCategory.Id > 0)
            {
                await CategoryService.UpdateCategoryAsync(editingCategory);
            }
            else
            {
                await CategoryService.CreateCategoryAsync(editingCategory);
            }
            
            showCreateModal = false;
            await LoadCategoriesAsync();
            ShowSuccessMessage($"Category '{categoryName}' has been {action} successfully.");
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Failed to save category: {ex.Message}");
        }
    }

    private async Task DeleteCategory(Category category)
    {
        try
        {
            // First show a loading message
            ShowSuccessMessage($"Attempting to delete category '{category.Name}'...");
            
            // Check if category can be deleted first
            var canDeleteResult = await CategoryService.CanDeleteCategoryAsync(category.Id);
            if (!canDeleteResult.CanDelete)
            {
                ShowErrorMessage($"Cannot delete category '{category.Name}' because it contains {canDeleteResult.ProductCount} product(s). Please move or delete the products first.");
                return;
            }
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{category.Name}'? This action cannot be undone.");
            if (confirmed)
            {
                var result = await CategoryService.DeleteCategoryAsync(category.Id);
                if (result)
                {
                    await LoadCategoriesAsync();
                    ShowSuccessMessage($"Category '{category.Name}' has been deleted successfully.");
                }
                else
                {
                    ShowErrorMessage($"Category '{category.Name}' was not found or could not be deleted.");
                }
            }
        }
        catch (InvalidOperationException ex)
        {
            // This handles the case where category has products
            ShowErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Failed to delete category: {ex.Message}");
            // Also log to console for debugging
            await JSRuntime.InvokeVoidAsync("console.error", "Delete error details:", ex);
        }
    }

    private void ShowSuccessMessage(string message)
    {
        successMessage = message;
        showSuccessMessage = true;
        showErrorMessage = false;
        StateHasChanged();
        
        // Auto-hide after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ => 
        {
            showSuccessMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        showErrorMessage = true;
        showSuccessMessage = false;
        StateHasChanged();
        
        // Auto-hide after 8 seconds (longer for error messages)
        _ = Task.Delay(8000).ContinueWith(_ => 
        {
            showErrorMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }
}