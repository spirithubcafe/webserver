@using SpirithubCofe.Web.Services
@inject ToastService ToastService
@rendermode InteractiveServer

<!-- Android-style Toast Container - Center Bottom -->
<div class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-[9999] flex flex-col items-center space-y-3">
    @foreach (var toast in toasts)
    {
        <div @key="toast.Id" @onclick="() => RemoveToast(toast.Id)"
             class="@GetToastClasses(toast.Type, toast.IsVisible) min-w-[280px] max-w-[400px] mx-4 backdrop-blur-sm border border-white/20 hover:scale-105 cursor-pointer">
            <div class="flex items-center justify-center space-x-3">
                <div class="flex-shrink-0 opacity-90">
                    @GetIcon(toast.Type)
                </div>
                <div class="flex-1 text-center">
                    <p class="text-base font-semibold leading-tight">@toast.Message</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<ToastService.ToastMessage> toasts = new();
    private Timer? cleanupTimer;
    
    protected override void OnInitialized()
    {
        ToastService.OnToastAdded += HandleToastAdded;
        
        // Timer to clean up old toasts
        cleanupTimer = new Timer(CleanupToasts, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }
    
    private void HandleToastAdded()
    {
        var newToasts = ToastService.GetToasts();
        foreach (var toast in newToasts)
        {
            toasts.Add(toast);
            
            // Show animation after a small delay
            Task.Delay(50).ContinueWith(_ =>
            {
                InvokeAsync(StateHasChanged);
            });
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private void CleanupToasts(object? state)
    {
        var now = DateTime.Now;
        var toastsToRemove = toasts.Where(t => now.Subtract(t.CreatedAt).TotalMilliseconds > 3500).ToList();
        
        if (toastsToRemove.Any())
        {
            foreach (var toast in toastsToRemove)
            {
                toasts.Remove(toast);
            }
            InvokeAsync(StateHasChanged);
        }
    }
    
    private void RemoveToast(string toastId)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toasts.Remove(toast);
            StateHasChanged();
        }
    }
    
    private string GetToastClasses(ToastService.ToastType type, bool isVisible)
    {
        var baseClasses = "transform transition-all duration-500 ease-out rounded-2xl shadow-2xl px-6 py-4 pointer-events-auto";
        var animationClasses = "translate-y-0 opacity-100 scale-100"; // Always visible since we handle timing differently
        var typeClasses = type switch
        {
            ToastService.ToastType.Success => "bg-gradient-to-r from-emerald-500 to-green-500 text-white",
            ToastService.ToastType.Error => "bg-gradient-to-r from-red-500 to-rose-500 text-white",
            ToastService.ToastType.Warning => "bg-gradient-to-r from-amber-500 to-orange-500 text-white",
            ToastService.ToastType.Info => "bg-gradient-to-r from-blue-500 to-indigo-500 text-white",
            _ => "bg-gradient-to-r from-blue-500 to-indigo-500 text-white"
        };
        
        return $"{baseClasses} {animationClasses} {typeClasses}";
    }
    
    private RenderFragment GetIcon(ToastService.ToastType type) => type switch
    {
        ToastService.ToastType.Success => @<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>,
        ToastService.ToastType.Error => @<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>,
        ToastService.ToastType.Warning => @<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>,
        ToastService.ToastType.Info => @<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>,
        _ => @<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
    };
    
    public void Dispose()
    {
        ToastService.OnToastAdded -= HandleToastAdded;
        cleanupTimer?.Dispose();
    }
}