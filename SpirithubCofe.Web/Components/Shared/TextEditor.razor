@* Professional Text Editor Component - HTML Support *@

<div class="text-editor">
    <div class="editor-toolbar bg-light border-bottom p-2">
        <div class="btn-group btn-group-sm me-2" role="group">
            <button type="button" class="btn btn-outline-secondary" title="Bold" @onclick="InsertBold">
                <i class="fas fa-bold"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary" title="Italic" @onclick="InsertItalic">
                <i class="fas fa-italic"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary" title="Underline" @onclick="InsertUnderline">
                <i class="fas fa-underline"></i>
            </button>
        </div>
        
        <div class="btn-group btn-group-sm me-2" role="group">
            <button type="button" class="btn btn-outline-secondary" title="Paragraph" @onclick="InsertParagraph">
                <i class="fas fa-paragraph"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary" title="Line Break" @onclick="InsertLineBreak">
                <i class="fas fa-level-down-alt"></i>
            </button>
        </div>
        
        <div class="btn-group btn-group-sm me-2" role="group">
            <button type="button" class="btn btn-outline-secondary" title="Link" @onclick="InsertLink">
                <i class="fas fa-link"></i>
            </button>
        </div>
        
        <div class="btn-group btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-info" title="Clear Format" @onclick="ClearFormatting">
                <i class="fas fa-eraser"></i>
            </button>
        </div>
    </div>
    
    <div class="editor-content">
        <textarea @ref="textAreaRef" 
                  class="form-control border-0" 
                  style="@($"height: {Height}px; resize: vertical; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;")"
                  dir="@(IsRtl ? "rtl" : "ltr")"
                  placeholder="@Placeholder"
                  @bind="CurrentValue"
                  @oninput="OnInput"
                  @onfocus="OnFocus"
                  @onblur="OnBlur"></textarea>
    </div>
    
    <div class="editor-footer bg-light border-top p-1 px-2">
        <small class="text-muted">
            @if (IsRtl)
            {
                <span>علامات HTML مدعومة: <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;a&gt;</code></span>
            }
            else
            {
                <span>HTML tags supported: <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;a&gt;</code></span>
            }
        </small>
    </div>
</div>

<style>
    .text-editor {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        overflow: hidden;
    }
    
    .text-editor:focus-within {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .editor-toolbar {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.25rem;
    }
    
    .editor-content textarea {
        outline: none !important;
        box-shadow: none !important;
    }
    
    .editor-content textarea:focus {
        outline: none !important;
        box-shadow: none !important;
    }
    
    .btn-outline-secondary:hover {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }
    
    .btn-outline-info:hover {
        background-color: #0dcaf0;
        border-color: #0dcaf0;
        color: white;
    }
</style>

@code {
    private ElementReference textAreaRef;
    private string currentValue = "";
    
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public int Height { get; set; } = 200;
    [Parameter] public bool IsRtl { get; set; } = false;
    [Parameter] public string Placeholder { get; set; } = "";
    
    private string CurrentValue
    {
        get => currentValue;
        set
        {
            if (currentValue != value)
            {
                currentValue = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }
    
    protected override void OnInitialized()
    {
        currentValue = Value ?? "";
    }
    
    protected override void OnParametersSet()
    {
        if (Value != currentValue)
        {
            currentValue = Value ?? "";
        }
    }
    
    private async Task OnInput(ChangeEventArgs e)
    {
        CurrentValue = e.Value?.ToString() ?? "";
    }
    
    private void OnFocus()
    {
        // Optional: Add focus behavior
    }
    
    private void OnBlur()
    {
        // Optional: Add blur behavior
    }
    
    private async Task InsertBold() => await InsertTag("b");
    private async Task InsertItalic() => await InsertTag("i");
    private async Task InsertUnderline() => await InsertTag("u");
    private async Task InsertParagraph() => await InsertTag("p");
    
    private async Task InsertTag(string tag)
    {
        var selection = await GetSelection();
        if (!string.IsNullOrEmpty(selection))
        {
            var newText = CurrentValue.Replace(selection, $"<{tag}>{selection}</{tag}>");
            CurrentValue = newText;
        }
        else
        {
            await InsertAtCursor($"<{tag}></{tag}>");
            // Move cursor between tags
            await FocusTextArea();
        }
    }
    
    private async Task InsertLineBreak()
    {
        await InsertAtCursor("<br>");
        await FocusTextArea();
    }
    
    private async Task InsertLink()
    {
        var selection = await GetSelection();
        var linkText = string.IsNullOrEmpty(selection) ? "Link Text" : selection;
        var linkHtml = $"<a href=\"#\">{linkText}</a>";
        
        if (!string.IsNullOrEmpty(selection))
        {
            CurrentValue = CurrentValue.Replace(selection, linkHtml);
        }
        else
        {
            await InsertAtCursor(linkHtml);
        }
        await FocusTextArea();
    }
    
    private void ClearFormatting()
    {
        // Remove common HTML tags
        var cleanText = CurrentValue
            .Replace("<b>", "").Replace("</b>", "")
            .Replace("<i>", "").Replace("</i>", "")
            .Replace("<u>", "").Replace("</u>", "")
            .Replace("<p>", "").Replace("</p>", "")
            .Replace("<br>", "\n")
            .Replace("<br/>", "\n")
            .Replace("<br />", "\n");
        
        // Remove links but keep text
        cleanText = System.Text.RegularExpressions.Regex.Replace(cleanText, @"<a[^>]*>(.*?)</a>", "$1");
        
        CurrentValue = cleanText;
    }
    
    private async Task<string> GetSelection()
    {
        try
        {
            // Simple selection detection - in a real scenario, you might use JS interop
            // For now, return empty string
            return "";
        }
        catch
        {
            return "";
        }
    }
    
    private async Task InsertAtCursor(string text)
    {
        try
        {
            // Simple insertion at the end for now
            CurrentValue += text;
        }
        catch
        {
            // Fallback: append at end
            CurrentValue += text;
        }
    }
    
    private async Task FocusTextArea()
    {
        try
        {
            await textAreaRef.FocusAsync();
        }
        catch
        {
            // Ignore focus errors
        }
    }
}