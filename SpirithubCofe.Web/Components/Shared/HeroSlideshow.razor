@rendermode InteractiveServer
@inject SpirithubCofe.Application.Services.ISlideService SlideService
@inject IStringLocalizer<SpirithubCofe.Langs.Resources> Localizer
@using SpirithubCofe.Application.DTOs
@using System.Globalization
@implements IDisposable

<!-- Professional Hero Slideshow Section -->
<div class="hero-slideshow" id="heroSlideshow">
    @if (slides.Any())
    {
        <!-- Slides Container -->
        <div class="slides-container">
            @for (int i = 0; i < slides.Count; i++)
            {
                var slide = slides[i];
                var isActive = i == currentSlideIndex;
                
                <div class="slide @(isActive ? "active" : "")" data-slide="@i">
                    <!-- Background Image -->
                    <div class="slide-background">
                        <img src="@slide.ImagePath" alt="@slide.GetLocalizedTitle(CultureInfo.CurrentUICulture.Name)" 
                             class="slide-image" loading="@(isActive ? "eager" : "lazy")" />
                        <div class="slide-overlay"></div>
                    </div>
                    
                    <!-- Content -->
                    <div class="slide-content">
                        <div class="content-wrapper">
                            <!-- Title -->
                            <h1 class="slide-title @slide.TextColor">
                                @slide.GetLocalizedTitle(CultureInfo.CurrentUICulture.Name)
                            </h1>
                            
                            <!-- Subtitle -->
                            <p class="slide-subtitle @slide.TextColor">
                                @slide.GetLocalizedSubtitle(CultureInfo.CurrentUICulture.Name)
                            </p>
                            
                            <!-- Call to Action Button -->
                            @if (!string.IsNullOrEmpty(slide.ButtonText) && !string.IsNullOrEmpty(slide.ButtonUrl))
                            {
                                <div class="slide-actions">
                                    <a href="@slide.ButtonUrl" class="cta-button">
                                        @slide.GetLocalizedButtonText(CultureInfo.CurrentUICulture.Name)
                                        <svg class="button-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                                        </svg>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Navigation Controls -->
        <div class="slideshow-controls">
            <!-- Previous Button -->
            <button class="nav-button prev-button" @onclick="PrevSlide" aria-label="Previous slide">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
            </button>
            
            <!-- Next Button -->
            <button class="nav-button next-button" @onclick="NextSlide" aria-label="Next slide">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
            </button>
        </div>
        
        <!-- Slide Indicators -->
        <div class="slide-indicators">
            @for (int i = 0; i < slides.Count; i++)
            {
                var isActive = i == currentSlideIndex;
                <button class="indicator @(isActive ? "active" : "")" @onclick="() => GoToSlide(i)" aria-label="Go to slide @(i + 1)"></button>
            }
        </div>

    }
    else
    {
        <!-- Default Hero when no slides -->
        <div class="slide active default-slide">
            <div class="slide-background">
                <div class="default-background"></div>
                <div class="slide-overlay"></div>
            </div>
            <div class="slide-content">
                <div class="content-wrapper">
                    <h1 class="slide-title text-white">
                        SpirithubCofe
                    </h1>
                    <p class="slide-subtitle text-white">
                        @Localizer["Welcome to our premium coffee experience"]
                    </p>
                    <div class="slide-actions">
                        <a href="/products" class="cta-button cta-outline">
                            @Localizer["Explore Products"]
                            <svg class="button-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Simple C# Slideshow - No JavaScript -->

<style>
    /* Professional Hero Slideshow Styles */
    .hero-slideshow {
        position: relative;
        width: 100%;
        height: 100vh;
        overflow: hidden;
        background: #000;
    }
    
    .slides-container {
        position: relative;
        width: 100%;
        height: 100%;
    }
    
    .slide {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.8s ease-in-out, visibility 0.8s ease-in-out;
        z-index: 1;
    }
    
    .slide.active {
        opacity: 1;
        visibility: visible;
        z-index: 2;
    }
    
    .slide-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }
    
    .slide-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
        transform: scale(1.02);
        transition: transform 8s ease-out;
    }
    
    .slide.active .slide-image {
        transform: scale(1);
    }
    
    .slide-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            135deg,
            rgba(0, 0, 0, 0.4) 0%,
            rgba(0, 0, 0, 0.2) 50%,
            rgba(0, 0, 0, 0.6) 100%
        );
        z-index: 1;
    }
    
    .default-background {
        width: 100%;
        height: 100%;
        background: linear-gradient(
            135deg,
            #ff6b35 0%,
            #f7931e 25%,
            #8b4513 75%,
            #5d2a0a 100%
        );
    }
    
    .slide-content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2;
        padding: 2rem;
    }
    
    .content-wrapper {
        text-align: center;
        max-width: 1200px;
        width: 100%;
    }
    
    .slide-title {
        font-size: clamp(2.5rem, 8vw, 6rem);
        font-weight: 800;
        line-height: 1.1;
        margin-bottom: 1.5rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        opacity: 0;
        transform: translateY(50px);
        animation: slideInUp 1s ease-out 0.5s forwards;
    }
    
    .slide-subtitle {
        font-size: clamp(1.1rem, 3vw, 1.5rem);
        line-height: 1.6;
        margin-bottom: 2.5rem;
        opacity: 0.95;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
        opacity: 0;
        transform: translateY(30px);
        animation: slideInUp 1s ease-out 0.8s forwards;
    }
    
    .slide-actions {
        opacity: 0;
        transform: translateY(20px);
        animation: slideInUp 1s ease-out 1.1s forwards;
    }
    
    .cta-button {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem 2.5rem;
        background: linear-gradient(135deg, #ff6b35, #f7931e);
        color: white;
        text-decoration: none;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1.1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
        border: 2px solid transparent;
    }
    
    .cta-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 35px rgba(255, 107, 53, 0.4);
        background: linear-gradient(135deg, #f7931e, #ff6b35);
    }
    
    .cta-outline {
        background: transparent;
        border: 2px solid white;
        box-shadow: 0 8px 25px rgba(255, 255, 255, 0.1);
    }
    
    .cta-outline:hover {
        background: white;
        color: #ff6b35;
        box-shadow: 0 12px 35px rgba(255, 255, 255, 0.2);
    }
    
    .button-icon {
        width: 1.25rem;
        height: 1.25rem;
        transition: transform 0.3s ease;
    }
    
    .cta-button:hover .button-icon {
        transform: translateX(4px);
    }
    
    /* Navigation Controls */
    .slideshow-controls {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        transform: translateY(-50%);
        display: flex;
        justify-content: space-between;
        padding: 0 2rem;
        z-index: 10;
        pointer-events: none;
    }
    
    .nav-button {
        width: 60px;
        height: 60px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        pointer-events: auto;
    }
    
    .nav-button:hover {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.6);
        transform: scale(1.1);
    }
    
    .nav-button svg {
        width: 24px;
        height: 24px;
    }
    
    /* Slide Indicators */
    .slide-indicators {
        position: absolute;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 0.75rem;
        z-index: 10;
    }
    
    .indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid rgba(255, 255, 255, 0.5);
        background: transparent;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .indicator.active {
        background: white;
        border-color: white;
        transform: scale(1.2);
    }
    
    /* Progress Bar */
    .progress-bar {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: rgba(255, 255, 255, 0.2);
        z-index: 10;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #ff6b35, #f7931e);
        width: 0;
    }
    
    /* Animations */
    @@keyframes slideInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes progress {
        from { width: 0; }
        to { width: 100%; }
    }
    
    /* Text Color Classes */
    .text-white { color: white; }
    .text-black { color: #333; }
    .text-amber-100 { color: #fef3c7; }
    .text-amber-200 { color: #fde68a; }
    
    /* RTL Support */
    [dir="rtl"] .cta-button .button-icon {
        transform: scaleX(-1);
    }
    
    [dir="rtl"] .cta-button:hover .button-icon {
        transform: scaleX(-1) translateX(4px);
    }
    
    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .slide-content {
            padding: 1rem;
        }
        
        .slide-title {
            margin-bottom: 1rem;
        }
        
        .slide-subtitle {
            margin-bottom: 2rem;
        }
        
        .cta-button {
            padding: 0.875rem 2rem;
            font-size: 1rem;
        }
        
        .nav-button {
            width: 50px;
            height: 50px;
        }
        
        .nav-button svg {
            width: 20px;
            height: 20px;
        }
        
        .slideshow-controls {
            padding: 0 1rem;
        }
        
        .slide-indicators {
            bottom: 1rem;
        }
        
        .indicator {
            width: 10px;
            height: 10px;
        }
    }
    
    @@media (max-width: 480px) {
        .slide-content {
            padding: 0.75rem;
        }
        
        .slideshow-controls {
            padding: 0 0.5rem;
        }
        
        .nav-button {
            width: 45px;
            height: 45px;
        }
        
        .nav-button svg {
            width: 18px;
            height: 18px;
        }
    }
</style>

@code {
    private List<SlideDto> slides = new();
    private int currentSlideIndex = 0;
    private Timer? slideTimer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await SlideService.GetActiveSlidesAsync();
            if (result.Success)
            {
                slides = result.Slides.ToList();
                if (slides.Count > 1)
                {
                    StartSlideshow();
                }
            }
        }
        catch (Exception ex)
        {
            // Log error but don't break the component
            Console.WriteLine($"Error loading slides: {ex.Message}");
        }
    }

    private void StartSlideshow()
    {
        slideTimer = new Timer(async _ =>
        {
            currentSlideIndex = (currentSlideIndex + 1) % slides.Count;
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private void NextSlide()
    {
        currentSlideIndex = (currentSlideIndex + 1) % slides.Count;
        RestartTimer();
    }

    private void PrevSlide()
    {
        currentSlideIndex = (currentSlideIndex - 1 + slides.Count) % slides.Count;
        RestartTimer();
    }

    private void GoToSlide(int index)
    {
        currentSlideIndex = index;
        RestartTimer();
    }

    private void RestartTimer()
    {
        slideTimer?.Dispose();
        if (slides.Count > 1)
        {
            StartSlideshow();
        }
    }

    public void Dispose()
    {
        slideTimer?.Dispose();
    }
}