@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Globalization
@using SpirithubCofe.Web.Services
@using SpirithubCofe.Domain.Entities
@using SpirithubCofe.Web.Components.Layout
@using SpirithubCofe.Web.Components.Shared
@inject IStringLocalizer<Resources> Localizer
@inject CartService CartService
@inject NavigationManager NavigationManager
@inject SpirithubCofe.Web.Services.CategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SpirithubCofe.Web.Services.ToastService ToastService
@implements IDisposable
@rendermode InteractiveServer



<!-- Mobile menu button -->
<button type="button" @onclick="ToggleMenu"
        class="lg:hidden flex items-center justify-center w-10 h-10 text-gray-400 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-all duration-200">
    @if (IsOpen)
    {
        <svg class="w-6 h-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
    }
    else
    {
        <svg class="w-6 h-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    }
</button>

@if (IsOpen)
{
    <!-- Mobile menu overlay -->
    <div class="lg:hidden fixed inset-0 bg-opacity-50 z-40" @onclick="CloseMenu"></div>

    <!-- Mobile menu panel -->
    <div class="lg:hidden fixed top-0 right-0 h-full w-80 bg-white shadow-2xl z-50 transform transition-transform duration-300 ease-in-out">
        <div class="flex flex-col h-full">
            <!-- Header -->
            <div class="flex items-center justify-between p-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">@Localizer["Menu"]</h2>
                <button type="button" @onclick="CloseMenu" 
                        class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg">
                    <svg class="w-6 h-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Content -->
            <div class="flex-1 overflow-y-auto p-4">
                <div class="space-y-4">
                    <!-- Products Section -->
                    <div class="space-y-2">
                        <div class="flex items-center text-base font-semibold text-gray-900 px-3 py-2">
                            <svg class="w-5 h-5 mr-3 text-amber-600" viewBox="0 0 24 24" fill="none">
                                <path d="M22 22L2 22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                                <path d="M2 11L10.1259 4.49931C11.2216 3.62279 12.7784 3.62279 13.8741 4.49931L22 11" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                                <path d="M15.5 5.5V3.5C15.5 3.22386 15.7239 3 16 3H18.5C18.7761 3 19 3.22386 19 3.5V8.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                                <path d="M4 22V9.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                                <path d="M20 22V9.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                                <path d="M15 22V17C15 15.5858 15 14.8787 14.5607 14.4393C14.1213 14 13.4142 14 12 14C10.5858 14 9.87868 14 9.43934 14.4393C9 14.8787 9 15.5858 9 17V22" stroke="currentColor" stroke-width="1.5" />
                                <path d="M14 9.5C14 10.6046 13.1046 11.5 12 11.5C10.8954 11.5 10 10.6046 10 9.5C10 8.39543 10.8954 7.5 12 7.5C13.1046 7.5 14 8.39543 14 9.5Z" stroke="currentColor" stroke-width="1.5" />
                            </svg>
                            @Localizer["Products"]
                        </div>
                        
                        <div class="pl-8 space-y-1">
                            <a href="/products" @onclick="NavigateAndClose" 
                               class="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                                @Localizer["AllProducts"]
                            </a>
                            @foreach (var category in categories)
                            {
                                <a href="/products/@category.Slug" @onclick="NavigateAndClose"
                                   class="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                                    @(CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "ar" && !string.IsNullOrEmpty(category.NameAr) ? category.NameAr : category.Name)
                                </a>
                            }
                        </div>
                    </div>

                    <!-- Main Navigation -->
                    <div class="space-y-1">
                        <a href="/about" @onclick="NavigateAndClose"
                           class="flex items-center px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                            <svg class="w-5 h-5 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                            </svg>
                            @Localizer["About"]
                        </a>

                        <a href="/contact" @onclick="NavigateAndClose"
                           class="flex items-center px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-colors">
                            <svg class="w-5 h-5 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                            </svg>
                            @Localizer["Contact"]
                        </a>
                    </div>

                    <hr class="border-gray-200">

                    <!-- Auth Section -->
                    @if (isAuthenticated)
                    {
                        <div class="space-y-3">
                            <!-- User Info -->
                            <div class="bg-gradient-to-r from-amber-50 to-amber-100 rounded-lg p-3">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 bg-gradient-to-br from-amber-400 to-amber-500 rounded-full flex items-center justify-center text-white font-medium">
                                        @(userName?.Substring(0, 1).ToUpper() ?? "U")
                                    </div>
                                    <div class="ml-3">
                                        <div class="text-sm font-medium text-gray-900">@userName</div>
                                        <div class="text-xs text-gray-600">@Localizer["Customer"]</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Language Switcher -->
                            <div class="px-3 py-2">
                                <div class="text-sm text-gray-600">@Localizer["Language"]: @CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToUpper()</div>
                            </div>

                            <!-- User Links -->
                            <a href="/cart" @onclick="NavigateAndClose"
                               class="flex items-center justify-between px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg">
                                <div class="flex items-center">
                                    <svg class="w-5 h-5 mr-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5 6m0 0h9M17 13v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6"></path>
                                    </svg>
                                    @Localizer["Cart"]
                                </div>
                                @if (cartCount > 0)
                                {
                                    <span class="bg-amber-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center">@cartCount</span>
                                }
                            </a>

                            <a href="/Account/Manage" @onclick="NavigateAndClose"
                               class="flex items-center px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg">
                                <svg class="w-5 h-5 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                                </svg>
                                @Localizer["MyProfile"]
                            </a>

                            <a href="/orders" @onclick="NavigateAndClose"
                               class="flex items-center px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg">
                                <svg class="w-5 h-5 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                                </svg>
                                @Localizer["MyOrders"]
                            </a>

                            <!-- Admin Link -->
                            @if (isAdmin)
                            {
                                <a href="/admin/dashboard" @onclick="NavigateAndClose"
                                   class="flex items-center px-3 py-2 text-base font-medium text-purple-600 hover:text-purple-700 hover:bg-purple-50 rounded-lg">
                                    <svg class="w-5 h-5 mr-3 text-purple-500" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 01-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 01-2 0V6.414l-2.293 2.293a1 1 0 11-1.414-1.414L13.586 5H12zm-9 7a1 1 0 012 0v1.586l2.293-2.293a1 1 0 111.414 1.414L6.414 15H8a1 1 0 010 2H4a1 1 0 01-1-1v-4zm13-1a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 010-2h1.586l-2.293-2.293a1 1 0 111.414-1.414L15.586 13H14a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    @Localizer["AdminPanel"]
                                </a>
                            }

                            <!-- Logout -->
                            <a href="/Account/Logout" @onclick="NavigateAndClose"
                               class="flex items-center px-3 py-2 text-base font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg">
                                <svg class="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd"></path>
                                </svg>
                                @Localizer["SignOut"]
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="space-y-3">
                            <!-- Language Switcher for Guests -->
                            <div class="px-3 py-2">
                                <div class="text-sm text-gray-600">@Localizer["Language"]: @CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToUpper()</div>
                            </div>

                            <a href="/Account/Login" @onclick="NavigateAndClose"
                               class="flex items-center px-3 py-2 text-base font-medium text-gray-700 hover:text-amber-600 hover:bg-amber-50 rounded-lg">
                                <svg class="w-5 h-5 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                @Localizer["Login"]
                            </a>

                            <a href="/Account/Register" @onclick="NavigateAndClose"
                               class="flex items-center px-3 py-2 bg-gradient-to-r from-amber-500 to-amber-600 text-white font-medium rounded-lg shadow-sm">
                                <svg class="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z"></path>
                                </svg>
                                @Localizer["Register"]
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private List<Category> categories = new();
    private int cartCount = 0;
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetActiveCategoriesAsync();
            await UpdateAuthenticationState();
            await CartService.InitializeAsync();
            UpdateCartCount();
            CartService.OnCartChanged += UpdateCartInfo;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading menu: {ex.Message}");
        }
    }

    private void UpdateCartInfo()
    {
        UpdateCartCount();
        InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User?.Identity?.IsAuthenticated == true;
            if (isAuthenticated)
            {
                userName = authState.User?.Identity?.Name;
                isAdmin = authState.User?.IsInRole("Admin") == true;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading authentication state: {ex.Message}");
        }
    }

    private void UpdateCartCount()
    {
        try
        {
            cartCount = CartService.ItemCount;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading cart count: {ex.Message}");
        }
    }

    private async Task ToggleMenu()
    {
        IsOpen = !IsOpen;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task CloseMenu()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }

    private async Task NavigateAndClose(string url)
    {
        await CloseMenu();
        NavigationManager.NavigateTo(url);
    }

    private async Task NavigateAndClose()
    {
        await CloseMenu();
    }

    public void Dispose()
    {
        CartService.OnCartChanged -= UpdateCartInfo;
    }
}