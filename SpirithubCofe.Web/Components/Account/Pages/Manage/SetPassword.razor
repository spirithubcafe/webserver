@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using SpirithubCofe.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set Password - SpirithubCofe</PageTitle>

<div class="max-w-3xl mx-auto p-6 space-y-8">
    <!-- Page Header -->
    <div class="bg-teal-600 rounded-2xl p-8 text-white">
        <div class="flex items-center space-x-3">
            <div class="p-3 bg-white/20 rounded-xl">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 2l3-3.5 3 3.5M12 9V7m-6-2l3 3.5L12 5"/>
                </svg>
            </div>
            <div>
                <h1 class="text-3xl font-bold">Set Your Password</h1>
                <p class="text-teal-100 mt-1">Create a local password for your account</p>
            </div>
        </div>
    </div>

    <StatusMessage Message="@message" />

    <!-- Information Section -->
    <div class="bg-blue-50 border border-blue-200 rounded-xl p-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-lg font-medium text-blue-800 mb-3">Why Set a Password?</h3>
                <div class="text-blue-700">
                    <p class="mb-3">
                        You currently don't have a local username/password for this site. Setting a password will allow you to:
                    </p>
                    <ul class="list-disc pl-5 space-y-1">
                        <li>Log in directly without using external providers</li>
                        <li>Access your account even if external services are unavailable</li>
                        <li>Have a backup login method for added security</li>
                        <li>Enable additional security features like two-factor authentication</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Set Password Form -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 class="text-xl font-semibold text-gray-900 mb-6">Create Password</h2>
        
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            
            <div class="space-y-6">
                <!-- New Password -->
                <div>
                    <label for="Input.NewPassword" class="block text-sm font-medium text-gray-700 mb-2">
                        New Password
                    </label>
                    <div class="relative">
                        <InputText type="password" 
                                   @bind-Value="Input.NewPassword" 
                                   id="Input.NewPassword" 
                                   class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-colors" 
                                   autocomplete="new-password" 
                                   placeholder="Enter your new password" />
                        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4l6-6 6 6m-6-6V9a6 6 0 00-6-6H6a6 6 0 00-6 6v4.5"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="() => Input.NewPassword" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Confirm Password -->
                <div>
                    <label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700 mb-2">
                        Confirm Password
                    </label>
                    <div class="relative">
                        <InputText type="password" 
                                   @bind-Value="Input.ConfirmPassword" 
                                   id="Input.ConfirmPassword" 
                                   class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-colors" 
                                   autocomplete="new-password" 
                                   placeholder="Confirm your new password" />
                        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Password Requirements -->
                <div class="bg-gray-50 rounded-xl p-4">
                    <h4 class="font-medium text-gray-900 mb-3">Password Requirements</h4>
                    <ul class="text-sm text-gray-600 space-y-1">
                        <li class="flex items-center space-x-2">
                            <div class="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                            <span>At least 6 characters long</span>
                        </li>
                        <li class="flex items-center space-x-2">
                            <div class="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                            <span>Maximum 100 characters</span>
                        </li>
                        <li class="flex items-center space-x-2">
                            <div class="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                            <span>Use a strong, unique password</span>
                        </li>
                        <li class="flex items-center space-x-2">
                            <div class="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                            <span>Avoid common passwords or personal information</span>
                        </li>
                    </ul>
                </div>

                <!-- Validation Summary -->
                <ValidationSummary class="bg-red-50 border border-red-200 rounded-xl p-4 text-red-700" role="alert" />

                <!-- Submit Button -->
                <div class="flex justify-end pt-6 border-t border-gray-200">
                    <button type="submit" 
                            class="inline-flex items-center px-8 py-3 bg-teal-600 text-white font-semibold rounded-xl hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 transition-all duration-300 transform hover:scale-105 shadow-lg">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4l6-6 6 6m-6-6V9a6 6 0 00-6-6H6a6 6 0 00-6 6v4.5"/>
                        </svg>
                        Set Password
                    </button>
                </div>
            </div>
        </EditForm>
    </div>

    <!-- Security Tips -->
    <div class="bg-yellow-50 rounded-xl border border-yellow-200 p-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.031 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-yellow-800 mb-2">Security Best Practices</h3>
                <ul class="text-sm text-yellow-700 space-y-1">
                    <li>• Use a password manager to generate and store strong passwords</li>
                    <li>• Don't reuse passwords from other accounts</li>
                    <li>• Consider enabling two-factor authentication after setting your password</li>
                    <li>• Keep your password confidential and don't share it with anyone</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
