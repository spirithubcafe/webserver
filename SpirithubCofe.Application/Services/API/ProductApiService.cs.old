using Microsoft.EntityFrameworkCore;
using SpirithubCofe.Application.DTOs.API;
using SpirithubCofe.Application.Interfaces;
using SpirithubCofe.Domain.Entities;

namespace SpirithubCofe.Application.Services.API;

/// <summary>
/// Service for handling product operations for API
/// </summary>
public interface IProductApiService
{
    Task<ApiResponse<PaginatedResponse<ProductSummaryDto>>> GetProductsAsync(ProductSearchDto searchDto);
    Task<ApiResponse<ProductDto>> GetProductByIdAsync(int id);
    Task<ApiResponse<ProductDto>> GetProductBySkuAsync(string sku);
    Task<ApiResponse<List<ProductSummaryDto>>> GetFeaturedProductsAsync(int count = 8);
    Task<ApiResponse<List<ProductSummaryDto>>> GetProductsByCategoryAsync(int categoryId, int count = 20);
    Task<ApiResponse<List<ProductSummaryDto>>> GetProductsByCategorySlugAsync(string categorySlug, int count = 20);
    Task<ApiResponse<List<ProductSummaryDto>>> GetRelatedProductsAsync(int productId, int count = 4);
    Task<ApiResponse<ProductDto>> CreateProductAsync(CreateProductRequestDto request);
    Task<ApiResponse<ProductDto>> UpdateProductAsync(int id, UpdateProductRequestDto request);
    Task<ApiResponse<bool>> DeleteProductAsync(int id);
    Task<ApiResponse<bool>> ToggleProductStatusAsync(int id);
    Task<ApiResponse<bool>> UpdateStockAsync(int id, int quantity);
}

/// <summary>
/// Implementation of product API service
/// </summary>
public class ProductApiService : IProductApiService
{
    private readonly IApplicationDbContext _context;

    public ProductApiService(IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<ApiResponse<PaginatedResponse<ProductSummaryDto>>> GetProductsAsync(ProductSearchDto searchDto)
    {
        try
        {
            var query = _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .AsQueryable();

            // Apply filters
            if (!string.IsNullOrEmpty(searchDto.Query))
            {
                query = query.Where(p => 
                    EF.Functions.Like(p.Name, $"%{searchDto.Query}%") ||
                    EF.Functions.Like(p.NameAr, $"%{searchDto.Query}%") ||
                    EF.Functions.Like(p.Description, $"%{searchDto.Query}%") ||
                    EF.Functions.Like(p.DescriptionAr, $"%{searchDto.Query}%") ||
                    EF.Functions.Like(p.Sku, $"%{searchDto.Query}%"));
            }

            if (searchDto.CategoryId.HasValue)
            {
                query = query.Where(p => p.CategoryId == searchDto.CategoryId.Value);
            }

            if (!string.IsNullOrEmpty(searchDto.CategorySlug))
            {
                query = query.Where(p => p.Category!.Slug == searchDto.CategorySlug);
            }

            if (searchDto.MinPrice.HasValue)
            {
                query = query.Where(p => (p.SalePrice ?? p.Price) >= searchDto.MinPrice.Value);
            }

            if (searchDto.MaxPrice.HasValue)
            {
                query = query.Where(p => (p.SalePrice ?? p.Price) <= searchDto.MaxPrice.Value);
            }

            if (!string.IsNullOrEmpty(searchDto.RoastLevel))
            {
                query = query.Where(p => p.RoastLevel == searchDto.RoastLevel);
            }

            if (!string.IsNullOrEmpty(searchDto.ProcessingMethod))
            {
                query = query.Where(p => p.ProcessingMethod == searchDto.ProcessingMethod);
            }

            if (!string.IsNullOrEmpty(searchDto.Origin))
            {
                query = query.Where(p => p.Origin == searchDto.Origin);
            }

            if (searchDto.FeaturedOnly == true)
            {
                query = query.Where(p => p.IsFeatured);
            }

            if (searchDto.OnSaleOnly == true)
            {
                query = query.Where(p => p.SalePrice.HasValue);
            }

            if (searchDto.InStockOnly == true)
            {
                query = query.Where(p => p.StockQuantity > 0);
            }

            // Always filter active products for public API
            query = query.Where(p => p.IsActive);

            // Apply sorting
            query = searchDto.SortBy?.ToLower() switch
            {
                "price" => searchDto.SortDirection?.ToLower() == "desc" 
                    ? query.OrderByDescending(p => p.SalePrice ?? p.Price)
                    : query.OrderBy(p => p.SalePrice ?? p.Price),
                "created" => searchDto.SortDirection?.ToLower() == "desc"
                    ? query.OrderByDescending(p => p.CreatedAt)
                    : query.OrderBy(p => p.CreatedAt),
                "rating" => searchDto.SortDirection?.ToLower() == "desc"
                    ? query.OrderByDescending(p => p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0)
                    : query.OrderBy(p => p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0),
                _ => searchDto.SortDirection?.ToLower() == "desc"
                    ? query.OrderByDescending(p => p.Name)
                    : query.OrderBy(p => p.Name)
            };

            // Ensure page and pageSize are valid
            var page = Math.Max(1, searchDto.Page);
            var pageSize = Math.Clamp(searchDto.PageSize, 1, 100);

            var totalItems = await query.CountAsync();

            var products = await query
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .Select(p => new ProductSummaryDto
                {
                    Id = p.Id,
                    Sku = p.Sku,
                    Name = p.Name,
                    NameAr = p.NameAr,
                    Price = p.Price,
                    SalePrice = p.SalePrice,
                    IsOnSale = p.SalePrice.HasValue,
                    IsFeatured = p.IsFeatured,
                    ImageUrl = p.Images.Where(i => i.IsPrimary).Select(i => $"/uploads/products/{i.ImagePath}").FirstOrDefault(),
                    CategoryName = p.Category!.Name,
                    CategorySlug = p.Category.Slug,
                    AverageRating = p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0,
                    ReviewCount = p.Reviews.Count,
                    StockQuantity = p.StockQuantity
                })
                .ToListAsync();

            var paginatedResponse = PaginatedResponse<ProductSummaryDto>.Create(products, page, pageSize, totalItems);
            return ApiResponse<PaginatedResponse<ProductSummaryDto>>.SuccessResponse(paginatedResponse);
        }
        catch (Exception ex)
        {
            return ApiResponse<PaginatedResponse<ProductSummaryDto>>.ErrorResponse("An error occurred while retrieving products", ex.Message);
        }
    }

    public async Task<ApiResponse<ProductDto>> GetProductByIdAsync(int id)
    {
        try
        {
            var product = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images.OrderBy(i => i.DisplayOrder))
                .Include(p => p.Variants.Where(v => v.IsActive))
                .Include(p => p.Reviews)
                .Where(p => p.Id == id && p.IsActive)
                .FirstOrDefaultAsync();

            if (product == null)
            {
                return ApiResponse<ProductDto>.ErrorResponse("Product not found");
            }

            var productDto = MapToProductDto(product);
            return ApiResponse<ProductDto>.SuccessResponse(productDto);
        }
        catch (Exception ex)
        {
            return ApiResponse<ProductDto>.ErrorResponse("An error occurred while retrieving the product", ex.Message);
        }
    }

    public async Task<ApiResponse<ProductDto>> GetProductBySkuAsync(string sku)
    {
        try
        {
            var product = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images.OrderBy(i => i.DisplayOrder))
                .Include(p => p.Variants.Where(v => v.IsActive))
                .Include(p => p.Reviews)
                .Where(p => p.Sku == sku && p.IsActive)
                .FirstOrDefaultAsync();

            if (product == null)
            {
                return ApiResponse<ProductDto>.ErrorResponse("Product not found");
            }

            var productDto = MapToProductDto(product);
            return ApiResponse<ProductDto>.SuccessResponse(productDto);
        }
        catch (Exception ex)
        {
            return ApiResponse<ProductDto>.ErrorResponse("An error occurred while retrieving the product", ex.Message);
        }
    }

    public async Task<ApiResponse<List<ProductSummaryDto>>> GetFeaturedProductsAsync(int count = 8)
    {
        try
        {
            var products = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .Include(p => p.Reviews)
                .Where(p => p.IsActive && p.IsFeatured)
                .OrderBy(p => p.DisplayOrder)
                .ThenBy(p => p.Name)
                .Take(count)
                .Select(p => new ProductSummaryDto
                {
                    Id = p.Id,
                    Sku = p.Sku,
                    Name = p.Name,
                    NameAr = p.NameAr,
                    Price = p.Price,
                    SalePrice = p.SalePrice,
                    IsOnSale = p.SalePrice.HasValue,
                    IsFeatured = p.IsFeatured,
                    ImageUrl = p.Images.Where(i => i.IsPrimary).Select(i => $"/uploads/products/{i.ImagePath}").FirstOrDefault(),
                    CategoryName = p.Category!.Name,
                    CategorySlug = p.Category.Slug,
                    AverageRating = p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0,
                    ReviewCount = p.Reviews.Count,
                    StockQuantity = p.StockQuantity
                })
                .ToListAsync();

            return ApiResponse<List<ProductSummaryDto>>.SuccessResponse(products);
        }
        catch (Exception ex)
        {
            return ApiResponse<List<ProductSummaryDto>>.ErrorResponse("An error occurred while retrieving featured products", ex.Message);
        }
    }

    public async Task<ApiResponse<List<ProductSummaryDto>>> GetProductsByCategoryAsync(int categoryId, int count = 20)
    {
        try
        {
            var products = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .Include(p => p.Reviews)
                .Where(p => p.IsActive && p.CategoryId == categoryId)
                .OrderBy(p => p.DisplayOrder)
                .ThenBy(p => p.Name)
                .Take(count)
                .Select(p => new ProductSummaryDto
                {
                    Id = p.Id,
                    Sku = p.Sku,
                    Name = p.Name,
                    NameAr = p.NameAr,
                    Price = p.Price,
                    SalePrice = p.SalePrice,
                    IsOnSale = p.SalePrice.HasValue,
                    IsFeatured = p.IsFeatured,
                    ImageUrl = p.Images.Where(i => i.IsPrimary).Select(i => $"/uploads/products/{i.ImagePath}").FirstOrDefault(),
                    CategoryName = p.Category!.Name,
                    CategorySlug = p.Category.Slug,
                    AverageRating = p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0,
                    ReviewCount = p.Reviews.Count,
                    StockQuantity = p.StockQuantity
                })
                .ToListAsync();

            return ApiResponse<List<ProductSummaryDto>>.SuccessResponse(products);
        }
        catch (Exception ex)
        {
            return ApiResponse<List<ProductSummaryDto>>.ErrorResponse("An error occurred while retrieving products by category", ex.Message);
        }
    }

    public async Task<ApiResponse<List<ProductSummaryDto>>> GetProductsByCategorySlugAsync(string categorySlug, int count = 20)
    {
        try
        {
            var products = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .Include(p => p.Reviews)
                .Where(p => p.IsActive && p.Category!.Slug == categorySlug)
                .OrderBy(p => p.DisplayOrder)
                .ThenBy(p => p.Name)
                .Take(count)
                .Select(p => new ProductSummaryDto
                {
                    Id = p.Id,
                    Sku = p.Sku,
                    Name = p.Name,
                    NameAr = p.NameAr,
                    Price = p.Price,
                    SalePrice = p.SalePrice,
                    IsOnSale = p.SalePrice.HasValue,
                    IsFeatured = p.IsFeatured,
                    ImageUrl = p.Images.Where(i => i.IsPrimary).Select(i => $"/uploads/products/{i.ImagePath}").FirstOrDefault(),
                    CategoryName = p.Category!.Name,
                    CategorySlug = p.Category.Slug,
                    AverageRating = p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0,
                    ReviewCount = p.Reviews.Count,
                    StockQuantity = p.StockQuantity
                })
                .ToListAsync();

            return ApiResponse<List<ProductSummaryDto>>.SuccessResponse(products);
        }
        catch (Exception ex)
        {
            return ApiResponse<List<ProductSummaryDto>>.ErrorResponse("An error occurred while retrieving products by category", ex.Message);
        }
    }

    public async Task<ApiResponse<List<ProductSummaryDto>>> GetRelatedProductsAsync(int productId, int count = 4)
    {
        try
        {
            var product = await _context.Products
                .Where(p => p.Id == productId)
                .Select(p => new { p.CategoryId, p.RoastLevel, p.ProcessingMethod })
                .FirstOrDefaultAsync();

            if (product == null)
            {
                return ApiResponse<List<ProductSummaryDto>>.ErrorResponse("Product not found");
            }

            var relatedProducts = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .Include(p => p.Reviews)
                .Where(p => p.IsActive && 
                           p.Id != productId && 
                           (p.CategoryId == product.CategoryId || 
                            p.RoastLevel == product.RoastLevel || 
                            p.ProcessingMethod == product.ProcessingMethod))
                .OrderBy(p => Guid.NewGuid()) // Random order
                .Take(count)
                .Select(p => new ProductSummaryDto
                {
                    Id = p.Id,
                    Sku = p.Sku,
                    Name = p.Name,
                    NameAr = p.NameAr,
                    Price = p.Price,
                    SalePrice = p.SalePrice,
                    IsOnSale = p.SalePrice.HasValue,
                    IsFeatured = p.IsFeatured,
                    ImageUrl = p.Images.Where(i => i.IsPrimary).Select(i => $"/uploads/products/{i.ImagePath}").FirstOrDefault(),
                    CategoryName = p.Category!.Name,
                    CategorySlug = p.Category.Slug,
                    AverageRating = p.Reviews.Any() ? p.Reviews.Average(r => r.Rating) : 0,
                    ReviewCount = p.Reviews.Count,
                    StockQuantity = p.StockQuantity
                })
                .ToListAsync();

            return ApiResponse<List<ProductSummaryDto>>.SuccessResponse(relatedProducts);
        }
        catch (Exception ex)
        {
            return ApiResponse<List<ProductSummaryDto>>.ErrorResponse("An error occurred while retrieving related products", ex.Message);
        }
    }

    public async Task<ApiResponse<SimpleProductDto>> CreateProductAsync(CreateSimpleProductRequestDto request)
        {
            try
            {
                var category = await _context.Categories.FindAsync(request.CategoryId);
                if (category == null)
                {
                    return ApiResponse<SimpleProductDto>.ErrorResponse("Category not found");
                }

                // Check if SKU already exists
                if (await _context.Products.AnyAsync(p => p.Sku == request.Sku))
                {
                    return ApiResponse<SimpleProductDto>.ErrorResponse("SKU already exists");
                }

                var product = new Product
                {
                    Sku = request.Sku,
                    Name = request.Name,
                    NameAr = request.NameAr,
                    Description = request.Description,
                    DescriptionAr = request.DescriptionAr,
                    Notes = request.Notes,
                    Origin = request.Origin,
                    RoastLevel = request.RoastLevel,
                    CategoryId = request.CategoryId,
                    IsActive = request.IsActive,
                    IsFeatured = request.IsFeatured,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                _context.Products.Add(product);
                await _context.SaveChangesAsync();

                // Create a default variant with the pricing info
                var variant = new ProductVariant
                {
                    ProductId = product.Id,
                    VariantSku = $"{request.Sku}-{request.Weight}{request.WeightUnit}",
                    Weight = request.Weight,
                    WeightUnit = request.WeightUnit,
                    Price = request.Price,
                    DiscountPrice = request.DiscountPrice,
                    StockQuantity = request.StockQuantity,
                    IsActive = true,
                    CreatedAt = DateTime.UtcNow
                };

                _context.ProductVariants.Add(variant);
                await _context.SaveChangesAsync();

                var productDto = MapToSimpleProductDto(product, variant);
                return ApiResponse<SimpleProductDto>.SuccessResponse(productDto, "Product created successfully");
            }
            catch (Exception ex)
            {
                return ApiResponse<SimpleProductDto>.ErrorResponse($"Failed to create product: {ex.Message}");
            }
        }

    public async Task<ApiResponse<ProductDto>> UpdateProductAsync(int id, UpdateProductRequestDto request)
    {
        try
        {
            var product = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Reviews)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null)
            {
                return ApiResponse<ProductDto>.ErrorResponse("Product not found");
            }

            // Check if SKU already exists (excluding current product)
            var existingProduct = await _context.Products
                .FirstOrDefaultAsync(p => p.Sku == request.Sku && p.Id != id);
            
            if (existingProduct != null)
            {
                return ApiResponse<ProductDto>.ErrorResponse("A product with this SKU already exists");
            }

            // Verify category exists
            var category = await _context.Categories.FindAsync(request.CategoryId);
            if (category == null)
            {
                return ApiResponse<ProductDto>.ErrorResponse("Category not found");
            }

            // Update product properties
            product.Sku = request.Sku;
            product.Name = request.Name;
            product.NameAr = request.NameAr;
            product.Description = request.Description;
            product.DescriptionAr = request.DescriptionAr;
            product.Notes = request.Notes;
            product.NotesAr = request.NotesAr;
            product.AromaticProfile = request.AromaticProfile;
            product.AromaticProfileAr = request.AromaticProfileAr;
            product.Price = request.Price;
            product.SalePrice = request.SalePrice;
            product.Weight = request.Weight;
            product.RoastLevel = request.RoastLevel;
            product.ProcessingMethod = request.ProcessingMethod;
            product.Origin = request.Origin;
            product.Altitude = request.Altitude;
            product.HarvestDate = request.HarvestDate;
            product.CategoryId = request.CategoryId;
            product.IsActive = request.IsActive;
            product.IsFeatured = request.IsFeatured;
            product.StockQuantity = request.StockQuantity;
            product.MinStockLevel = request.MinStockLevel;
            product.DisplayOrder = request.DisplayOrder;
            product.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            var productDto = MapToProductDto(product);
            return ApiResponse<ProductDto>.SuccessResponse(productDto, "Product updated successfully");
        }
        catch (Exception ex)
        {
            return ApiResponse<ProductDto>.ErrorResponse("An error occurred while updating the product", ex.Message);
        }
    }

    public async Task<ApiResponse<bool>> DeleteProductAsync(int id)
    {
        try
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Reviews)
                .FirstOrDefaultAsync(p => p.Id == id);
            
            if (product == null)
            {
                return ApiResponse<bool>.ErrorResponse("Product not found");
            }

            // Remove related entities
            _context.ProductImages.RemoveRange(product.Images);
            _context.ProductVariants.RemoveRange(product.Variants);
            _context.ProductReviews.RemoveRange(product.Reviews);
            _context.Products.Remove(product);

            await _context.SaveChangesAsync();

            return ApiResponse<bool>.SuccessResponse(true, "Product deleted successfully");
        }
        catch (Exception ex)
        {
            return ApiResponse<bool>.ErrorResponse("An error occurred while deleting the product", ex.Message);
        }
    }

    public async Task<ApiResponse<bool>> ToggleProductStatusAsync(int id)
    {
        try
        {
            var product = await _context.Products.FindAsync(id);
            if (product == null)
            {
                return ApiResponse<bool>.ErrorResponse("Product not found");
            }

            product.IsActive = !product.IsActive;
            product.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            var status = product.IsActive ? "activated" : "deactivated";
            return ApiResponse<bool>.SuccessResponse(true, $"Product {status} successfully");
        }
        catch (Exception ex)
        {
            return ApiResponse<bool>.ErrorResponse("An error occurred while toggling product status", ex.Message);
        }
    }

    public async Task<ApiResponse<bool>> UpdateStockAsync(int id, int quantity)
    {
        try
        {
            var product = await _context.Products.FindAsync(id);
            if (product == null)
            {
                return ApiResponse<bool>.ErrorResponse("Product not found");
            }

            product.StockQuantity = Math.Max(0, quantity);
            product.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            return ApiResponse<bool>.SuccessResponse(true, "Stock updated successfully");
        }
        catch (Exception ex)
        {
            return ApiResponse<bool>.ErrorResponse("An error occurred while updating stock", ex.Message);
        }
    }

    private static ProductDto MapToProductDto(Product product)
    {
        return new ProductDto
        {
            Id = product.Id,
            Sku = product.Sku,
            Name = product.Name,
            NameAr = product.NameAr,
            Description = product.Description,
            DescriptionAr = product.DescriptionAr,
            Notes = product.Notes,
            NotesAr = product.NotesAr,
            AromaticProfile = product.AromaticProfile,
            AromaticProfileAr = product.AromaticProfileAr,
            Price = product.Price,
            SalePrice = product.SalePrice,
            Weight = product.Weight,
            RoastLevel = product.RoastLevel,
            ProcessingMethod = product.ProcessingMethod,
            Origin = product.Origin,
            Altitude = product.Altitude,
            HarvestDate = product.HarvestDate,
            IsActive = product.IsActive,
            IsFeatured = product.IsFeatured,
            IsOnSale = product.SalePrice.HasValue,
            StockQuantity = product.StockQuantity,
            MinStockLevel = product.MinStockLevel,
            DisplayOrder = product.DisplayOrder,
            Category = new CategorySummaryDto
            {
                Id = product.Category!.Id,
                Slug = product.Category.Slug,
                Name = product.Category.Name,
                NameAr = product.Category.NameAr,
                ImageUrl = !string.IsNullOrEmpty(product.Category.ImagePath) ? $"/uploads/categories/{product.Category.ImagePath}" : null,
                ProductCount = 0, // Not needed for this context
                DisplayOrder = product.Category.DisplayOrder
            },
            Images = product.Images.Select(i => new ProductImageDto
            {
                Id = i.Id,
                ImageUrl = $"/uploads/products/{i.ImagePath}",
                AltText = i.AltText,
                IsPrimary = i.IsPrimary,
                DisplayOrder = i.DisplayOrder
            }).ToList(),
            Variants = product.Variants.Select(v => new ProductVariantDto
            {
                Id = v.Id,
                Name = v.Name,
                NameAr = v.NameAr,
                Price = v.Price,
                Weight = v.Weight,
                StockQuantity = v.StockQuantity,
                IsActive = v.IsActive
            }).ToList(),
            AverageRating = product.Reviews.Any() ? product.Reviews.Average(r => r.Rating) : 0,
            ReviewCount = product.Reviews.Count,
            CreatedAt = product.CreatedAt,
            UpdatedAt = product.UpdatedAt
        };
    }
}